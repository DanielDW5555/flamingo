
flamingo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a44  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004bcc  08004bcc  00014bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004c04  08004c04  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08004c04  08004c04  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004c04  08004c04  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004c04  08004c04  00014c04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004c08  08004c08  00014c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08004c0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000160  2000001c  08004c28  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08004c28  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f78a  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e9c  00000000  00000000  0002f7d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f08  00000000  00000000  00031678  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e50  00000000  00000000  00032580  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000200dc  00000000  00000000  000333d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011094  00000000  00000000  000534ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000c295d  00000000  00000000  00064540  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00126e9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000404c  00000000  00000000  00126ef0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000001c 	.word	0x2000001c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004bb4 	.word	0x08004bb4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000020 	.word	0x20000020
 80001c4:	08004bb4 	.word	0x08004bb4

080001c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b088      	sub	sp, #32
 80001cc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001ce:	f000 fde1 	bl	8000d94 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001d2:	f000 f951 	bl	8000478 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001d6:	f000 fa97 	bl	8000708 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80001da:	f000 fa63 	bl	80006a4 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80001de:	f000 f99f 	bl	8000520 <MX_I2C1_Init>
  MX_TIM2_Init();
 80001e2:	f000 f9dd 	bl	80005a0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

  // Start of program
  // Configure device so its ready to print data
  initLDDevice();
 80001e6:	f000 fbeb 	bl	80009c0 <initLDDevice>

  // Check if i2c device(s) are alive
  isDeviceAlive(LD_ADDR);
 80001ea:	4b94      	ldr	r3, [pc, #592]	; (800043c <main+0x274>)
 80001ec:	781b      	ldrb	r3, [r3, #0]
 80001ee:	4618      	mov	r0, r3
 80001f0:	f000 fb24 	bl	800083c <isDeviceAlive>

  // Initialises motars
  initMotors();
 80001f4:	f000 fc0c 	bl	8000a10 <initMotors>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Blink LED
	  HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_0);
 80001f8:	2101      	movs	r1, #1
 80001fa:	4891      	ldr	r0, [pc, #580]	; (8000440 <main+0x278>)
 80001fc:	f001 f8c4 	bl	8001388 <HAL_GPIO_TogglePin>

	  // Gets acceleration data from LD device
	  uint16_t outX = getJustifiedData(reg_outX_l, reg_outX_h);
 8000200:	2328      	movs	r3, #40	; 0x28
 8000202:	2229      	movs	r2, #41	; 0x29
 8000204:	4611      	mov	r1, r2
 8000206:	4618      	mov	r0, r3
 8000208:	f000 fb7a 	bl	8000900 <getJustifiedData>
 800020c:	4603      	mov	r3, r0
 800020e:	83fb      	strh	r3, [r7, #30]
	  float gX = twosComplement(outX) - x_offset;
 8000210:	8bfb      	ldrh	r3, [r7, #30]
 8000212:	4618      	mov	r0, r3
 8000214:	f000 fbaa 	bl	800096c <twosComplement>
 8000218:	4603      	mov	r3, r0
 800021a:	461a      	mov	r2, r3
 800021c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000220:	1ad3      	subs	r3, r2, r3
 8000222:	ee07 3a90 	vmov	s15, r3
 8000226:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800022a:	edc7 7a06 	vstr	s15, [r7, #24]

	  uint16_t outZ = getJustifiedData(reg_outZ_l, reg_outZ_h) + z_offset;
 800022e:	232c      	movs	r3, #44	; 0x2c
 8000230:	222d      	movs	r2, #45	; 0x2d
 8000232:	4611      	mov	r1, r2
 8000234:	4618      	mov	r0, r3
 8000236:	f000 fb63 	bl	8000900 <getJustifiedData>
 800023a:	4603      	mov	r3, r0
 800023c:	461a      	mov	r2, r3
 800023e:	f44f 738c 	mov.w	r3, #280	; 0x118
 8000242:	4413      	add	r3, r2
 8000244:	82fb      	strh	r3, [r7, #22]
	  uint8_t direction = checkDirection(outZ);
 8000246:	8afb      	ldrh	r3, [r7, #22]
 8000248:	4618      	mov	r0, r3
 800024a:	f000 fba5 	bl	8000998 <checkDirection>
 800024e:	4603      	mov	r3, r0
 8000250:	757b      	strb	r3, [r7, #21]
	  float gZ = outZ;
 8000252:	8afb      	ldrh	r3, [r7, #22]
 8000254:	ee07 3a90 	vmov	s15, r3
 8000258:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800025c:	edc7 7a04 	vstr	s15, [r7, #16]



	  // --- PID Control code ---
	  // Calculate the error between the desired target
	  pid_error = (pid_target - gX)/1;
 8000260:	f240 431a 	movw	r3, #1050	; 0x41a
 8000264:	ee07 3a90 	vmov	s15, r3
 8000268:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800026c:	edd7 7a06 	vldr	s15, [r7, #24]
 8000270:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000274:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000278:	ee17 3a90 	vmov	r3, s15
 800027c:	b21a      	sxth	r2, r3
 800027e:	4b71      	ldr	r3, [pc, #452]	; (8000444 <main+0x27c>)
 8000280:	801a      	strh	r2, [r3, #0]

	  if(pid_target-pid_target_range < pid_target < pid_target+pid_target_range)
 8000282:	2364      	movs	r3, #100	; 0x64
 8000284:	2b00      	cmp	r3, #0
 8000286:	bf14      	ite	ne
 8000288:	2301      	movne	r3, #1
 800028a:	2300      	moveq	r3, #0
 800028c:	b2db      	uxtb	r3, r3
 800028e:	461a      	mov	r2, r3
 8000290:	f240 431a 	movw	r3, #1050	; 0x41a
 8000294:	4619      	mov	r1, r3
 8000296:	2364      	movs	r3, #100	; 0x64
 8000298:	440b      	add	r3, r1
 800029a:	429a      	cmp	r2, r3
 800029c:	f280 80c4 	bge.w	8000428 <main+0x260>
	  {
		  // Set direction of motors to be correct
		  	  if(direction == 1)
 80002a0:	7d7b      	ldrb	r3, [r7, #21]
 80002a2:	2b01      	cmp	r3, #1
 80002a4:	d102      	bne.n	80002ac <main+0xe4>
		  	  {
		  		  setMotorDirectionForwards();
 80002a6:	f000 fbcd 	bl	8000a44 <setMotorDirectionForwards>
 80002aa:	e001      	b.n	80002b0 <main+0xe8>
		  	  }
		  	  else
		  	  {
		  		  setMotorDirectionBackwards();
 80002ac:	f000 fbda 	bl	8000a64 <setMotorDirectionBackwards>
		  	  }

	  // Calculate the integral error
	  if(pid_error != 0)
 80002b0:	4b64      	ldr	r3, [pc, #400]	; (8000444 <main+0x27c>)
 80002b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d00f      	beq.n	80002da <main+0x112>
	  {
		  pid_totalError += pid_error;
 80002ba:	4b62      	ldr	r3, [pc, #392]	; (8000444 <main+0x27c>)
 80002bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002c0:	ee07 3a90 	vmov	s15, r3
 80002c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80002c8:	4b5f      	ldr	r3, [pc, #380]	; (8000448 <main+0x280>)
 80002ca:	edd3 7a00 	vldr	s15, [r3]
 80002ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80002d2:	4b5d      	ldr	r3, [pc, #372]	; (8000448 <main+0x280>)
 80002d4:	edc3 7a00 	vstr	s15, [r3]
 80002d8:	e003      	b.n	80002e2 <main+0x11a>
	  }
	  else
	  {
		  pid_totalError = 0;
 80002da:	4b5b      	ldr	r3, [pc, #364]	; (8000448 <main+0x280>)
 80002dc:	f04f 0200 	mov.w	r2, #0
 80002e0:	601a      	str	r2, [r3, #0]
	  }

	  // Calculate all errors in PID controller
	  pid_proportional = pid_error * pid_kp;
 80002e2:	4b58      	ldr	r3, [pc, #352]	; (8000444 <main+0x27c>)
 80002e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80002e8:	ee07 3a90 	vmov	s15, r3
 80002ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80002f0:	4b56      	ldr	r3, [pc, #344]	; (800044c <main+0x284>)
 80002f2:	edd3 7a00 	vldr	s15, [r3]
 80002f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80002fa:	4b55      	ldr	r3, [pc, #340]	; (8000450 <main+0x288>)
 80002fc:	edc3 7a00 	vstr	s15, [r3]
	  pid_integral = pid_totalError * pid_ki;
 8000300:	4b51      	ldr	r3, [pc, #324]	; (8000448 <main+0x280>)
 8000302:	ed93 7a00 	vldr	s14, [r3]
 8000306:	4b53      	ldr	r3, [pc, #332]	; (8000454 <main+0x28c>)
 8000308:	edd3 7a00 	vldr	s15, [r3]
 800030c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000310:	4b51      	ldr	r3, [pc, #324]	; (8000458 <main+0x290>)
 8000312:	edc3 7a00 	vstr	s15, [r3]
	  pid_derivative = (pid_error - pid_lastError) * pid_kd;
 8000316:	4b4b      	ldr	r3, [pc, #300]	; (8000444 <main+0x27c>)
 8000318:	f9b3 3000 	ldrsh.w	r3, [r3]
 800031c:	ee07 3a90 	vmov	s15, r3
 8000320:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000324:	4b4d      	ldr	r3, [pc, #308]	; (800045c <main+0x294>)
 8000326:	edd3 7a00 	vldr	s15, [r3]
 800032a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800032e:	4b4c      	ldr	r3, [pc, #304]	; (8000460 <main+0x298>)
 8000330:	edd3 7a00 	vldr	s15, [r3]
 8000334:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000338:	4b4a      	ldr	r3, [pc, #296]	; (8000464 <main+0x29c>)
 800033a:	edc3 7a00 	vstr	s15, [r3]

	  pid_lastError = pid_error;
 800033e:	4b41      	ldr	r3, [pc, #260]	; (8000444 <main+0x27c>)
 8000340:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000344:	ee07 3a90 	vmov	s15, r3
 8000348:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800034c:	4b43      	ldr	r3, [pc, #268]	; (800045c <main+0x294>)
 800034e:	edc3 7a00 	vstr	s15, [r3]

	  pid_combinedError = pid_proportional + pid_integral + pid_derivative;
 8000352:	4b3f      	ldr	r3, [pc, #252]	; (8000450 <main+0x288>)
 8000354:	ed93 7a00 	vldr	s14, [r3]
 8000358:	4b3f      	ldr	r3, [pc, #252]	; (8000458 <main+0x290>)
 800035a:	edd3 7a00 	vldr	s15, [r3]
 800035e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000362:	4b40      	ldr	r3, [pc, #256]	; (8000464 <main+0x29c>)
 8000364:	edd3 7a00 	vldr	s15, [r3]
 8000368:	ee77 7a27 	vadd.f32	s15, s14, s15
 800036c:	4b3e      	ldr	r3, [pc, #248]	; (8000468 <main+0x2a0>)
 800036e:	edc3 7a00 	vstr	s15, [r3]



	  // Flips sign if total error is negative
	  if(pid_combinedError < 0)
 8000372:	4b3d      	ldr	r3, [pc, #244]	; (8000468 <main+0x2a0>)
 8000374:	edd3 7a00 	vldr	s15, [r3]
 8000378:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800037c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000380:	d507      	bpl.n	8000392 <main+0x1ca>
	  {
		  pid_combinedError *= -1;
 8000382:	4b39      	ldr	r3, [pc, #228]	; (8000468 <main+0x2a0>)
 8000384:	edd3 7a00 	vldr	s15, [r3]
 8000388:	eef1 7a67 	vneg.f32	s15, s15
 800038c:	4b36      	ldr	r3, [pc, #216]	; (8000468 <main+0x2a0>)
 800038e:	edc3 7a00 	vstr	s15, [r3]
	  }
	  if(pid_combinedError >= 256)
 8000392:	4b35      	ldr	r3, [pc, #212]	; (8000468 <main+0x2a0>)
 8000394:	edd3 7a00 	vldr	s15, [r3]
 8000398:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800046c <main+0x2a4>
 800039c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80003a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003a4:	db03      	blt.n	80003ae <main+0x1e6>
	  {
		  pid_combinedError = 256;
 80003a6:	4b30      	ldr	r3, [pc, #192]	; (8000468 <main+0x2a0>)
 80003a8:	f04f 4287 	mov.w	r2, #1132462080	; 0x43800000
 80003ac:	601a      	str	r2, [r3, #0]
	  }

	  // Due to accelerometer calibration errors, a DC bias is added to the control loop when flamingo is tilted forwards
	  if(direction == 1)
 80003ae:	7d7b      	ldrb	r3, [r7, #21]
 80003b0:	2b01      	cmp	r3, #1
 80003b2:	d10a      	bne.n	80003ca <main+0x202>
	  {
		pid_combinedError += pid_dc_offset;
 80003b4:	4b2c      	ldr	r3, [pc, #176]	; (8000468 <main+0x2a0>)
 80003b6:	ed93 7a00 	vldr	s14, [r3]
 80003ba:	4b2d      	ldr	r3, [pc, #180]	; (8000470 <main+0x2a8>)
 80003bc:	edd3 7a00 	vldr	s15, [r3]
 80003c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80003c4:	4b28      	ldr	r3, [pc, #160]	; (8000468 <main+0x2a0>)
 80003c6:	edc3 7a00 	vstr	s15, [r3]
	  }

	  // Set the motor drivers duty
	  motarDuty = pid_combinedError;
 80003ca:	4b27      	ldr	r3, [pc, #156]	; (8000468 <main+0x2a0>)
 80003cc:	edd3 7a00 	vldr	s15, [r3]
 80003d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80003d4:	ee17 3a90 	vmov	r3, s15
 80003d8:	b29a      	uxth	r2, r3
 80003da:	4b26      	ldr	r3, [pc, #152]	; (8000474 <main+0x2ac>)
 80003dc:	801a      	strh	r2, [r3, #0]
	  TIM2->CCR1 = motarDuty+pid_dc_offset;
 80003de:	4b25      	ldr	r3, [pc, #148]	; (8000474 <main+0x2ac>)
 80003e0:	881b      	ldrh	r3, [r3, #0]
 80003e2:	ee07 3a90 	vmov	s15, r3
 80003e6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80003ea:	4b21      	ldr	r3, [pc, #132]	; (8000470 <main+0x2a8>)
 80003ec:	edd3 7a00 	vldr	s15, [r3]
 80003f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80003f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80003f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80003fc:	ee17 2a90 	vmov	r2, s15
 8000400:	635a      	str	r2, [r3, #52]	; 0x34
	  TIM2->CCR2 = motarDuty+pid_dc_offset;
 8000402:	4b1c      	ldr	r3, [pc, #112]	; (8000474 <main+0x2ac>)
 8000404:	881b      	ldrh	r3, [r3, #0]
 8000406:	ee07 3a90 	vmov	s15, r3
 800040a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800040e:	4b18      	ldr	r3, [pc, #96]	; (8000470 <main+0x2a8>)
 8000410:	edd3 7a00 	vldr	s15, [r3]
 8000414:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000418:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800041c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000420:	ee17 2a90 	vmov	r2, s15
 8000424:	639a      	str	r2, [r3, #56]	; 0x38
 8000426:	e6e7      	b.n	80001f8 <main+0x30>

	  }
	  else
	  {
		  TIM2->CCR1 = 0;
 8000428:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800042c:	2200      	movs	r2, #0
 800042e:	635a      	str	r2, [r3, #52]	; 0x34
		  TIM2->CCR2 = 0;
 8000430:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000434:	2200      	movs	r2, #0
 8000436:	639a      	str	r2, [r3, #56]	; 0x38
  {
 8000438:	e6de      	b.n	80001f8 <main+0x30>
 800043a:	bf00      	nop
 800043c:	20000000 	.word	0x20000000
 8000440:	48001400 	.word	0x48001400
 8000444:	200000a4 	.word	0x200000a4
 8000448:	20000050 	.word	0x20000050
 800044c:	20000004 	.word	0x20000004
 8000450:	2000003c 	.word	0x2000003c
 8000454:	20000038 	.word	0x20000038
 8000458:	20000040 	.word	0x20000040
 800045c:	2000004c 	.word	0x2000004c
 8000460:	20000008 	.word	0x20000008
 8000464:	20000044 	.word	0x20000044
 8000468:	20000048 	.word	0x20000048
 800046c:	43800000 	.word	0x43800000
 8000470:	2000000c 	.word	0x2000000c
 8000474:	20000054 	.word	0x20000054

08000478 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b096      	sub	sp, #88	; 0x58
 800047c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800047e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000482:	2228      	movs	r2, #40	; 0x28
 8000484:	2100      	movs	r1, #0
 8000486:	4618      	mov	r0, r3
 8000488:	f004 fb8c 	bl	8004ba4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800048c:	f107 031c 	add.w	r3, r7, #28
 8000490:	2200      	movs	r2, #0
 8000492:	601a      	str	r2, [r3, #0]
 8000494:	605a      	str	r2, [r3, #4]
 8000496:	609a      	str	r2, [r3, #8]
 8000498:	60da      	str	r2, [r3, #12]
 800049a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800049c:	463b      	mov	r3, r7
 800049e:	2200      	movs	r2, #0
 80004a0:	601a      	str	r2, [r3, #0]
 80004a2:	605a      	str	r2, [r3, #4]
 80004a4:	609a      	str	r2, [r3, #8]
 80004a6:	60da      	str	r2, [r3, #12]
 80004a8:	611a      	str	r2, [r3, #16]
 80004aa:	615a      	str	r2, [r3, #20]
 80004ac:	619a      	str	r2, [r3, #24]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80004ae:	2302      	movs	r3, #2
 80004b0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80004b2:	2301      	movs	r3, #1
 80004b4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80004b6:	2310      	movs	r3, #16
 80004b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004ba:	2300      	movs	r3, #0
 80004bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80004c2:	4618      	mov	r0, r3
 80004c4:	f001 fd74 	bl	8001fb0 <HAL_RCC_OscConfig>
 80004c8:	4603      	mov	r3, r0
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d001      	beq.n	80004d2 <SystemClock_Config+0x5a>
  {
    Error_Handler();
 80004ce:	f000 fad9 	bl	8000a84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004d2:	230f      	movs	r3, #15
 80004d4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004d6:	2300      	movs	r3, #0
 80004d8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004da:	2300      	movs	r3, #0
 80004dc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004de:	2300      	movs	r3, #0
 80004e0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004e2:	2300      	movs	r3, #0
 80004e4:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004e6:	f107 031c 	add.w	r3, r7, #28
 80004ea:	2100      	movs	r1, #0
 80004ec:	4618      	mov	r0, r3
 80004ee:	f002 fc67 	bl	8002dc0 <HAL_RCC_ClockConfig>
 80004f2:	4603      	mov	r3, r0
 80004f4:	2b00      	cmp	r3, #0
 80004f6:	d001      	beq.n	80004fc <SystemClock_Config+0x84>
  {
    Error_Handler();
 80004f8:	f000 fac4 	bl	8000a84 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80004fc:	2320      	movs	r3, #32
 80004fe:	603b      	str	r3, [r7, #0]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000500:	2300      	movs	r3, #0
 8000502:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000504:	463b      	mov	r3, r7
 8000506:	4618      	mov	r0, r3
 8000508:	f002 fe90 	bl	800322c <HAL_RCCEx_PeriphCLKConfig>
 800050c:	4603      	mov	r3, r0
 800050e:	2b00      	cmp	r3, #0
 8000510:	d001      	beq.n	8000516 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000512:	f000 fab7 	bl	8000a84 <Error_Handler>
  }
}
 8000516:	bf00      	nop
 8000518:	3758      	adds	r7, #88	; 0x58
 800051a:	46bd      	mov	sp, r7
 800051c:	bd80      	pop	{r7, pc}
	...

08000520 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000524:	4b1b      	ldr	r3, [pc, #108]	; (8000594 <MX_I2C1_Init+0x74>)
 8000526:	4a1c      	ldr	r2, [pc, #112]	; (8000598 <MX_I2C1_Init+0x78>)
 8000528:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800052a:	4b1a      	ldr	r3, [pc, #104]	; (8000594 <MX_I2C1_Init+0x74>)
 800052c:	4a1b      	ldr	r2, [pc, #108]	; (800059c <MX_I2C1_Init+0x7c>)
 800052e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000530:	4b18      	ldr	r3, [pc, #96]	; (8000594 <MX_I2C1_Init+0x74>)
 8000532:	2200      	movs	r2, #0
 8000534:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000536:	4b17      	ldr	r3, [pc, #92]	; (8000594 <MX_I2C1_Init+0x74>)
 8000538:	2201      	movs	r2, #1
 800053a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800053c:	4b15      	ldr	r3, [pc, #84]	; (8000594 <MX_I2C1_Init+0x74>)
 800053e:	2200      	movs	r2, #0
 8000540:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000542:	4b14      	ldr	r3, [pc, #80]	; (8000594 <MX_I2C1_Init+0x74>)
 8000544:	2200      	movs	r2, #0
 8000546:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000548:	4b12      	ldr	r3, [pc, #72]	; (8000594 <MX_I2C1_Init+0x74>)
 800054a:	2200      	movs	r2, #0
 800054c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800054e:	4b11      	ldr	r3, [pc, #68]	; (8000594 <MX_I2C1_Init+0x74>)
 8000550:	2200      	movs	r2, #0
 8000552:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000554:	4b0f      	ldr	r3, [pc, #60]	; (8000594 <MX_I2C1_Init+0x74>)
 8000556:	2200      	movs	r2, #0
 8000558:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800055a:	480e      	ldr	r0, [pc, #56]	; (8000594 <MX_I2C1_Init+0x74>)
 800055c:	f000 ff2e 	bl	80013bc <HAL_I2C_Init>
 8000560:	4603      	mov	r3, r0
 8000562:	2b00      	cmp	r3, #0
 8000564:	d001      	beq.n	800056a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000566:	f000 fa8d 	bl	8000a84 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800056a:	2100      	movs	r1, #0
 800056c:	4809      	ldr	r0, [pc, #36]	; (8000594 <MX_I2C1_Init+0x74>)
 800056e:	f001 fc87 	bl	8001e80 <HAL_I2CEx_ConfigAnalogFilter>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d001      	beq.n	800057c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000578:	f000 fa84 	bl	8000a84 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 800057c:	2100      	movs	r1, #0
 800057e:	4805      	ldr	r0, [pc, #20]	; (8000594 <MX_I2C1_Init+0x74>)
 8000580:	f001 fcc9 	bl	8001f16 <HAL_I2CEx_ConfigDigitalFilter>
 8000584:	4603      	mov	r3, r0
 8000586:	2b00      	cmp	r3, #0
 8000588:	d001      	beq.n	800058e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800058a:	f000 fa7b 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800058e:	bf00      	nop
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	20000058 	.word	0x20000058
 8000598:	40005400 	.word	0x40005400
 800059c:	2000090e 	.word	0x2000090e

080005a0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b08e      	sub	sp, #56	; 0x38
 80005a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
 80005ae:	605a      	str	r2, [r3, #4]
 80005b0:	609a      	str	r2, [r3, #8]
 80005b2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005b4:	f107 031c 	add.w	r3, r7, #28
 80005b8:	2200      	movs	r2, #0
 80005ba:	601a      	str	r2, [r3, #0]
 80005bc:	605a      	str	r2, [r3, #4]
 80005be:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80005c0:	463b      	mov	r3, r7
 80005c2:	2200      	movs	r2, #0
 80005c4:	601a      	str	r2, [r3, #0]
 80005c6:	605a      	str	r2, [r3, #4]
 80005c8:	609a      	str	r2, [r3, #8]
 80005ca:	60da      	str	r2, [r3, #12]
 80005cc:	611a      	str	r2, [r3, #16]
 80005ce:	615a      	str	r2, [r3, #20]
 80005d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80005d2:	4b33      	ldr	r3, [pc, #204]	; (80006a0 <MX_TIM2_Init+0x100>)
 80005d4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80005d8:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 80005da:	4b31      	ldr	r3, [pc, #196]	; (80006a0 <MX_TIM2_Init+0x100>)
 80005dc:	220a      	movs	r2, #10
 80005de:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005e0:	4b2f      	ldr	r3, [pc, #188]	; (80006a0 <MX_TIM2_Init+0x100>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 256;
 80005e6:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <MX_TIM2_Init+0x100>)
 80005e8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80005ec:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005ee:	4b2c      	ldr	r3, [pc, #176]	; (80006a0 <MX_TIM2_Init+0x100>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80005f4:	4b2a      	ldr	r3, [pc, #168]	; (80006a0 <MX_TIM2_Init+0x100>)
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005fa:	4829      	ldr	r0, [pc, #164]	; (80006a0 <MX_TIM2_Init+0x100>)
 80005fc:	f002 ff4c 	bl	8003498 <HAL_TIM_Base_Init>
 8000600:	4603      	mov	r3, r0
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000606:	f000 fa3d 	bl	8000a84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800060a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800060e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000610:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000614:	4619      	mov	r1, r3
 8000616:	4822      	ldr	r0, [pc, #136]	; (80006a0 <MX_TIM2_Init+0x100>)
 8000618:	f003 f9f2 	bl	8003a00 <HAL_TIM_ConfigClockSource>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000622:	f000 fa2f 	bl	8000a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000626:	481e      	ldr	r0, [pc, #120]	; (80006a0 <MX_TIM2_Init+0x100>)
 8000628:	f002 ff8d 	bl	8003546 <HAL_TIM_PWM_Init>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000632:	f000 fa27 	bl	8000a84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000636:	2300      	movs	r3, #0
 8000638:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800063a:	2300      	movs	r3, #0
 800063c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800063e:	f107 031c 	add.w	r3, r7, #28
 8000642:	4619      	mov	r1, r3
 8000644:	4816      	ldr	r0, [pc, #88]	; (80006a0 <MX_TIM2_Init+0x100>)
 8000646:	f003 fe7f 	bl	8004348 <HAL_TIMEx_MasterConfigSynchronization>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000650:	f000 fa18 	bl	8000a84 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000654:	2360      	movs	r3, #96	; 0x60
 8000656:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800065c:	2300      	movs	r3, #0
 800065e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000660:	2300      	movs	r3, #0
 8000662:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000664:	463b      	mov	r3, r7
 8000666:	2200      	movs	r2, #0
 8000668:	4619      	mov	r1, r3
 800066a:	480d      	ldr	r0, [pc, #52]	; (80006a0 <MX_TIM2_Init+0x100>)
 800066c:	f003 f8b8 	bl	80037e0 <HAL_TIM_PWM_ConfigChannel>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000676:	f000 fa05 	bl	8000a84 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800067a:	463b      	mov	r3, r7
 800067c:	2204      	movs	r2, #4
 800067e:	4619      	mov	r1, r3
 8000680:	4807      	ldr	r0, [pc, #28]	; (80006a0 <MX_TIM2_Init+0x100>)
 8000682:	f003 f8ad 	bl	80037e0 <HAL_TIM_PWM_ConfigChannel>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800068c:	f000 f9fa 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000690:	4803      	ldr	r0, [pc, #12]	; (80006a0 <MX_TIM2_Init+0x100>)
 8000692:	f000 faa1 	bl	8000bd8 <HAL_TIM_MspPostInit>

}
 8000696:	bf00      	nop
 8000698:	3738      	adds	r7, #56	; 0x38
 800069a:	46bd      	mov	sp, r7
 800069c:	bd80      	pop	{r7, pc}
 800069e:	bf00      	nop
 80006a0:	200000a8 	.word	0x200000a8

080006a4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80006a8:	4b15      	ldr	r3, [pc, #84]	; (8000700 <MX_USART2_UART_Init+0x5c>)
 80006aa:	4a16      	ldr	r2, [pc, #88]	; (8000704 <MX_USART2_UART_Init+0x60>)
 80006ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80006ae:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_USART2_UART_Init+0x5c>)
 80006b0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80006b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006b6:	4b12      	ldr	r3, [pc, #72]	; (8000700 <MX_USART2_UART_Init+0x5c>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006bc:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_USART2_UART_Init+0x5c>)
 80006be:	2200      	movs	r2, #0
 80006c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_USART2_UART_Init+0x5c>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006c8:	4b0d      	ldr	r3, [pc, #52]	; (8000700 <MX_USART2_UART_Init+0x5c>)
 80006ca:	220c      	movs	r2, #12
 80006cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ce:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_USART2_UART_Init+0x5c>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d4:	4b0a      	ldr	r3, [pc, #40]	; (8000700 <MX_USART2_UART_Init+0x5c>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006da:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_USART2_UART_Init+0x5c>)
 80006dc:	2200      	movs	r2, #0
 80006de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e0:	4b07      	ldr	r3, [pc, #28]	; (8000700 <MX_USART2_UART_Init+0x5c>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_MultiProcessor_Init(&huart2, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 80006e6:	2200      	movs	r2, #0
 80006e8:	2100      	movs	r1, #0
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_USART2_UART_Init+0x5c>)
 80006ec:	f003 fe9a 	bl	8004424 <HAL_MultiProcessor_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 80006f6:	f000 f9c5 	bl	8000a84 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	200000f4 	.word	0x200000f4
 8000704:	40004400 	.word	0x40004400

08000708 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b088      	sub	sp, #32
 800070c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800070e:	f107 030c 	add.w	r3, r7, #12
 8000712:	2200      	movs	r2, #0
 8000714:	601a      	str	r2, [r3, #0]
 8000716:	605a      	str	r2, [r3, #4]
 8000718:	609a      	str	r2, [r3, #8]
 800071a:	60da      	str	r2, [r3, #12]
 800071c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800071e:	4b37      	ldr	r3, [pc, #220]	; (80007fc <MX_GPIO_Init+0xf4>)
 8000720:	695b      	ldr	r3, [r3, #20]
 8000722:	4a36      	ldr	r2, [pc, #216]	; (80007fc <MX_GPIO_Init+0xf4>)
 8000724:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000728:	6153      	str	r3, [r2, #20]
 800072a:	4b34      	ldr	r3, [pc, #208]	; (80007fc <MX_GPIO_Init+0xf4>)
 800072c:	695b      	ldr	r3, [r3, #20]
 800072e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000736:	4b31      	ldr	r3, [pc, #196]	; (80007fc <MX_GPIO_Init+0xf4>)
 8000738:	695b      	ldr	r3, [r3, #20]
 800073a:	4a30      	ldr	r2, [pc, #192]	; (80007fc <MX_GPIO_Init+0xf4>)
 800073c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000740:	6153      	str	r3, [r2, #20]
 8000742:	4b2e      	ldr	r3, [pc, #184]	; (80007fc <MX_GPIO_Init+0xf4>)
 8000744:	695b      	ldr	r3, [r3, #20]
 8000746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800074a:	607b      	str	r3, [r7, #4]
 800074c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074e:	4b2b      	ldr	r3, [pc, #172]	; (80007fc <MX_GPIO_Init+0xf4>)
 8000750:	695b      	ldr	r3, [r3, #20]
 8000752:	4a2a      	ldr	r2, [pc, #168]	; (80007fc <MX_GPIO_Init+0xf4>)
 8000754:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000758:	6153      	str	r3, [r2, #20]
 800075a:	4b28      	ldr	r3, [pc, #160]	; (80007fc <MX_GPIO_Init+0xf4>)
 800075c:	695b      	ldr	r3, [r3, #20]
 800075e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000762:	603b      	str	r3, [r7, #0]
 8000764:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_0, GPIO_PIN_RESET);
 8000766:	2200      	movs	r2, #0
 8000768:	2101      	movs	r1, #1
 800076a:	4825      	ldr	r0, [pc, #148]	; (8000800 <MX_GPIO_Init+0xf8>)
 800076c:	f000 fdf4 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8000770:	2200      	movs	r2, #0
 8000772:	21d8      	movs	r1, #216	; 0xd8
 8000774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000778:	f000 fdee 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 800077c:	2200      	movs	r2, #0
 800077e:	2120      	movs	r1, #32
 8000780:	4820      	ldr	r0, [pc, #128]	; (8000804 <MX_GPIO_Init+0xfc>)
 8000782:	f000 fde9 	bl	8001358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000786:	2301      	movs	r3, #1
 8000788:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800078a:	2301      	movs	r3, #1
 800078c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000792:	2300      	movs	r3, #0
 8000794:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000796:	f107 030c 	add.w	r3, r7, #12
 800079a:	4619      	mov	r1, r3
 800079c:	4818      	ldr	r0, [pc, #96]	; (8000800 <MX_GPIO_Init+0xf8>)
 800079e:	f000 fc69 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3 PA4 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_7;
 80007a2:	23d8      	movs	r3, #216	; 0xd8
 80007a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007a6:	2301      	movs	r3, #1
 80007a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	4619      	mov	r1, r3
 80007b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007bc:	f000 fc5a 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007c0:	2301      	movs	r3, #1
 80007c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007c4:	2300      	movs	r3, #0
 80007c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c8:	2300      	movs	r3, #0
 80007ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007cc:	f107 030c 	add.w	r3, r7, #12
 80007d0:	4619      	mov	r1, r3
 80007d2:	480c      	ldr	r0, [pc, #48]	; (8000804 <MX_GPIO_Init+0xfc>)
 80007d4:	f000 fc4e 	bl	8001074 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80007d8:	2320      	movs	r3, #32
 80007da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007dc:	2301      	movs	r3, #1
 80007de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007e8:	f107 030c 	add.w	r3, r7, #12
 80007ec:	4619      	mov	r1, r3
 80007ee:	4805      	ldr	r0, [pc, #20]	; (8000804 <MX_GPIO_Init+0xfc>)
 80007f0:	f000 fc40 	bl	8001074 <HAL_GPIO_Init>

}
 80007f4:	bf00      	nop
 80007f6:	3720      	adds	r7, #32
 80007f8:	46bd      	mov	sp, r7
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	40021000 	.word	0x40021000
 8000800:	48001400 	.word	0x48001400
 8000804:	48000400 	.word	0x48000400

08000808 <ledSuccess>:
/* USER CODE BEGIN 4 */
// User Functions

// Blinks LED quickly 3 times
void ledSuccess()
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
	for(int i = 0; i < 6; i ++)
 800080e:	2300      	movs	r3, #0
 8000810:	607b      	str	r3, [r7, #4]
 8000812:	e009      	b.n	8000828 <ledSuccess+0x20>
	{
		HAL_GPIO_TogglePin(GPIOF, GPIO_PIN_0);
 8000814:	2101      	movs	r1, #1
 8000816:	4808      	ldr	r0, [pc, #32]	; (8000838 <ledSuccess+0x30>)
 8000818:	f000 fdb6 	bl	8001388 <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 800081c:	2032      	movs	r0, #50	; 0x32
 800081e:	f000 fb1f 	bl	8000e60 <HAL_Delay>
	for(int i = 0; i < 6; i ++)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	3301      	adds	r3, #1
 8000826:	607b      	str	r3, [r7, #4]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2b05      	cmp	r3, #5
 800082c:	ddf2      	ble.n	8000814 <ledSuccess+0xc>
	}
}
 800082e:	bf00      	nop
 8000830:	bf00      	nop
 8000832:	3708      	adds	r7, #8
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	48001400 	.word	0x48001400

0800083c <isDeviceAlive>:

// Checks if device is alive, if so it blinks LED fast 5 times
void isDeviceAlive(uint8_t slaveAddress)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	4603      	mov	r3, r0
 8000844:	71fb      	strb	r3, [r7, #7]
	if(HAL_I2C_IsDeviceReady(&hi2c1, LD_ADDR, 5, 100) == HAL_OK)
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <isDeviceAlive+0x2c>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	b299      	uxth	r1, r3
 800084c:	2364      	movs	r3, #100	; 0x64
 800084e:	2205      	movs	r2, #5
 8000850:	4806      	ldr	r0, [pc, #24]	; (800086c <isDeviceAlive+0x30>)
 8000852:	f001 f82d 	bl	80018b0 <HAL_I2C_IsDeviceReady>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d101      	bne.n	8000860 <isDeviceAlive+0x24>
	{
		ledSuccess();
 800085c:	f7ff ffd4 	bl	8000808 <ledSuccess>
	}
}
 8000860:	bf00      	nop
 8000862:	3708      	adds	r7, #8
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20000000 	.word	0x20000000
 800086c:	20000058 	.word	0x20000058

08000870 <i2cWriteOneByte>:

// Writes one byte to the a register
void i2cWriteOneByte(uint8_t slaveAddress, uint8_t regAddress, uint8_t data)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af02      	add	r7, sp, #8
 8000876:	4603      	mov	r3, r0
 8000878:	71fb      	strb	r3, [r7, #7]
 800087a:	460b      	mov	r3, r1
 800087c:	71bb      	strb	r3, [r7, #6]
 800087e:	4613      	mov	r3, r2
 8000880:	717b      	strb	r3, [r7, #5]
	uint8_t buf[2];

	buf[0] = 0x20;
 8000882:	2320      	movs	r3, #32
 8000884:	733b      	strb	r3, [r7, #12]
	buf[1] = 0xCF;
 8000886:	23cf      	movs	r3, #207	; 0xcf
 8000888:	737b      	strb	r3, [r7, #13]
  	HAL_I2C_Master_Transmit(&hi2c1, LD_ADDR, buf, 2, 100);
 800088a:	4b07      	ldr	r3, [pc, #28]	; (80008a8 <i2cWriteOneByte+0x38>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	b299      	uxth	r1, r3
 8000890:	f107 020c 	add.w	r2, r7, #12
 8000894:	2364      	movs	r3, #100	; 0x64
 8000896:	9300      	str	r3, [sp, #0]
 8000898:	2302      	movs	r3, #2
 800089a:	4804      	ldr	r0, [pc, #16]	; (80008ac <i2cWriteOneByte+0x3c>)
 800089c:	f000 fe1e 	bl	80014dc <HAL_I2C_Master_Transmit>
}
 80008a0:	bf00      	nop
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000000 	.word	0x20000000
 80008ac:	20000058 	.word	0x20000058

080008b0 <i2cReadOneByte>:

// Reads one byte on slave device
uint8_t i2cReadOneByte(uint8_t slaveAddress, uint8_t regAddress)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af02      	add	r7, sp, #8
 80008b6:	4603      	mov	r3, r0
 80008b8:	460a      	mov	r2, r1
 80008ba:	71fb      	strb	r3, [r7, #7]
 80008bc:	4613      	mov	r3, r2
 80008be:	71bb      	strb	r3, [r7, #6]
	uint8_t buf[1];
	uint8_t buf2[1];
	buf[0] = regAddress;
 80008c0:	79bb      	ldrb	r3, [r7, #6]
 80008c2:	733b      	strb	r3, [r7, #12]
	HAL_I2C_Master_Transmit(&hi2c1, slaveAddress, buf, 1, 100);
 80008c4:	79fb      	ldrb	r3, [r7, #7]
 80008c6:	b299      	uxth	r1, r3
 80008c8:	f107 020c 	add.w	r2, r7, #12
 80008cc:	2364      	movs	r3, #100	; 0x64
 80008ce:	9300      	str	r3, [sp, #0]
 80008d0:	2301      	movs	r3, #1
 80008d2:	4809      	ldr	r0, [pc, #36]	; (80008f8 <i2cReadOneByte+0x48>)
 80008d4:	f000 fe02 	bl	80014dc <HAL_I2C_Master_Transmit>

	HAL_I2C_Master_Receive(&hi2c1, LD_ADDR, buf2, 1, 100);
 80008d8:	4b08      	ldr	r3, [pc, #32]	; (80008fc <i2cReadOneByte+0x4c>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	b299      	uxth	r1, r3
 80008de:	f107 0208 	add.w	r2, r7, #8
 80008e2:	2364      	movs	r3, #100	; 0x64
 80008e4:	9300      	str	r3, [sp, #0]
 80008e6:	2301      	movs	r3, #1
 80008e8:	4803      	ldr	r0, [pc, #12]	; (80008f8 <i2cReadOneByte+0x48>)
 80008ea:	f000 feeb 	bl	80016c4 <HAL_I2C_Master_Receive>
	return buf2[0];
 80008ee:	7a3b      	ldrb	r3, [r7, #8]
}
 80008f0:	4618      	mov	r0, r3
 80008f2:	3710      	adds	r7, #16
 80008f4:	46bd      	mov	sp, r7
 80008f6:	bd80      	pop	{r7, pc}
 80008f8:	20000058 	.word	0x20000058
 80008fc:	20000000 	.word	0x20000000

08000900 <getJustifiedData>:

// Combines low and high bytes to get the justified data
uint16_t getJustifiedData(uint8_t LSBAddress, uint8_t HSBAddress)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b084      	sub	sp, #16
 8000904:	af00      	add	r7, sp, #0
 8000906:	4603      	mov	r3, r0
 8000908:	460a      	mov	r2, r1
 800090a:	71fb      	strb	r3, [r7, #7]
 800090c:	4613      	mov	r3, r2
 800090e:	71bb      	strb	r3, [r7, #6]
	int16_t justifiedData;
	uint8_t lsbData = i2cReadOneByte(LD_ADDR, LSBAddress);
 8000910:	4b15      	ldr	r3, [pc, #84]	; (8000968 <getJustifiedData+0x68>)
 8000912:	781b      	ldrb	r3, [r3, #0]
 8000914:	79fa      	ldrb	r2, [r7, #7]
 8000916:	4611      	mov	r1, r2
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ffc9 	bl	80008b0 <i2cReadOneByte>
 800091e:	4603      	mov	r3, r0
 8000920:	737b      	strb	r3, [r7, #13]
	uint8_t hsbData = i2cReadOneByte(LD_ADDR, HSBAddress);
 8000922:	4b11      	ldr	r3, [pc, #68]	; (8000968 <getJustifiedData+0x68>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	79ba      	ldrb	r2, [r7, #6]
 8000928:	4611      	mov	r1, r2
 800092a:	4618      	mov	r0, r3
 800092c:	f7ff ffc0 	bl	80008b0 <i2cReadOneByte>
 8000930:	4603      	mov	r3, r0
 8000932:	733b      	strb	r3, [r7, #12]

	justifiedData = ((lsbData | ((int16_t)hsbData << 8 )) & 0x0FFF);
 8000934:	7b7b      	ldrb	r3, [r7, #13]
 8000936:	b21a      	sxth	r2, r3
 8000938:	7b3b      	ldrb	r3, [r7, #12]
 800093a:	021b      	lsls	r3, r3, #8
 800093c:	b21b      	sxth	r3, r3
 800093e:	4313      	orrs	r3, r2
 8000940:	b21b      	sxth	r3, r3
 8000942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000946:	81fb      	strh	r3, [r7, #14]

	// Compute twos complement
	if(justifiedData > 0x7FF)
 8000948:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800094c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000950:	db05      	blt.n	800095e <getJustifiedData+0x5e>
	{
		justifiedData |= 0xF000;
 8000952:	89fb      	ldrh	r3, [r7, #14]
 8000954:	ea6f 5303 	mvn.w	r3, r3, lsl #20
 8000958:	ea6f 5313 	mvn.w	r3, r3, lsr #20
 800095c:	81fb      	strh	r3, [r7, #14]
		// Gets magnitude for twos complement
		// justifiedData = ((~justifiedData) + 1) & 0x0FFF;
	}

	return(justifiedData);
 800095e:	89fb      	ldrh	r3, [r7, #14]
}
 8000960:	4618      	mov	r0, r3
 8000962:	3710      	adds	r7, #16
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	20000000 	.word	0x20000000

0800096c <twosComplement>:

// Returns the twos complement of a 12 bit number
uint16_t twosComplement(uint16_t data)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	4603      	mov	r3, r0
 8000974:	80fb      	strh	r3, [r7, #6]
	//if(data > 0x07FF)
	if(data > 0x07FF)
 8000976:	88fb      	ldrh	r3, [r7, #6]
 8000978:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800097c:	d305      	bcc.n	800098a <twosComplement+0x1e>
	{
		data = (((~data) + 1) & 0x0FFF);
 800097e:	88fb      	ldrh	r3, [r7, #6]
 8000980:	425b      	negs	r3, r3
 8000982:	b29b      	uxth	r3, r3
 8000984:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000988:	80fb      	strh	r3, [r7, #6]
	}
	return(data);
 800098a:	88fb      	ldrh	r3, [r7, #6]
}
 800098c:	4618      	mov	r0, r3
 800098e:	370c      	adds	r7, #12
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <checkDirection>:

// Checks the direction of which way the board is tilting
// If it returns 0, it if tilting backwards
// If it returns 1, it is tilting forwards
uint8_t checkDirection(uint16_t data)
{
 8000998:	b480      	push	{r7}
 800099a:	b085      	sub	sp, #20
 800099c:	af00      	add	r7, sp, #0
 800099e:	4603      	mov	r3, r0
 80009a0:	80fb      	strh	r3, [r7, #6]
	uint8_t direction = 0;
 80009a2:	2300      	movs	r3, #0
 80009a4:	73fb      	strb	r3, [r7, #15]

	if(data > 0x07FF)
 80009a6:	88fb      	ldrh	r3, [r7, #6]
 80009a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80009ac:	d301      	bcc.n	80009b2 <checkDirection+0x1a>
	{
		direction = 1;
 80009ae:	2301      	movs	r3, #1
 80009b0:	73fb      	strb	r3, [r7, #15]
	}

	return(direction);
 80009b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80009b4:	4618      	mov	r0, r3
 80009b6:	3714      	adds	r7, #20
 80009b8:	46bd      	mov	sp, r7
 80009ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009be:	4770      	bx	lr

080009c0 <initLDDevice>:

// Inits LD device
void initLDDevice(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0
	// Set CS high
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, 1);
 80009c6:	2201      	movs	r2, #1
 80009c8:	2120      	movs	r1, #32
 80009ca:	480e      	ldr	r0, [pc, #56]	; (8000a04 <initLDDevice+0x44>)
 80009cc:	f000 fcc4 	bl	8001358 <HAL_GPIO_WritePin>
	// Turn on device for measurements
	i2cWriteOneByte(LD_ADDR, 0x20, 0xCF);
 80009d0:	4b0d      	ldr	r3, [pc, #52]	; (8000a08 <initLDDevice+0x48>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	22cf      	movs	r2, #207	; 0xcf
 80009d6:	2120      	movs	r1, #32
 80009d8:	4618      	mov	r0, r3
 80009da:	f7ff ff49 	bl	8000870 <i2cWriteOneByte>

	// Reads the who am I register and outputs it on UART
	uint8_t data = i2cReadOneByte(LD_ADDR, reg_whoAmI);
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <initLDDevice+0x48>)
 80009e0:	781b      	ldrb	r3, [r3, #0]
 80009e2:	220f      	movs	r2, #15
 80009e4:	4611      	mov	r1, r2
 80009e6:	4618      	mov	r0, r3
 80009e8:	f7ff ff62 	bl	80008b0 <i2cReadOneByte>
 80009ec:	4603      	mov	r3, r0
 80009ee:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart2, &data, 1, 100);
 80009f0:	1df9      	adds	r1, r7, #7
 80009f2:	2364      	movs	r3, #100	; 0x64
 80009f4:	2201      	movs	r2, #1
 80009f6:	4805      	ldr	r0, [pc, #20]	; (8000a0c <initLDDevice+0x4c>)
 80009f8:	f003 fd7e 	bl	80044f8 <HAL_UART_Transmit>
}
 80009fc:	bf00      	nop
 80009fe:	3708      	adds	r7, #8
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	48000400 	.word	0x48000400
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	200000f4 	.word	0x200000f4

08000a10 <initMotors>:

// Start PWM channels on DRV devices
void initMotors()
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
	// Turn on PWM
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a14:	2100      	movs	r1, #0
 8000a16:	480a      	ldr	r0, [pc, #40]	; (8000a40 <initMotors+0x30>)
 8000a18:	f002 fdf6 	bl	8003608 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	4808      	ldr	r0, [pc, #32]	; (8000a40 <initMotors+0x30>)
 8000a20:	f002 fdf2 	bl	8003608 <HAL_TIM_PWM_Start>

	// Enable devices
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, 1);
 8000a24:	2201      	movs	r2, #1
 8000a26:	2108      	movs	r1, #8
 8000a28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a2c:	f000 fc94 	bl	8001358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, 1);
 8000a30:	2201      	movs	r2, #1
 8000a32:	2140      	movs	r1, #64	; 0x40
 8000a34:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a38:	f000 fc8e 	bl	8001358 <HAL_GPIO_WritePin>
}
 8000a3c:	bf00      	nop
 8000a3e:	bd80      	pop	{r7, pc}
 8000a40:	200000a8 	.word	0x200000a8

08000a44 <setMotorDirectionForwards>:
	}
}

// Sets the motor direction forwards
void setMotorDirectionForwards()
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 1);
 8000a48:	2201      	movs	r2, #1
 8000a4a:	2110      	movs	r1, #16
 8000a4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a50:	f000 fc82 	bl	8001358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 0);
 8000a54:	2200      	movs	r2, #0
 8000a56:	2180      	movs	r1, #128	; 0x80
 8000a58:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a5c:	f000 fc7c 	bl	8001358 <HAL_GPIO_WritePin>
}
 8000a60:	bf00      	nop
 8000a62:	bd80      	pop	{r7, pc}

08000a64 <setMotorDirectionBackwards>:

// Sets the motor direction backwards
void setMotorDirectionBackwards()
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, 0);
 8000a68:	2200      	movs	r2, #0
 8000a6a:	2110      	movs	r1, #16
 8000a6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a70:	f000 fc72 	bl	8001358 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, 1);
 8000a74:	2201      	movs	r2, #1
 8000a76:	2180      	movs	r1, #128	; 0x80
 8000a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a7c:	f000 fc6c 	bl	8001358 <HAL_GPIO_WritePin>
}
 8000a80:	bf00      	nop
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a88:	b672      	cpsid	i
}
 8000a8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <Error_Handler+0x8>
	...

08000a90 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a96:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <HAL_MspInit+0x44>)
 8000a98:	699b      	ldr	r3, [r3, #24]
 8000a9a:	4a0e      	ldr	r2, [pc, #56]	; (8000ad4 <HAL_MspInit+0x44>)
 8000a9c:	f043 0301 	orr.w	r3, r3, #1
 8000aa0:	6193      	str	r3, [r2, #24]
 8000aa2:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <HAL_MspInit+0x44>)
 8000aa4:	699b      	ldr	r3, [r3, #24]
 8000aa6:	f003 0301 	and.w	r3, r3, #1
 8000aaa:	607b      	str	r3, [r7, #4]
 8000aac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <HAL_MspInit+0x44>)
 8000ab0:	69db      	ldr	r3, [r3, #28]
 8000ab2:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <HAL_MspInit+0x44>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	61d3      	str	r3, [r2, #28]
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_MspInit+0x44>)
 8000abc:	69db      	ldr	r3, [r3, #28]
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40021000 	.word	0x40021000

08000ad8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a26      	ldr	r2, [pc, #152]	; (8000b90 <HAL_I2C_MspInit+0xb8>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d145      	bne.n	8000b86 <HAL_I2C_MspInit+0xae>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000afa:	4b26      	ldr	r3, [pc, #152]	; (8000b94 <HAL_I2C_MspInit+0xbc>)
 8000afc:	695b      	ldr	r3, [r3, #20]
 8000afe:	4a25      	ldr	r2, [pc, #148]	; (8000b94 <HAL_I2C_MspInit+0xbc>)
 8000b00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b04:	6153      	str	r3, [r2, #20]
 8000b06:	4b23      	ldr	r3, [pc, #140]	; (8000b94 <HAL_I2C_MspInit+0xbc>)
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b0e:	613b      	str	r3, [r7, #16]
 8000b10:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b12:	4b20      	ldr	r3, [pc, #128]	; (8000b94 <HAL_I2C_MspInit+0xbc>)
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	4a1f      	ldr	r2, [pc, #124]	; (8000b94 <HAL_I2C_MspInit+0xbc>)
 8000b18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b1c:	6153      	str	r3, [r2, #20]
 8000b1e:	4b1d      	ldr	r3, [pc, #116]	; (8000b94 <HAL_I2C_MspInit+0xbc>)
 8000b20:	695b      	ldr	r3, [r3, #20]
 8000b22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PA15     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000b2a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b30:	2312      	movs	r3, #18
 8000b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b34:	2301      	movs	r3, #1
 8000b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b38:	2303      	movs	r3, #3
 8000b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b3c:	2304      	movs	r3, #4
 8000b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b40:	f107 0314 	add.w	r3, r7, #20
 8000b44:	4619      	mov	r1, r3
 8000b46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b4a:	f000 fa93 	bl	8001074 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b4e:	2380      	movs	r3, #128	; 0x80
 8000b50:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b52:	2312      	movs	r3, #18
 8000b54:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b56:	2301      	movs	r3, #1
 8000b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b5a:	2303      	movs	r3, #3
 8000b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b5e:	2304      	movs	r3, #4
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b62:	f107 0314 	add.w	r3, r7, #20
 8000b66:	4619      	mov	r1, r3
 8000b68:	480b      	ldr	r0, [pc, #44]	; (8000b98 <HAL_I2C_MspInit+0xc0>)
 8000b6a:	f000 fa83 	bl	8001074 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <HAL_I2C_MspInit+0xbc>)
 8000b70:	69db      	ldr	r3, [r3, #28]
 8000b72:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <HAL_I2C_MspInit+0xbc>)
 8000b74:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b78:	61d3      	str	r3, [r2, #28]
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <HAL_I2C_MspInit+0xbc>)
 8000b7c:	69db      	ldr	r3, [r3, #28]
 8000b7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b86:	bf00      	nop
 8000b88:	3728      	adds	r7, #40	; 0x28
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	40005400 	.word	0x40005400
 8000b94:	40021000 	.word	0x40021000
 8000b98:	48000400 	.word	0x48000400

08000b9c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bac:	d10b      	bne.n	8000bc6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <HAL_TIM_Base_MspInit+0x38>)
 8000bb0:	69db      	ldr	r3, [r3, #28]
 8000bb2:	4a08      	ldr	r2, [pc, #32]	; (8000bd4 <HAL_TIM_Base_MspInit+0x38>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	61d3      	str	r3, [r2, #28]
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <HAL_TIM_Base_MspInit+0x38>)
 8000bbc:	69db      	ldr	r3, [r3, #28]
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000bc6:	bf00      	nop
 8000bc8:	3714      	adds	r7, #20
 8000bca:	46bd      	mov	sp, r7
 8000bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd0:	4770      	bx	lr
 8000bd2:	bf00      	nop
 8000bd4:	40021000 	.word	0x40021000

08000bd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bf8:	d11c      	bne.n	8000c34 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	4b10      	ldr	r3, [pc, #64]	; (8000c3c <HAL_TIM_MspPostInit+0x64>)
 8000bfc:	695b      	ldr	r3, [r3, #20]
 8000bfe:	4a0f      	ldr	r2, [pc, #60]	; (8000c3c <HAL_TIM_MspPostInit+0x64>)
 8000c00:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c04:	6153      	str	r3, [r2, #20]
 8000c06:	4b0d      	ldr	r3, [pc, #52]	; (8000c3c <HAL_TIM_MspPostInit+0x64>)
 8000c08:	695b      	ldr	r3, [r3, #20]
 8000c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000c12:	2303      	movs	r3, #3
 8000c14:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c16:	2302      	movs	r3, #2
 8000c18:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1a:	2300      	movs	r3, #0
 8000c1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c22:	2301      	movs	r3, #1
 8000c24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c26:	f107 030c 	add.w	r3, r7, #12
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c30:	f000 fa20 	bl	8001074 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c34:	bf00      	nop
 8000c36:	3720      	adds	r7, #32
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bd80      	pop	{r7, pc}
 8000c3c:	40021000 	.word	0x40021000

08000c40 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b08a      	sub	sp, #40	; 0x28
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c48:	f107 0314 	add.w	r3, r7, #20
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	601a      	str	r2, [r3, #0]
 8000c50:	605a      	str	r2, [r3, #4]
 8000c52:	609a      	str	r2, [r3, #8]
 8000c54:	60da      	str	r2, [r3, #12]
 8000c56:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <HAL_UART_MspInit+0x7c>)
 8000c5e:	4293      	cmp	r3, r2
 8000c60:	d127      	bne.n	8000cb2 <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c62:	4b17      	ldr	r3, [pc, #92]	; (8000cc0 <HAL_UART_MspInit+0x80>)
 8000c64:	69db      	ldr	r3, [r3, #28]
 8000c66:	4a16      	ldr	r2, [pc, #88]	; (8000cc0 <HAL_UART_MspInit+0x80>)
 8000c68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c6c:	61d3      	str	r3, [r2, #28]
 8000c6e:	4b14      	ldr	r3, [pc, #80]	; (8000cc0 <HAL_UART_MspInit+0x80>)
 8000c70:	69db      	ldr	r3, [r3, #28]
 8000c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c76:	613b      	str	r3, [r7, #16]
 8000c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c7a:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <HAL_UART_MspInit+0x80>)
 8000c7c:	695b      	ldr	r3, [r3, #20]
 8000c7e:	4a10      	ldr	r2, [pc, #64]	; (8000cc0 <HAL_UART_MspInit+0x80>)
 8000c80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c84:	6153      	str	r3, [r2, #20]
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <HAL_UART_MspInit+0x80>)
 8000c88:	695b      	ldr	r3, [r3, #20]
 8000c8a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PB3     ------> USART2_TX
    PB4     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000c92:	2318      	movs	r3, #24
 8000c94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c96:	2312      	movs	r3, #18
 8000c98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c9e:	2303      	movs	r3, #3
 8000ca0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ca2:	2307      	movs	r3, #7
 8000ca4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca6:	f107 0314 	add.w	r3, r7, #20
 8000caa:	4619      	mov	r1, r3
 8000cac:	4805      	ldr	r0, [pc, #20]	; (8000cc4 <HAL_UART_MspInit+0x84>)
 8000cae:	f000 f9e1 	bl	8001074 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000cb2:	bf00      	nop
 8000cb4:	3728      	adds	r7, #40	; 0x28
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40004400 	.word	0x40004400
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	48000400 	.word	0x48000400

08000cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <NMI_Handler+0x4>

08000cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cce:	b480      	push	{r7}
 8000cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cd2:	e7fe      	b.n	8000cd2 <HardFault_Handler+0x4>

08000cd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cd8:	e7fe      	b.n	8000cd8 <MemManage_Handler+0x4>

08000cda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000cde:	e7fe      	b.n	8000cde <BusFault_Handler+0x4>

08000ce0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ce4:	e7fe      	b.n	8000ce4 <UsageFault_Handler+0x4>

08000ce6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ce6:	b480      	push	{r7}
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000cea:	bf00      	nop
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr

08000d02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d02:	b480      	push	{r7}
 8000d04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d06:	bf00      	nop
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d14:	f000 f884 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d18:	bf00      	nop
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d20:	4b06      	ldr	r3, [pc, #24]	; (8000d3c <SystemInit+0x20>)
 8000d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d26:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <SystemInit+0x20>)
 8000d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d30:	bf00      	nop
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000ed00 	.word	0xe000ed00

08000d40 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d40:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d78 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d44:	480d      	ldr	r0, [pc, #52]	; (8000d7c <LoopForever+0x6>)
  ldr r1, =_edata
 8000d46:	490e      	ldr	r1, [pc, #56]	; (8000d80 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d48:	4a0e      	ldr	r2, [pc, #56]	; (8000d84 <LoopForever+0xe>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d4c:	e002      	b.n	8000d54 <LoopCopyDataInit>

08000d4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d52:	3304      	adds	r3, #4

08000d54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d58:	d3f9      	bcc.n	8000d4e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d5a:	4a0b      	ldr	r2, [pc, #44]	; (8000d88 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d5c:	4c0b      	ldr	r4, [pc, #44]	; (8000d8c <LoopForever+0x16>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d60:	e001      	b.n	8000d66 <LoopFillZerobss>

08000d62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d64:	3204      	adds	r2, #4

08000d66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d68:	d3fb      	bcc.n	8000d62 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000d6a:	f7ff ffd7 	bl	8000d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d6e:	f003 fef5 	bl	8004b5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d72:	f7ff fa29 	bl	80001c8 <main>

08000d76 <LoopForever>:

LoopForever:
    b LoopForever
 8000d76:	e7fe      	b.n	8000d76 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000d78:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 8000d7c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d80:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 8000d84:	08004c0c 	.word	0x08004c0c
  ldr r2, =_sbss
 8000d88:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8000d8c:	2000017c 	.word	0x2000017c

08000d90 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d90:	e7fe      	b.n	8000d90 <ADC1_2_IRQHandler>
	...

08000d94 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d94:	b580      	push	{r7, lr}
 8000d96:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <HAL_Init+0x28>)
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	4a07      	ldr	r2, [pc, #28]	; (8000dbc <HAL_Init+0x28>)
 8000d9e:	f043 0310 	orr.w	r3, r3, #16
 8000da2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000da4:	2003      	movs	r0, #3
 8000da6:	f000 f931 	bl	800100c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000daa:	2000      	movs	r0, #0
 8000dac:	f000 f808 	bl	8000dc0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db0:	f7ff fe6e 	bl	8000a90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000db4:	2300      	movs	r3, #0
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	40022000 	.word	0x40022000

08000dc0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dc8:	4b12      	ldr	r3, [pc, #72]	; (8000e14 <HAL_InitTick+0x54>)
 8000dca:	681a      	ldr	r2, [r3, #0]
 8000dcc:	4b12      	ldr	r3, [pc, #72]	; (8000e18 <HAL_InitTick+0x58>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	4619      	mov	r1, r3
 8000dd2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000dd6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000dda:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dde:	4618      	mov	r0, r3
 8000de0:	f000 f93b 	bl	800105a <HAL_SYSTICK_Config>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e00e      	b.n	8000e0c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b0f      	cmp	r3, #15
 8000df2:	d80a      	bhi.n	8000e0a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000df4:	2200      	movs	r2, #0
 8000df6:	6879      	ldr	r1, [r7, #4]
 8000df8:	f04f 30ff 	mov.w	r0, #4294967295
 8000dfc:	f000 f911 	bl	8001022 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e00:	4a06      	ldr	r2, [pc, #24]	; (8000e1c <HAL_InitTick+0x5c>)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000e06:	2300      	movs	r3, #0
 8000e08:	e000      	b.n	8000e0c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e0a:	2301      	movs	r3, #1
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3708      	adds	r7, #8
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000010 	.word	0x20000010
 8000e18:	20000018 	.word	0x20000018
 8000e1c:	20000014 	.word	0x20000014

08000e20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_IncTick+0x20>)
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_IncTick+0x24>)
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a04      	ldr	r2, [pc, #16]	; (8000e44 <HAL_IncTick+0x24>)
 8000e32:	6013      	str	r3, [r2, #0]
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
 8000e3e:	bf00      	nop
 8000e40:	20000018 	.word	0x20000018
 8000e44:	20000178 	.word	0x20000178

08000e48 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	af00      	add	r7, sp, #0
  return uwTick;  
 8000e4c:	4b03      	ldr	r3, [pc, #12]	; (8000e5c <HAL_GetTick+0x14>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
}
 8000e50:	4618      	mov	r0, r3
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	20000178 	.word	0x20000178

08000e60 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff ffee 	bl	8000e48 <HAL_GetTick>
 8000e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e78:	d005      	beq.n	8000e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ea4 <HAL_Delay+0x44>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000e86:	bf00      	nop
 8000e88:	f7ff ffde 	bl	8000e48 <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d8f7      	bhi.n	8000e88 <HAL_Delay+0x28>
  {
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000018 	.word	0x20000018

08000ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eda:	4a04      	ldr	r2, [pc, #16]	; (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	60d3      	str	r3, [r2, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	; (8000f08 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	db0a      	blt.n	8000f36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	b2da      	uxtb	r2, r3
 8000f24:	490c      	ldr	r1, [pc, #48]	; (8000f58 <__NVIC_SetPriority+0x4c>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	0112      	lsls	r2, r2, #4
 8000f2c:	b2d2      	uxtb	r2, r2
 8000f2e:	440b      	add	r3, r1
 8000f30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f34:	e00a      	b.n	8000f4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f36:	683b      	ldr	r3, [r7, #0]
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	4908      	ldr	r1, [pc, #32]	; (8000f5c <__NVIC_SetPriority+0x50>)
 8000f3c:	79fb      	ldrb	r3, [r7, #7]
 8000f3e:	f003 030f 	and.w	r3, r3, #15
 8000f42:	3b04      	subs	r3, #4
 8000f44:	0112      	lsls	r2, r2, #4
 8000f46:	b2d2      	uxtb	r2, r2
 8000f48:	440b      	add	r3, r1
 8000f4a:	761a      	strb	r2, [r3, #24]
}
 8000f4c:	bf00      	nop
 8000f4e:	370c      	adds	r7, #12
 8000f50:	46bd      	mov	sp, r7
 8000f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f56:	4770      	bx	lr
 8000f58:	e000e100 	.word	0xe000e100
 8000f5c:	e000ed00 	.word	0xe000ed00

08000f60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f60:	b480      	push	{r7}
 8000f62:	b089      	sub	sp, #36	; 0x24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	f003 0307 	and.w	r3, r3, #7
 8000f72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f74:	69fb      	ldr	r3, [r7, #28]
 8000f76:	f1c3 0307 	rsb	r3, r3, #7
 8000f7a:	2b04      	cmp	r3, #4
 8000f7c:	bf28      	it	cs
 8000f7e:	2304      	movcs	r3, #4
 8000f80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	3304      	adds	r3, #4
 8000f86:	2b06      	cmp	r3, #6
 8000f88:	d902      	bls.n	8000f90 <NVIC_EncodePriority+0x30>
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	3b03      	subs	r3, #3
 8000f8e:	e000      	b.n	8000f92 <NVIC_EncodePriority+0x32>
 8000f90:	2300      	movs	r3, #0
 8000f92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f94:	f04f 32ff 	mov.w	r2, #4294967295
 8000f98:	69bb      	ldr	r3, [r7, #24]
 8000f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9e:	43da      	mvns	r2, r3
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	697b      	ldr	r3, [r7, #20]
 8000fa6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fa8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fac:	697b      	ldr	r3, [r7, #20]
 8000fae:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb2:	43d9      	mvns	r1, r3
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb8:	4313      	orrs	r3, r2
         );
}
 8000fba:	4618      	mov	r0, r3
 8000fbc:	3724      	adds	r7, #36	; 0x24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
	...

08000fc8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000fd8:	d301      	bcc.n	8000fde <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e00f      	b.n	8000ffe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fde:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <SysTick_Config+0x40>)
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	3b01      	subs	r3, #1
 8000fe4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fe6:	210f      	movs	r1, #15
 8000fe8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fec:	f7ff ff8e 	bl	8000f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <SysTick_Config+0x40>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ff6:	4b04      	ldr	r3, [pc, #16]	; (8001008 <SysTick_Config+0x40>)
 8000ff8:	2207      	movs	r2, #7
 8000ffa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ffc:	2300      	movs	r3, #0
}
 8000ffe:	4618      	mov	r0, r3
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	e000e010 	.word	0xe000e010

0800100c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001014:	6878      	ldr	r0, [r7, #4]
 8001016:	f7ff ff47 	bl	8000ea8 <__NVIC_SetPriorityGrouping>
}
 800101a:	bf00      	nop
 800101c:	3708      	adds	r7, #8
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}

08001022 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001022:	b580      	push	{r7, lr}
 8001024:	b086      	sub	sp, #24
 8001026:	af00      	add	r7, sp, #0
 8001028:	4603      	mov	r3, r0
 800102a:	60b9      	str	r1, [r7, #8]
 800102c:	607a      	str	r2, [r7, #4]
 800102e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001034:	f7ff ff5c 	bl	8000ef0 <__NVIC_GetPriorityGrouping>
 8001038:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800103a:	687a      	ldr	r2, [r7, #4]
 800103c:	68b9      	ldr	r1, [r7, #8]
 800103e:	6978      	ldr	r0, [r7, #20]
 8001040:	f7ff ff8e 	bl	8000f60 <NVIC_EncodePriority>
 8001044:	4602      	mov	r2, r0
 8001046:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800104a:	4611      	mov	r1, r2
 800104c:	4618      	mov	r0, r3
 800104e:	f7ff ff5d 	bl	8000f0c <__NVIC_SetPriority>
}
 8001052:	bf00      	nop
 8001054:	3718      	adds	r7, #24
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001062:	6878      	ldr	r0, [r7, #4]
 8001064:	f7ff ffb0 	bl	8000fc8 <SysTick_Config>
 8001068:	4603      	mov	r3, r0
}
 800106a:	4618      	mov	r0, r3
 800106c:	3708      	adds	r7, #8
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
	...

08001074 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001074:	b480      	push	{r7}
 8001076:	b087      	sub	sp, #28
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
 800107c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800107e:	2300      	movs	r3, #0
 8001080:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001082:	e14e      	b.n	8001322 <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681a      	ldr	r2, [r3, #0]
 8001088:	2101      	movs	r1, #1
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	fa01 f303 	lsl.w	r3, r1, r3
 8001090:	4013      	ands	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 8140 	beq.w	800131c <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d00b      	beq.n	80010bc <HAL_GPIO_Init+0x48>
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d007      	beq.n	80010bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010b0:	2b11      	cmp	r3, #17
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b12      	cmp	r3, #18
 80010ba:	d130      	bne.n	800111e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	68da      	ldr	r2, [r3, #12]
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f2:	2201      	movs	r2, #1
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	091b      	lsrs	r3, r3, #4
 8001108:	f003 0201 	and.w	r2, r3, #1
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	2203      	movs	r2, #3
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4013      	ands	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	2b02      	cmp	r3, #2
 8001154:	d003      	beq.n	800115e <HAL_GPIO_Init+0xea>
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b12      	cmp	r3, #18
 800115c:	d123      	bne.n	80011a6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	08da      	lsrs	r2, r3, #3
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	3208      	adds	r2, #8
 8001166:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800116a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	009b      	lsls	r3, r3, #2
 8001174:	220f      	movs	r2, #15
 8001176:	fa02 f303 	lsl.w	r3, r2, r3
 800117a:	43db      	mvns	r3, r3
 800117c:	693a      	ldr	r2, [r7, #16]
 800117e:	4013      	ands	r3, r2
 8001180:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	691a      	ldr	r2, [r3, #16]
 8001186:	697b      	ldr	r3, [r7, #20]
 8001188:	f003 0307 	and.w	r3, r3, #7
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	fa02 f303 	lsl.w	r3, r2, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4313      	orrs	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001198:	697b      	ldr	r3, [r7, #20]
 800119a:	08da      	lsrs	r2, r3, #3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3208      	adds	r2, #8
 80011a0:	6939      	ldr	r1, [r7, #16]
 80011a2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80011ac:	697b      	ldr	r3, [r7, #20]
 80011ae:	005b      	lsls	r3, r3, #1
 80011b0:	2203      	movs	r2, #3
 80011b2:	fa02 f303 	lsl.w	r3, r2, r3
 80011b6:	43db      	mvns	r3, r3
 80011b8:	693a      	ldr	r2, [r7, #16]
 80011ba:	4013      	ands	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	f003 0203 	and.w	r2, r3, #3
 80011c6:	697b      	ldr	r3, [r7, #20]
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	693a      	ldr	r2, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	685b      	ldr	r3, [r3, #4]
 80011de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	f000 809a 	beq.w	800131c <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011e8:	4b55      	ldr	r3, [pc, #340]	; (8001340 <HAL_GPIO_Init+0x2cc>)
 80011ea:	699b      	ldr	r3, [r3, #24]
 80011ec:	4a54      	ldr	r2, [pc, #336]	; (8001340 <HAL_GPIO_Init+0x2cc>)
 80011ee:	f043 0301 	orr.w	r3, r3, #1
 80011f2:	6193      	str	r3, [r2, #24]
 80011f4:	4b52      	ldr	r3, [pc, #328]	; (8001340 <HAL_GPIO_Init+0x2cc>)
 80011f6:	699b      	ldr	r3, [r3, #24]
 80011f8:	f003 0301 	and.w	r3, r3, #1
 80011fc:	60bb      	str	r3, [r7, #8]
 80011fe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001200:	4a50      	ldr	r2, [pc, #320]	; (8001344 <HAL_GPIO_Init+0x2d0>)
 8001202:	697b      	ldr	r3, [r7, #20]
 8001204:	089b      	lsrs	r3, r3, #2
 8001206:	3302      	adds	r3, #2
 8001208:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800120c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	220f      	movs	r2, #15
 8001218:	fa02 f303 	lsl.w	r3, r2, r3
 800121c:	43db      	mvns	r3, r3
 800121e:	693a      	ldr	r2, [r7, #16]
 8001220:	4013      	ands	r3, r2
 8001222:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800122a:	d013      	beq.n	8001254 <HAL_GPIO_Init+0x1e0>
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	4a46      	ldr	r2, [pc, #280]	; (8001348 <HAL_GPIO_Init+0x2d4>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d00d      	beq.n	8001250 <HAL_GPIO_Init+0x1dc>
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	4a45      	ldr	r2, [pc, #276]	; (800134c <HAL_GPIO_Init+0x2d8>)
 8001238:	4293      	cmp	r3, r2
 800123a:	d007      	beq.n	800124c <HAL_GPIO_Init+0x1d8>
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	4a44      	ldr	r2, [pc, #272]	; (8001350 <HAL_GPIO_Init+0x2dc>)
 8001240:	4293      	cmp	r3, r2
 8001242:	d101      	bne.n	8001248 <HAL_GPIO_Init+0x1d4>
 8001244:	2303      	movs	r3, #3
 8001246:	e006      	b.n	8001256 <HAL_GPIO_Init+0x1e2>
 8001248:	2305      	movs	r3, #5
 800124a:	e004      	b.n	8001256 <HAL_GPIO_Init+0x1e2>
 800124c:	2302      	movs	r3, #2
 800124e:	e002      	b.n	8001256 <HAL_GPIO_Init+0x1e2>
 8001250:	2301      	movs	r3, #1
 8001252:	e000      	b.n	8001256 <HAL_GPIO_Init+0x1e2>
 8001254:	2300      	movs	r3, #0
 8001256:	697a      	ldr	r2, [r7, #20]
 8001258:	f002 0203 	and.w	r2, r2, #3
 800125c:	0092      	lsls	r2, r2, #2
 800125e:	4093      	lsls	r3, r2
 8001260:	693a      	ldr	r2, [r7, #16]
 8001262:	4313      	orrs	r3, r2
 8001264:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001266:	4937      	ldr	r1, [pc, #220]	; (8001344 <HAL_GPIO_Init+0x2d0>)
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	089b      	lsrs	r3, r3, #2
 800126c:	3302      	adds	r3, #2
 800126e:	693a      	ldr	r2, [r7, #16]
 8001270:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001274:	4b37      	ldr	r3, [pc, #220]	; (8001354 <HAL_GPIO_Init+0x2e0>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	43db      	mvns	r3, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800128c:	2b00      	cmp	r3, #0
 800128e:	d003      	beq.n	8001298 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	4313      	orrs	r3, r2
 8001296:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001298:	4a2e      	ldr	r2, [pc, #184]	; (8001354 <HAL_GPIO_Init+0x2e0>)
 800129a:	693b      	ldr	r3, [r7, #16]
 800129c:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800129e:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <HAL_GPIO_Init+0x2e0>)
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	43db      	mvns	r3, r3
 80012a8:	693a      	ldr	r2, [r7, #16]
 80012aa:	4013      	ands	r3, r2
 80012ac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d003      	beq.n	80012c2 <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80012ba:	693a      	ldr	r2, [r7, #16]
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	4313      	orrs	r3, r2
 80012c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80012c2:	4a24      	ldr	r2, [pc, #144]	; (8001354 <HAL_GPIO_Init+0x2e0>)
 80012c4:	693b      	ldr	r3, [r7, #16]
 80012c6:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012c8:	4b22      	ldr	r3, [pc, #136]	; (8001354 <HAL_GPIO_Init+0x2e0>)
 80012ca:	689b      	ldr	r3, [r3, #8]
 80012cc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	43db      	mvns	r3, r3
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	4013      	ands	r3, r2
 80012d6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012d8:	683b      	ldr	r3, [r7, #0]
 80012da:	685b      	ldr	r3, [r3, #4]
 80012dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d003      	beq.n	80012ec <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80012e4:	693a      	ldr	r2, [r7, #16]
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80012ec:	4a19      	ldr	r2, [pc, #100]	; (8001354 <HAL_GPIO_Init+0x2e0>)
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f2:	4b18      	ldr	r3, [pc, #96]	; (8001354 <HAL_GPIO_Init+0x2e0>)
 80012f4:	68db      	ldr	r3, [r3, #12]
 80012f6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	43db      	mvns	r3, r3
 80012fc:	693a      	ldr	r2, [r7, #16]
 80012fe:	4013      	ands	r3, r2
 8001300:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	685b      	ldr	r3, [r3, #4]
 8001306:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d003      	beq.n	8001316 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	4313      	orrs	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001316:	4a0f      	ldr	r2, [pc, #60]	; (8001354 <HAL_GPIO_Init+0x2e0>)
 8001318:	693b      	ldr	r3, [r7, #16]
 800131a:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	3301      	adds	r3, #1
 8001320:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	fa22 f303 	lsr.w	r3, r2, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	f47f aea9 	bne.w	8001084 <HAL_GPIO_Init+0x10>
  }
}
 8001332:	bf00      	nop
 8001334:	bf00      	nop
 8001336:	371c      	adds	r7, #28
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr
 8001340:	40021000 	.word	0x40021000
 8001344:	40010000 	.word	0x40010000
 8001348:	48000400 	.word	0x48000400
 800134c:	48000800 	.word	0x48000800
 8001350:	48000c00 	.word	0x48000c00
 8001354:	40010400 	.word	0x40010400

08001358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001358:	b480      	push	{r7}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
 8001360:	460b      	mov	r3, r1
 8001362:	807b      	strh	r3, [r7, #2]
 8001364:	4613      	mov	r3, r2
 8001366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001368:	787b      	ldrb	r3, [r7, #1]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800136e:	887a      	ldrh	r2, [r7, #2]
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001374:	e002      	b.n	800137c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001376:	887a      	ldrh	r2, [r7, #2]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800137c:	bf00      	nop
 800137e:	370c      	adds	r7, #12
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001388:	b480      	push	{r7}
 800138a:	b085      	sub	sp, #20
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	695b      	ldr	r3, [r3, #20]
 8001398:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800139a:	887a      	ldrh	r2, [r7, #2]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	4013      	ands	r3, r2
 80013a0:	041a      	lsls	r2, r3, #16
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	43d9      	mvns	r1, r3
 80013a6:	887b      	ldrh	r3, [r7, #2]
 80013a8:	400b      	ands	r3, r1
 80013aa:	431a      	orrs	r2, r3
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	619a      	str	r2, [r3, #24]
}
 80013b0:	bf00      	nop
 80013b2:	3714      	adds	r7, #20
 80013b4:	46bd      	mov	sp, r7
 80013b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ba:	4770      	bx	lr

080013bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d101      	bne.n	80013ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80013ca:	2301      	movs	r3, #1
 80013cc:	e081      	b.n	80014d2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d106      	bne.n	80013e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	2200      	movs	r2, #0
 80013de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f7ff fb78 	bl	8000ad8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2224      	movs	r2, #36	; 0x24
 80013ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	681a      	ldr	r2, [r3, #0]
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f022 0201 	bic.w	r2, r2, #1
 80013fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	685a      	ldr	r2, [r3, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800140c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	689a      	ldr	r2, [r3, #8]
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800141c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	68db      	ldr	r3, [r3, #12]
 8001422:	2b01      	cmp	r3, #1
 8001424:	d107      	bne.n	8001436 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	689a      	ldr	r2, [r3, #8]
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001432:	609a      	str	r2, [r3, #8]
 8001434:	e006      	b.n	8001444 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689a      	ldr	r2, [r3, #8]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001442:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	68db      	ldr	r3, [r3, #12]
 8001448:	2b02      	cmp	r3, #2
 800144a:	d104      	bne.n	8001456 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001454:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	6812      	ldr	r2, [r2, #0]
 8001460:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001464:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001468:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001478:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	691a      	ldr	r2, [r3, #16]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	695b      	ldr	r3, [r3, #20]
 8001482:	ea42 0103 	orr.w	r1, r2, r3
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	699b      	ldr	r3, [r3, #24]
 800148a:	021a      	lsls	r2, r3, #8
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	430a      	orrs	r2, r1
 8001492:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	69d9      	ldr	r1, [r3, #28]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6a1a      	ldr	r2, [r3, #32]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	430a      	orrs	r2, r1
 80014a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	681a      	ldr	r2, [r3, #0]
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f042 0201 	orr.w	r2, r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2200      	movs	r2, #0
 80014b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2220      	movs	r2, #32
 80014be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	2200      	movs	r2, #0
 80014c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2200      	movs	r2, #0
 80014cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
	...

080014dc <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b088      	sub	sp, #32
 80014e0:	af02      	add	r7, sp, #8
 80014e2:	60f8      	str	r0, [r7, #12]
 80014e4:	607a      	str	r2, [r7, #4]
 80014e6:	461a      	mov	r2, r3
 80014e8:	460b      	mov	r3, r1
 80014ea:	817b      	strh	r3, [r7, #10]
 80014ec:	4613      	mov	r3, r2
 80014ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014f6:	b2db      	uxtb	r3, r3
 80014f8:	2b20      	cmp	r3, #32
 80014fa:	f040 80da 	bne.w	80016b2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001504:	2b01      	cmp	r3, #1
 8001506:	d101      	bne.n	800150c <HAL_I2C_Master_Transmit+0x30>
 8001508:	2302      	movs	r3, #2
 800150a:	e0d3      	b.n	80016b4 <HAL_I2C_Master_Transmit+0x1d8>
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	2201      	movs	r2, #1
 8001510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001514:	f7ff fc98 	bl	8000e48 <HAL_GetTick>
 8001518:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800151a:	697b      	ldr	r3, [r7, #20]
 800151c:	9300      	str	r3, [sp, #0]
 800151e:	2319      	movs	r3, #25
 8001520:	2201      	movs	r2, #1
 8001522:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001526:	68f8      	ldr	r0, [r7, #12]
 8001528:	f000 faed 	bl	8001b06 <I2C_WaitOnFlagUntilTimeout>
 800152c:	4603      	mov	r3, r0
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	e0be      	b.n	80016b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	2221      	movs	r2, #33	; 0x21
 800153a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	2210      	movs	r2, #16
 8001542:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2200      	movs	r2, #0
 800154a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	893a      	ldrh	r2, [r7, #8]
 8001556:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2200      	movs	r2, #0
 800155c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001562:	b29b      	uxth	r3, r3
 8001564:	2bff      	cmp	r3, #255	; 0xff
 8001566:	d90e      	bls.n	8001586 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	22ff      	movs	r2, #255	; 0xff
 800156c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001572:	b2da      	uxtb	r2, r3
 8001574:	8979      	ldrh	r1, [r7, #10]
 8001576:	4b51      	ldr	r3, [pc, #324]	; (80016bc <HAL_I2C_Master_Transmit+0x1e0>)
 8001578:	9300      	str	r3, [sp, #0]
 800157a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800157e:	68f8      	ldr	r0, [r7, #12]
 8001580:	f000 fc50 	bl	8001e24 <I2C_TransferConfig>
 8001584:	e06c      	b.n	8001660 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800158a:	b29a      	uxth	r2, r3
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001594:	b2da      	uxtb	r2, r3
 8001596:	8979      	ldrh	r1, [r7, #10]
 8001598:	4b48      	ldr	r3, [pc, #288]	; (80016bc <HAL_I2C_Master_Transmit+0x1e0>)
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015a0:	68f8      	ldr	r0, [r7, #12]
 80015a2:	f000 fc3f 	bl	8001e24 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80015a6:	e05b      	b.n	8001660 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	6a39      	ldr	r1, [r7, #32]
 80015ac:	68f8      	ldr	r0, [r7, #12]
 80015ae:	f000 faea 	bl	8001b86 <I2C_WaitOnTXISFlagUntilTimeout>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d001      	beq.n	80015bc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e07b      	b.n	80016b4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015c0:	781a      	ldrb	r2, [r3, #0]
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015cc:	1c5a      	adds	r2, r3, #1
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015d6:	b29b      	uxth	r3, r3
 80015d8:	3b01      	subs	r3, #1
 80015da:	b29a      	uxth	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015e4:	3b01      	subs	r3, #1
 80015e6:	b29a      	uxth	r2, r3
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015f0:	b29b      	uxth	r3, r3
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d034      	beq.n	8001660 <HAL_I2C_Master_Transmit+0x184>
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d130      	bne.n	8001660 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015fe:	697b      	ldr	r3, [r7, #20]
 8001600:	9300      	str	r3, [sp, #0]
 8001602:	6a3b      	ldr	r3, [r7, #32]
 8001604:	2200      	movs	r2, #0
 8001606:	2180      	movs	r1, #128	; 0x80
 8001608:	68f8      	ldr	r0, [r7, #12]
 800160a:	f000 fa7c 	bl	8001b06 <I2C_WaitOnFlagUntilTimeout>
 800160e:	4603      	mov	r3, r0
 8001610:	2b00      	cmp	r3, #0
 8001612:	d001      	beq.n	8001618 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001614:	2301      	movs	r3, #1
 8001616:	e04d      	b.n	80016b4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800161c:	b29b      	uxth	r3, r3
 800161e:	2bff      	cmp	r3, #255	; 0xff
 8001620:	d90e      	bls.n	8001640 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	22ff      	movs	r2, #255	; 0xff
 8001626:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800162c:	b2da      	uxtb	r2, r3
 800162e:	8979      	ldrh	r1, [r7, #10]
 8001630:	2300      	movs	r3, #0
 8001632:	9300      	str	r3, [sp, #0]
 8001634:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001638:	68f8      	ldr	r0, [r7, #12]
 800163a:	f000 fbf3 	bl	8001e24 <I2C_TransferConfig>
 800163e:	e00f      	b.n	8001660 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001644:	b29a      	uxth	r2, r3
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800164e:	b2da      	uxtb	r2, r3
 8001650:	8979      	ldrh	r1, [r7, #10]
 8001652:	2300      	movs	r3, #0
 8001654:	9300      	str	r3, [sp, #0]
 8001656:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800165a:	68f8      	ldr	r0, [r7, #12]
 800165c:	f000 fbe2 	bl	8001e24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001664:	b29b      	uxth	r3, r3
 8001666:	2b00      	cmp	r3, #0
 8001668:	d19e      	bne.n	80015a8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800166a:	697a      	ldr	r2, [r7, #20]
 800166c:	6a39      	ldr	r1, [r7, #32]
 800166e:	68f8      	ldr	r0, [r7, #12]
 8001670:	f000 fac9 	bl	8001c06 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800167a:	2301      	movs	r3, #1
 800167c:	e01a      	b.n	80016b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	2220      	movs	r2, #32
 8001684:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	6859      	ldr	r1, [r3, #4]
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	4b0b      	ldr	r3, [pc, #44]	; (80016c0 <HAL_I2C_Master_Transmit+0x1e4>)
 8001692:	400b      	ands	r3, r1
 8001694:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2220      	movs	r2, #32
 800169a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	2200      	movs	r2, #0
 80016a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	2200      	movs	r2, #0
 80016aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80016ae:	2300      	movs	r3, #0
 80016b0:	e000      	b.n	80016b4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80016b2:	2302      	movs	r3, #2
  }
}
 80016b4:	4618      	mov	r0, r3
 80016b6:	3718      	adds	r7, #24
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	80002000 	.word	0x80002000
 80016c0:	fe00e800 	.word	0xfe00e800

080016c4 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b088      	sub	sp, #32
 80016c8:	af02      	add	r7, sp, #8
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	607a      	str	r2, [r7, #4]
 80016ce:	461a      	mov	r2, r3
 80016d0:	460b      	mov	r3, r1
 80016d2:	817b      	strh	r3, [r7, #10]
 80016d4:	4613      	mov	r3, r2
 80016d6:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b20      	cmp	r3, #32
 80016e2:	f040 80db 	bne.w	800189c <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d101      	bne.n	80016f4 <HAL_I2C_Master_Receive+0x30>
 80016f0:	2302      	movs	r3, #2
 80016f2:	e0d4      	b.n	800189e <HAL_I2C_Master_Receive+0x1da>
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2201      	movs	r2, #1
 80016f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80016fc:	f7ff fba4 	bl	8000e48 <HAL_GetTick>
 8001700:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001702:	697b      	ldr	r3, [r7, #20]
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	2319      	movs	r3, #25
 8001708:	2201      	movs	r2, #1
 800170a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800170e:	68f8      	ldr	r0, [r7, #12]
 8001710:	f000 f9f9 	bl	8001b06 <I2C_WaitOnFlagUntilTimeout>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800171a:	2301      	movs	r3, #1
 800171c:	e0bf      	b.n	800189e <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	2222      	movs	r2, #34	; 0x22
 8001722:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	2210      	movs	r2, #16
 800172a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	2200      	movs	r2, #0
 8001732:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	687a      	ldr	r2, [r7, #4]
 8001738:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	893a      	ldrh	r2, [r7, #8]
 800173e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	2200      	movs	r2, #0
 8001744:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800174a:	b29b      	uxth	r3, r3
 800174c:	2bff      	cmp	r3, #255	; 0xff
 800174e:	d90e      	bls.n	800176e <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	22ff      	movs	r2, #255	; 0xff
 8001754:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800175a:	b2da      	uxtb	r2, r3
 800175c:	8979      	ldrh	r1, [r7, #10]
 800175e:	4b52      	ldr	r3, [pc, #328]	; (80018a8 <HAL_I2C_Master_Receive+0x1e4>)
 8001760:	9300      	str	r3, [sp, #0]
 8001762:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001766:	68f8      	ldr	r0, [r7, #12]
 8001768:	f000 fb5c 	bl	8001e24 <I2C_TransferConfig>
 800176c:	e06d      	b.n	800184a <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001772:	b29a      	uxth	r2, r3
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800177c:	b2da      	uxtb	r2, r3
 800177e:	8979      	ldrh	r1, [r7, #10]
 8001780:	4b49      	ldr	r3, [pc, #292]	; (80018a8 <HAL_I2C_Master_Receive+0x1e4>)
 8001782:	9300      	str	r3, [sp, #0]
 8001784:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001788:	68f8      	ldr	r0, [r7, #12]
 800178a:	f000 fb4b 	bl	8001e24 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800178e:	e05c      	b.n	800184a <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001790:	697a      	ldr	r2, [r7, #20]
 8001792:	6a39      	ldr	r1, [r7, #32]
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f000 fa73 	bl	8001c80 <I2C_WaitOnRXNEFlagUntilTimeout>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 80017a0:	2301      	movs	r3, #1
 80017a2:	e07c      	b.n	800189e <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ae:	b2d2      	uxtb	r2, r2
 80017b0:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017b6:	1c5a      	adds	r2, r3, #1
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017c0:	3b01      	subs	r3, #1
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017cc:	b29b      	uxth	r3, r3
 80017ce:	3b01      	subs	r3, #1
 80017d0:	b29a      	uxth	r2, r3
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017da:	b29b      	uxth	r3, r3
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d034      	beq.n	800184a <HAL_I2C_Master_Receive+0x186>
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d130      	bne.n	800184a <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	9300      	str	r3, [sp, #0]
 80017ec:	6a3b      	ldr	r3, [r7, #32]
 80017ee:	2200      	movs	r2, #0
 80017f0:	2180      	movs	r1, #128	; 0x80
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f000 f987 	bl	8001b06 <I2C_WaitOnFlagUntilTimeout>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e04d      	b.n	800189e <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001806:	b29b      	uxth	r3, r3
 8001808:	2bff      	cmp	r3, #255	; 0xff
 800180a:	d90e      	bls.n	800182a <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	22ff      	movs	r2, #255	; 0xff
 8001810:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001816:	b2da      	uxtb	r2, r3
 8001818:	8979      	ldrh	r1, [r7, #10]
 800181a:	2300      	movs	r3, #0
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001822:	68f8      	ldr	r0, [r7, #12]
 8001824:	f000 fafe 	bl	8001e24 <I2C_TransferConfig>
 8001828:	e00f      	b.n	800184a <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800182a:	68fb      	ldr	r3, [r7, #12]
 800182c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800182e:	b29a      	uxth	r2, r3
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001838:	b2da      	uxtb	r2, r3
 800183a:	8979      	ldrh	r1, [r7, #10]
 800183c:	2300      	movs	r3, #0
 800183e:	9300      	str	r3, [sp, #0]
 8001840:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001844:	68f8      	ldr	r0, [r7, #12]
 8001846:	f000 faed 	bl	8001e24 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800184e:	b29b      	uxth	r3, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	d19d      	bne.n	8001790 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001854:	697a      	ldr	r2, [r7, #20]
 8001856:	6a39      	ldr	r1, [r7, #32]
 8001858:	68f8      	ldr	r0, [r7, #12]
 800185a:	f000 f9d4 	bl	8001c06 <I2C_WaitOnSTOPFlagUntilTimeout>
 800185e:	4603      	mov	r3, r0
 8001860:	2b00      	cmp	r3, #0
 8001862:	d001      	beq.n	8001868 <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8001864:	2301      	movs	r3, #1
 8001866:	e01a      	b.n	800189e <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	2220      	movs	r2, #32
 800186e:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	6859      	ldr	r1, [r3, #4]
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	4b0c      	ldr	r3, [pc, #48]	; (80018ac <HAL_I2C_Master_Receive+0x1e8>)
 800187c:	400b      	ands	r3, r1
 800187e:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	2220      	movs	r2, #32
 8001884:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2200      	movs	r2, #0
 800188c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001898:	2300      	movs	r3, #0
 800189a:	e000      	b.n	800189e <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 800189c:	2302      	movs	r3, #2
  }
}
 800189e:	4618      	mov	r0, r3
 80018a0:	3718      	adds	r7, #24
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	80002400 	.word	0x80002400
 80018ac:	fe00e800 	.word	0xfe00e800

080018b0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	; 0x28
 80018b4:	af02      	add	r7, sp, #8
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	607a      	str	r2, [r7, #4]
 80018ba:	603b      	str	r3, [r7, #0]
 80018bc:	460b      	mov	r3, r1
 80018be:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80018c0:	2300      	movs	r3, #0
 80018c2:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80018ca:	b2db      	uxtb	r3, r3
 80018cc:	2b20      	cmp	r3, #32
 80018ce:	f040 80f1 	bne.w	8001ab4 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	699b      	ldr	r3, [r3, #24]
 80018d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80018dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80018e0:	d101      	bne.n	80018e6 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80018e2:	2302      	movs	r3, #2
 80018e4:	e0e7      	b.n	8001ab6 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018ec:	2b01      	cmp	r3, #1
 80018ee:	d101      	bne.n	80018f4 <HAL_I2C_IsDeviceReady+0x44>
 80018f0:	2302      	movs	r3, #2
 80018f2:	e0e0      	b.n	8001ab6 <HAL_I2C_IsDeviceReady+0x206>
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	2201      	movs	r2, #1
 80018f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	2224      	movs	r2, #36	; 0x24
 8001900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	2200      	movs	r2, #0
 8001908:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	68db      	ldr	r3, [r3, #12]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d107      	bne.n	8001922 <HAL_I2C_IsDeviceReady+0x72>
 8001912:	897b      	ldrh	r3, [r7, #10]
 8001914:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001918:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800191c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001920:	e004      	b.n	800192c <HAL_I2C_IsDeviceReady+0x7c>
 8001922:	897b      	ldrh	r3, [r7, #10]
 8001924:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001928:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 800192c:	68fa      	ldr	r2, [r7, #12]
 800192e:	6812      	ldr	r2, [r2, #0]
 8001930:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001932:	f7ff fa89 	bl	8000e48 <HAL_GetTick>
 8001936:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	699b      	ldr	r3, [r3, #24]
 800193e:	f003 0320 	and.w	r3, r3, #32
 8001942:	2b20      	cmp	r3, #32
 8001944:	bf0c      	ite	eq
 8001946:	2301      	moveq	r3, #1
 8001948:	2300      	movne	r3, #0
 800194a:	b2db      	uxtb	r3, r3
 800194c:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	699b      	ldr	r3, [r3, #24]
 8001954:	f003 0310 	and.w	r3, r3, #16
 8001958:	2b10      	cmp	r3, #16
 800195a:	bf0c      	ite	eq
 800195c:	2301      	moveq	r3, #1
 800195e:	2300      	movne	r3, #0
 8001960:	b2db      	uxtb	r3, r3
 8001962:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001964:	e034      	b.n	80019d0 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001966:	683b      	ldr	r3, [r7, #0]
 8001968:	f1b3 3fff 	cmp.w	r3, #4294967295
 800196c:	d01a      	beq.n	80019a4 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800196e:	f7ff fa6b 	bl	8000e48 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	429a      	cmp	r2, r3
 800197c:	d302      	bcc.n	8001984 <HAL_I2C_IsDeviceReady+0xd4>
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d10f      	bne.n	80019a4 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	2220      	movs	r2, #32
 8001988:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001990:	f043 0220 	orr.w	r2, r3, #32
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 80019a0:	2301      	movs	r3, #1
 80019a2:	e088      	b.n	8001ab6 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	699b      	ldr	r3, [r3, #24]
 80019aa:	f003 0320 	and.w	r3, r3, #32
 80019ae:	2b20      	cmp	r3, #32
 80019b0:	bf0c      	ite	eq
 80019b2:	2301      	moveq	r3, #1
 80019b4:	2300      	movne	r3, #0
 80019b6:	b2db      	uxtb	r3, r3
 80019b8:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	699b      	ldr	r3, [r3, #24]
 80019c0:	f003 0310 	and.w	r3, r3, #16
 80019c4:	2b10      	cmp	r3, #16
 80019c6:	bf0c      	ite	eq
 80019c8:	2301      	moveq	r3, #1
 80019ca:	2300      	movne	r3, #0
 80019cc:	b2db      	uxtb	r3, r3
 80019ce:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 80019d0:	7ffb      	ldrb	r3, [r7, #31]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d102      	bne.n	80019dc <HAL_I2C_IsDeviceReady+0x12c>
 80019d6:	7fbb      	ldrb	r3, [r7, #30]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d0c4      	beq.n	8001966 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	699b      	ldr	r3, [r3, #24]
 80019e2:	f003 0310 	and.w	r3, r3, #16
 80019e6:	2b10      	cmp	r3, #16
 80019e8:	d01a      	beq.n	8001a20 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	9300      	str	r3, [sp, #0]
 80019ee:	683b      	ldr	r3, [r7, #0]
 80019f0:	2200      	movs	r2, #0
 80019f2:	2120      	movs	r1, #32
 80019f4:	68f8      	ldr	r0, [r7, #12]
 80019f6:	f000 f886 	bl	8001b06 <I2C_WaitOnFlagUntilTimeout>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e058      	b.n	8001ab6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	2220      	movs	r2, #32
 8001a0a:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	2220      	movs	r2, #32
 8001a10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	2200      	movs	r2, #0
 8001a18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	e04a      	b.n	8001ab6 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	2200      	movs	r2, #0
 8001a28:	2120      	movs	r1, #32
 8001a2a:	68f8      	ldr	r0, [r7, #12]
 8001a2c:	f000 f86b 	bl	8001b06 <I2C_WaitOnFlagUntilTimeout>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e03d      	b.n	8001ab6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001a3a:	68fb      	ldr	r3, [r7, #12]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	2210      	movs	r2, #16
 8001a40:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a42:	68fb      	ldr	r3, [r7, #12]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2220      	movs	r2, #32
 8001a48:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	d118      	bne.n	8001a84 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	685a      	ldr	r2, [r3, #4]
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001a60:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001a62:	69bb      	ldr	r3, [r7, #24]
 8001a64:	9300      	str	r3, [sp, #0]
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	2200      	movs	r2, #0
 8001a6a:	2120      	movs	r1, #32
 8001a6c:	68f8      	ldr	r0, [r7, #12]
 8001a6e:	f000 f84a 	bl	8001b06 <I2C_WaitOnFlagUntilTimeout>
 8001a72:	4603      	mov	r3, r0
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d001      	beq.n	8001a7c <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e01c      	b.n	8001ab6 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2220      	movs	r2, #32
 8001a82:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001a84:	697b      	ldr	r3, [r7, #20]
 8001a86:	3301      	adds	r3, #1
 8001a88:	617b      	str	r3, [r7, #20]
    } while (I2C_Trials < Trials);
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	687a      	ldr	r2, [r7, #4]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	f63f af3b 	bhi.w	800190a <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	2220      	movs	r2, #32
 8001a98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa0:	f043 0220 	orr.w	r2, r3, #32
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	e000      	b.n	8001ab6 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001ab4:	2302      	movs	r3, #2
  }
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3720      	adds	r7, #32
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	699b      	ldr	r3, [r3, #24]
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	2b02      	cmp	r3, #2
 8001ad2:	d103      	bne.n	8001adc <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	2200      	movs	r2, #0
 8001ada:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	699b      	ldr	r3, [r3, #24]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d007      	beq.n	8001afa <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	699a      	ldr	r2, [r3, #24]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f042 0201 	orr.w	r2, r2, #1
 8001af8:	619a      	str	r2, [r3, #24]
  }
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b084      	sub	sp, #16
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	60f8      	str	r0, [r7, #12]
 8001b0e:	60b9      	str	r1, [r7, #8]
 8001b10:	603b      	str	r3, [r7, #0]
 8001b12:	4613      	mov	r3, r2
 8001b14:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b16:	e022      	b.n	8001b5e <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b1e:	d01e      	beq.n	8001b5e <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b20:	f7ff f992 	bl	8000e48 <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	69bb      	ldr	r3, [r7, #24]
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	683a      	ldr	r2, [r7, #0]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d302      	bcc.n	8001b36 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d113      	bne.n	8001b5e <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b3a:	f043 0220 	orr.w	r2, r3, #32
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2220      	movs	r2, #32
 8001b46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2200      	movs	r2, #0
 8001b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e00f      	b.n	8001b7e <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	699a      	ldr	r2, [r3, #24]
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	4013      	ands	r3, r2
 8001b68:	68ba      	ldr	r2, [r7, #8]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	bf0c      	ite	eq
 8001b6e:	2301      	moveq	r3, #1
 8001b70:	2300      	movne	r3, #0
 8001b72:	b2db      	uxtb	r3, r3
 8001b74:	461a      	mov	r2, r3
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d0cd      	beq.n	8001b18 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3710      	adds	r7, #16
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bd80      	pop	{r7, pc}

08001b86 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001b86:	b580      	push	{r7, lr}
 8001b88:	b084      	sub	sp, #16
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	60f8      	str	r0, [r7, #12]
 8001b8e:	60b9      	str	r1, [r7, #8]
 8001b90:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001b92:	e02c      	b.n	8001bee <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001b94:	687a      	ldr	r2, [r7, #4]
 8001b96:	68b9      	ldr	r1, [r7, #8]
 8001b98:	68f8      	ldr	r0, [r7, #12]
 8001b9a:	f000 f8dd 	bl	8001d58 <I2C_IsAcknowledgeFailed>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d001      	beq.n	8001ba8 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e02a      	b.n	8001bfe <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001ba8:	68bb      	ldr	r3, [r7, #8]
 8001baa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bae:	d01e      	beq.n	8001bee <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bb0:	f7ff f94a 	bl	8000e48 <HAL_GetTick>
 8001bb4:	4602      	mov	r2, r0
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	68ba      	ldr	r2, [r7, #8]
 8001bbc:	429a      	cmp	r2, r3
 8001bbe:	d302      	bcc.n	8001bc6 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001bc0:	68bb      	ldr	r3, [r7, #8]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d113      	bne.n	8001bee <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bca:	f043 0220 	orr.w	r2, r3, #32
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2220      	movs	r2, #32
 8001bd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001be2:	68fb      	ldr	r3, [r7, #12]
 8001be4:	2200      	movs	r2, #0
 8001be6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	e007      	b.n	8001bfe <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	699b      	ldr	r3, [r3, #24]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d1cb      	bne.n	8001b94 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b084      	sub	sp, #16
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	60f8      	str	r0, [r7, #12]
 8001c0e:	60b9      	str	r1, [r7, #8]
 8001c10:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c12:	e028      	b.n	8001c66 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c14:	687a      	ldr	r2, [r7, #4]
 8001c16:	68b9      	ldr	r1, [r7, #8]
 8001c18:	68f8      	ldr	r0, [r7, #12]
 8001c1a:	f000 f89d 	bl	8001d58 <I2C_IsAcknowledgeFailed>
 8001c1e:	4603      	mov	r3, r0
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d001      	beq.n	8001c28 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e026      	b.n	8001c76 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c28:	f7ff f90e 	bl	8000e48 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	68ba      	ldr	r2, [r7, #8]
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d302      	bcc.n	8001c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d113      	bne.n	8001c66 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c3e:	68fb      	ldr	r3, [r7, #12]
 8001c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c42:	f043 0220 	orr.w	r2, r3, #32
 8001c46:	68fb      	ldr	r3, [r7, #12]
 8001c48:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	2220      	movs	r2, #32
 8001c4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e007      	b.n	8001c76 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	699b      	ldr	r3, [r3, #24]
 8001c6c:	f003 0320 	and.w	r3, r3, #32
 8001c70:	2b20      	cmp	r3, #32
 8001c72:	d1cf      	bne.n	8001c14 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001c74:	2300      	movs	r3, #0
}
 8001c76:	4618      	mov	r0, r3
 8001c78:	3710      	adds	r7, #16
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}
	...

08001c80 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001c8c:	e055      	b.n	8001d3a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001c8e:	687a      	ldr	r2, [r7, #4]
 8001c90:	68b9      	ldr	r1, [r7, #8]
 8001c92:	68f8      	ldr	r0, [r7, #12]
 8001c94:	f000 f860 	bl	8001d58 <I2C_IsAcknowledgeFailed>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d001      	beq.n	8001ca2 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e053      	b.n	8001d4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	f003 0320 	and.w	r3, r3, #32
 8001cac:	2b20      	cmp	r3, #32
 8001cae:	d129      	bne.n	8001d04 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	699b      	ldr	r3, [r3, #24]
 8001cb6:	f003 0304 	and.w	r3, r3, #4
 8001cba:	2b04      	cmp	r3, #4
 8001cbc:	d105      	bne.n	8001cca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	e03f      	b.n	8001d4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	2220      	movs	r2, #32
 8001cd0:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6859      	ldr	r1, [r3, #4]
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	681a      	ldr	r2, [r3, #0]
 8001cdc:	4b1d      	ldr	r3, [pc, #116]	; (8001d54 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001cde:	400b      	ands	r3, r1
 8001ce0:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	2200      	movs	r2, #0
 8001ce6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	2220      	movs	r2, #32
 8001cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e022      	b.n	8001d4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d04:	f7ff f8a0 	bl	8000e48 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d302      	bcc.n	8001d1a <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d10f      	bne.n	8001d3a <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1e:	f043 0220 	orr.w	r2, r3, #32
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2220      	movs	r2, #32
 8001d2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	2200      	movs	r2, #0
 8001d32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	e007      	b.n	8001d4a <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	699b      	ldr	r3, [r3, #24]
 8001d40:	f003 0304 	and.w	r3, r3, #4
 8001d44:	2b04      	cmp	r3, #4
 8001d46:	d1a2      	bne.n	8001c8e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d48:	2300      	movs	r3, #0
}
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	3710      	adds	r7, #16
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	fe00e800 	.word	0xfe00e800

08001d58 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b084      	sub	sp, #16
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	60f8      	str	r0, [r7, #12]
 8001d60:	60b9      	str	r1, [r7, #8]
 8001d62:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	699b      	ldr	r3, [r3, #24]
 8001d6a:	f003 0310 	and.w	r3, r3, #16
 8001d6e:	2b10      	cmp	r3, #16
 8001d70:	d151      	bne.n	8001e16 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d72:	e022      	b.n	8001dba <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d7a:	d01e      	beq.n	8001dba <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d7c:	f7ff f864 	bl	8000e48 <HAL_GetTick>
 8001d80:	4602      	mov	r2, r0
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	1ad3      	subs	r3, r2, r3
 8001d86:	68ba      	ldr	r2, [r7, #8]
 8001d88:	429a      	cmp	r2, r3
 8001d8a:	d302      	bcc.n	8001d92 <I2C_IsAcknowledgeFailed+0x3a>
 8001d8c:	68bb      	ldr	r3, [r7, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d113      	bne.n	8001dba <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	f043 0220 	orr.w	r2, r3, #32
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2220      	movs	r2, #32
 8001da2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	e02e      	b.n	8001e18 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	699b      	ldr	r3, [r3, #24]
 8001dc0:	f003 0320 	and.w	r3, r3, #32
 8001dc4:	2b20      	cmp	r3, #32
 8001dc6:	d1d5      	bne.n	8001d74 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	2210      	movs	r2, #16
 8001dce:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001dd8:	68f8      	ldr	r0, [r7, #12]
 8001dda:	f7ff fe70 	bl	8001abe <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6859      	ldr	r1, [r3, #4]
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	4b0d      	ldr	r3, [pc, #52]	; (8001e20 <I2C_IsAcknowledgeFailed+0xc8>)
 8001dea:	400b      	ands	r3, r1
 8001dec:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001df2:	f043 0204 	orr.w	r2, r3, #4
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	2220      	movs	r2, #32
 8001dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3710      	adds	r7, #16
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	fe00e800 	.word	0xfe00e800

08001e24 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	607b      	str	r3, [r7, #4]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	817b      	strh	r3, [r7, #10]
 8001e32:	4613      	mov	r3, r2
 8001e34:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	685a      	ldr	r2, [r3, #4]
 8001e3c:	69bb      	ldr	r3, [r7, #24]
 8001e3e:	0d5b      	lsrs	r3, r3, #21
 8001e40:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001e44:	4b0d      	ldr	r3, [pc, #52]	; (8001e7c <I2C_TransferConfig+0x58>)
 8001e46:	430b      	orrs	r3, r1
 8001e48:	43db      	mvns	r3, r3
 8001e4a:	ea02 0103 	and.w	r1, r2, r3
 8001e4e:	897b      	ldrh	r3, [r7, #10]
 8001e50:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e54:	7a7b      	ldrb	r3, [r7, #9]
 8001e56:	041b      	lsls	r3, r3, #16
 8001e58:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001e5c:	431a      	orrs	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	431a      	orrs	r2, r3
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	431a      	orrs	r2, r3
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	430a      	orrs	r2, r1
 8001e6c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001e6e:	bf00      	nop
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	03ff63ff 	.word	0x03ff63ff

08001e80 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
 8001e88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	2b20      	cmp	r3, #32
 8001e94:	d138      	bne.n	8001f08 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d101      	bne.n	8001ea4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001ea0:	2302      	movs	r3, #2
 8001ea2:	e032      	b.n	8001f0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2224      	movs	r2, #36	; 0x24
 8001eb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f022 0201 	bic.w	r2, r2, #1
 8001ec2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001ed2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	6819      	ldr	r1, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	683a      	ldr	r2, [r7, #0]
 8001ee0:	430a      	orrs	r2, r1
 8001ee2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	681a      	ldr	r2, [r3, #0]
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f042 0201 	orr.w	r2, r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2220      	movs	r2, #32
 8001ef8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f04:	2300      	movs	r3, #0
 8001f06:	e000      	b.n	8001f0a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f08:	2302      	movs	r3, #2
  }
}
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f14:	4770      	bx	lr

08001f16 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f16:	b480      	push	{r7}
 8001f18:	b085      	sub	sp, #20
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	6078      	str	r0, [r7, #4]
 8001f1e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b20      	cmp	r3, #32
 8001f2a:	d139      	bne.n	8001fa0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d101      	bne.n	8001f3a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f36:	2302      	movs	r3, #2
 8001f38:	e033      	b.n	8001fa2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	2224      	movs	r2, #36	; 0x24
 8001f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f022 0201 	bic.w	r2, r2, #1
 8001f58:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001f68:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	021b      	lsls	r3, r3, #8
 8001f6e:	68fa      	ldr	r2, [r7, #12]
 8001f70:	4313      	orrs	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	68fa      	ldr	r2, [r7, #12]
 8001f7a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f042 0201 	orr.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	2220      	movs	r2, #32
 8001f90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2200      	movs	r2, #0
 8001f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	e000      	b.n	8001fa2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fa0:	2302      	movs	r3, #2
  }
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3714      	adds	r7, #20
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fac:	4770      	bx	lr
	...

08001fb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	1d3b      	adds	r3, r7, #4
 8001fba:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001fbc:	1d3b      	adds	r3, r7, #4
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d102      	bne.n	8001fca <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001fc4:	2301      	movs	r3, #1
 8001fc6:	f000 bef4 	b.w	8002db2 <HAL_RCC_OscConfig+0xe02>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fca:	1d3b      	adds	r3, r7, #4
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f003 0301 	and.w	r3, r3, #1
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	f000 816a 	beq.w	80022ae <HAL_RCC_OscConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001fda:	4bb3      	ldr	r3, [pc, #716]	; (80022a8 <HAL_RCC_OscConfig+0x2f8>)
 8001fdc:	685b      	ldr	r3, [r3, #4]
 8001fde:	f003 030c 	and.w	r3, r3, #12
 8001fe2:	2b04      	cmp	r3, #4
 8001fe4:	d00c      	beq.n	8002000 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001fe6:	4bb0      	ldr	r3, [pc, #704]	; (80022a8 <HAL_RCC_OscConfig+0x2f8>)
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f003 030c 	and.w	r3, r3, #12
 8001fee:	2b08      	cmp	r3, #8
 8001ff0:	d159      	bne.n	80020a6 <HAL_RCC_OscConfig+0xf6>
 8001ff2:	4bad      	ldr	r3, [pc, #692]	; (80022a8 <HAL_RCC_OscConfig+0x2f8>)
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ffe:	d152      	bne.n	80020a6 <HAL_RCC_OscConfig+0xf6>
 8002000:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002004:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002008:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 800200c:	fa93 f3a3 	rbit	r3, r3
 8002010:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002014:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002018:	fab3 f383 	clz	r3, r3
 800201c:	b2db      	uxtb	r3, r3
 800201e:	095b      	lsrs	r3, r3, #5
 8002020:	b2db      	uxtb	r3, r3
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b01      	cmp	r3, #1
 800202a:	d102      	bne.n	8002032 <HAL_RCC_OscConfig+0x82>
 800202c:	4b9e      	ldr	r3, [pc, #632]	; (80022a8 <HAL_RCC_OscConfig+0x2f8>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	e015      	b.n	800205e <HAL_RCC_OscConfig+0xae>
 8002032:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002036:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800203a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 800203e:	fa93 f3a3 	rbit	r3, r3
 8002042:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002046:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800204a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800204e:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8002052:	fa93 f3a3 	rbit	r3, r3
 8002056:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 800205a:	4b93      	ldr	r3, [pc, #588]	; (80022a8 <HAL_RCC_OscConfig+0x2f8>)
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002062:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8002066:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800206a:	fa92 f2a2 	rbit	r2, r2
 800206e:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8002072:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8002076:	fab2 f282 	clz	r2, r2
 800207a:	b2d2      	uxtb	r2, r2
 800207c:	f042 0220 	orr.w	r2, r2, #32
 8002080:	b2d2      	uxtb	r2, r2
 8002082:	f002 021f 	and.w	r2, r2, #31
 8002086:	2101      	movs	r1, #1
 8002088:	fa01 f202 	lsl.w	r2, r1, r2
 800208c:	4013      	ands	r3, r2
 800208e:	2b00      	cmp	r3, #0
 8002090:	f000 810c 	beq.w	80022ac <HAL_RCC_OscConfig+0x2fc>
 8002094:	1d3b      	adds	r3, r7, #4
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	685b      	ldr	r3, [r3, #4]
 800209a:	2b00      	cmp	r3, #0
 800209c:	f040 8106 	bne.w	80022ac <HAL_RCC_OscConfig+0x2fc>
      {
        return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	f000 be86 	b.w	8002db2 <HAL_RCC_OscConfig+0xe02>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020a6:	1d3b      	adds	r3, r7, #4
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020b0:	d106      	bne.n	80020c0 <HAL_RCC_OscConfig+0x110>
 80020b2:	4b7d      	ldr	r3, [pc, #500]	; (80022a8 <HAL_RCC_OscConfig+0x2f8>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	4a7c      	ldr	r2, [pc, #496]	; (80022a8 <HAL_RCC_OscConfig+0x2f8>)
 80020b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020bc:	6013      	str	r3, [r2, #0]
 80020be:	e030      	b.n	8002122 <HAL_RCC_OscConfig+0x172>
 80020c0:	1d3b      	adds	r3, r7, #4
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	685b      	ldr	r3, [r3, #4]
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d10c      	bne.n	80020e4 <HAL_RCC_OscConfig+0x134>
 80020ca:	4b77      	ldr	r3, [pc, #476]	; (80022a8 <HAL_RCC_OscConfig+0x2f8>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a76      	ldr	r2, [pc, #472]	; (80022a8 <HAL_RCC_OscConfig+0x2f8>)
 80020d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	4b74      	ldr	r3, [pc, #464]	; (80022a8 <HAL_RCC_OscConfig+0x2f8>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4a73      	ldr	r2, [pc, #460]	; (80022a8 <HAL_RCC_OscConfig+0x2f8>)
 80020dc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020e0:	6013      	str	r3, [r2, #0]
 80020e2:	e01e      	b.n	8002122 <HAL_RCC_OscConfig+0x172>
 80020e4:	1d3b      	adds	r3, r7, #4
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	685b      	ldr	r3, [r3, #4]
 80020ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020ee:	d10c      	bne.n	800210a <HAL_RCC_OscConfig+0x15a>
 80020f0:	4b6d      	ldr	r3, [pc, #436]	; (80022a8 <HAL_RCC_OscConfig+0x2f8>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4a6c      	ldr	r2, [pc, #432]	; (80022a8 <HAL_RCC_OscConfig+0x2f8>)
 80020f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020fa:	6013      	str	r3, [r2, #0]
 80020fc:	4b6a      	ldr	r3, [pc, #424]	; (80022a8 <HAL_RCC_OscConfig+0x2f8>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4a69      	ldr	r2, [pc, #420]	; (80022a8 <HAL_RCC_OscConfig+0x2f8>)
 8002102:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002106:	6013      	str	r3, [r2, #0]
 8002108:	e00b      	b.n	8002122 <HAL_RCC_OscConfig+0x172>
 800210a:	4b67      	ldr	r3, [pc, #412]	; (80022a8 <HAL_RCC_OscConfig+0x2f8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	4a66      	ldr	r2, [pc, #408]	; (80022a8 <HAL_RCC_OscConfig+0x2f8>)
 8002110:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002114:	6013      	str	r3, [r2, #0]
 8002116:	4b64      	ldr	r3, [pc, #400]	; (80022a8 <HAL_RCC_OscConfig+0x2f8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a63      	ldr	r2, [pc, #396]	; (80022a8 <HAL_RCC_OscConfig+0x2f8>)
 800211c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002120:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002122:	4b61      	ldr	r3, [pc, #388]	; (80022a8 <HAL_RCC_OscConfig+0x2f8>)
 8002124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002126:	f023 020f 	bic.w	r2, r3, #15
 800212a:	1d3b      	adds	r3, r7, #4
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	495d      	ldr	r1, [pc, #372]	; (80022a8 <HAL_RCC_OscConfig+0x2f8>)
 8002132:	4313      	orrs	r3, r2
 8002134:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002136:	1d3b      	adds	r3, r7, #4
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d059      	beq.n	80021f4 <HAL_RCC_OscConfig+0x244>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002140:	f7fe fe82 	bl	8000e48 <HAL_GetTick>
 8002144:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002148:	e00a      	b.n	8002160 <HAL_RCC_OscConfig+0x1b0>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800214a:	f7fe fe7d 	bl	8000e48 <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b64      	cmp	r3, #100	; 0x64
 8002158:	d902      	bls.n	8002160 <HAL_RCC_OscConfig+0x1b0>
          {
            return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	f000 be29 	b.w	8002db2 <HAL_RCC_OscConfig+0xe02>
 8002160:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002164:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002168:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 800216c:	fa93 f3a3 	rbit	r3, r3
 8002170:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8002174:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002178:	fab3 f383 	clz	r3, r3
 800217c:	b2db      	uxtb	r3, r3
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	b2db      	uxtb	r3, r3
 8002182:	f043 0301 	orr.w	r3, r3, #1
 8002186:	b2db      	uxtb	r3, r3
 8002188:	2b01      	cmp	r3, #1
 800218a:	d102      	bne.n	8002192 <HAL_RCC_OscConfig+0x1e2>
 800218c:	4b46      	ldr	r3, [pc, #280]	; (80022a8 <HAL_RCC_OscConfig+0x2f8>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	e015      	b.n	80021be <HAL_RCC_OscConfig+0x20e>
 8002192:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002196:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 800219e:	fa93 f3a3 	rbit	r3, r3
 80021a2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80021a6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021aa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80021ae:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80021b2:	fa93 f3a3 	rbit	r3, r3
 80021b6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 80021ba:	4b3b      	ldr	r3, [pc, #236]	; (80022a8 <HAL_RCC_OscConfig+0x2f8>)
 80021bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021c2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 80021c6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80021ca:	fa92 f2a2 	rbit	r2, r2
 80021ce:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 80021d2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80021d6:	fab2 f282 	clz	r2, r2
 80021da:	b2d2      	uxtb	r2, r2
 80021dc:	f042 0220 	orr.w	r2, r2, #32
 80021e0:	b2d2      	uxtb	r2, r2
 80021e2:	f002 021f 	and.w	r2, r2, #31
 80021e6:	2101      	movs	r1, #1
 80021e8:	fa01 f202 	lsl.w	r2, r1, r2
 80021ec:	4013      	ands	r3, r2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0ab      	beq.n	800214a <HAL_RCC_OscConfig+0x19a>
 80021f2:	e05c      	b.n	80022ae <HAL_RCC_OscConfig+0x2fe>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f4:	f7fe fe28 	bl	8000e48 <HAL_GetTick>
 80021f8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021fc:	e00a      	b.n	8002214 <HAL_RCC_OscConfig+0x264>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021fe:	f7fe fe23 	bl	8000e48 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b64      	cmp	r3, #100	; 0x64
 800220c:	d902      	bls.n	8002214 <HAL_RCC_OscConfig+0x264>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	f000 bdcf 	b.w	8002db2 <HAL_RCC_OscConfig+0xe02>
 8002214:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002218:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800221c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8002220:	fa93 f3a3 	rbit	r3, r3
 8002224:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8002228:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800222c:	fab3 f383 	clz	r3, r3
 8002230:	b2db      	uxtb	r3, r3
 8002232:	095b      	lsrs	r3, r3, #5
 8002234:	b2db      	uxtb	r3, r3
 8002236:	f043 0301 	orr.w	r3, r3, #1
 800223a:	b2db      	uxtb	r3, r3
 800223c:	2b01      	cmp	r3, #1
 800223e:	d102      	bne.n	8002246 <HAL_RCC_OscConfig+0x296>
 8002240:	4b19      	ldr	r3, [pc, #100]	; (80022a8 <HAL_RCC_OscConfig+0x2f8>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	e015      	b.n	8002272 <HAL_RCC_OscConfig+0x2c2>
 8002246:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800224a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8002252:	fa93 f3a3 	rbit	r3, r3
 8002256:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800225a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800225e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8002262:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8002266:	fa93 f3a3 	rbit	r3, r3
 800226a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 800226e:	4b0e      	ldr	r3, [pc, #56]	; (80022a8 <HAL_RCC_OscConfig+0x2f8>)
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002276:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 800227a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800227e:	fa92 f2a2 	rbit	r2, r2
 8002282:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8002286:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 800228a:	fab2 f282 	clz	r2, r2
 800228e:	b2d2      	uxtb	r2, r2
 8002290:	f042 0220 	orr.w	r2, r2, #32
 8002294:	b2d2      	uxtb	r2, r2
 8002296:	f002 021f 	and.w	r2, r2, #31
 800229a:	2101      	movs	r1, #1
 800229c:	fa01 f202 	lsl.w	r2, r1, r2
 80022a0:	4013      	ands	r3, r2
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d1ab      	bne.n	80021fe <HAL_RCC_OscConfig+0x24e>
 80022a6:	e002      	b.n	80022ae <HAL_RCC_OscConfig+0x2fe>
 80022a8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ae:	1d3b      	adds	r3, r7, #4
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0302 	and.w	r3, r3, #2
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	f000 816f 	beq.w	800259c <HAL_RCC_OscConfig+0x5ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80022be:	4bd0      	ldr	r3, [pc, #832]	; (8002600 <HAL_RCC_OscConfig+0x650>)
 80022c0:	685b      	ldr	r3, [r3, #4]
 80022c2:	f003 030c 	and.w	r3, r3, #12
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d00b      	beq.n	80022e2 <HAL_RCC_OscConfig+0x332>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80022ca:	4bcd      	ldr	r3, [pc, #820]	; (8002600 <HAL_RCC_OscConfig+0x650>)
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	f003 030c 	and.w	r3, r3, #12
 80022d2:	2b08      	cmp	r3, #8
 80022d4:	d16c      	bne.n	80023b0 <HAL_RCC_OscConfig+0x400>
 80022d6:	4bca      	ldr	r3, [pc, #808]	; (8002600 <HAL_RCC_OscConfig+0x650>)
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d166      	bne.n	80023b0 <HAL_RCC_OscConfig+0x400>
 80022e2:	2302      	movs	r3, #2
 80022e4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80022ec:	fa93 f3a3 	rbit	r3, r3
 80022f0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 80022f4:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80022f8:	fab3 f383 	clz	r3, r3
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	095b      	lsrs	r3, r3, #5
 8002300:	b2db      	uxtb	r3, r3
 8002302:	f043 0301 	orr.w	r3, r3, #1
 8002306:	b2db      	uxtb	r3, r3
 8002308:	2b01      	cmp	r3, #1
 800230a:	d102      	bne.n	8002312 <HAL_RCC_OscConfig+0x362>
 800230c:	4bbc      	ldr	r3, [pc, #752]	; (8002600 <HAL_RCC_OscConfig+0x650>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	e013      	b.n	800233a <HAL_RCC_OscConfig+0x38a>
 8002312:	2302      	movs	r3, #2
 8002314:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002318:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 800231c:	fa93 f3a3 	rbit	r3, r3
 8002320:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8002324:	2302      	movs	r3, #2
 8002326:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800232a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800232e:	fa93 f3a3 	rbit	r3, r3
 8002332:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8002336:	4bb2      	ldr	r3, [pc, #712]	; (8002600 <HAL_RCC_OscConfig+0x650>)
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	2202      	movs	r2, #2
 800233c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8002340:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002344:	fa92 f2a2 	rbit	r2, r2
 8002348:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 800234c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8002350:	fab2 f282 	clz	r2, r2
 8002354:	b2d2      	uxtb	r2, r2
 8002356:	f042 0220 	orr.w	r2, r2, #32
 800235a:	b2d2      	uxtb	r2, r2
 800235c:	f002 021f 	and.w	r2, r2, #31
 8002360:	2101      	movs	r1, #1
 8002362:	fa01 f202 	lsl.w	r2, r1, r2
 8002366:	4013      	ands	r3, r2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d007      	beq.n	800237c <HAL_RCC_OscConfig+0x3cc>
 800236c:	1d3b      	adds	r3, r7, #4
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	691b      	ldr	r3, [r3, #16]
 8002372:	2b01      	cmp	r3, #1
 8002374:	d002      	beq.n	800237c <HAL_RCC_OscConfig+0x3cc>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	f000 bd1b 	b.w	8002db2 <HAL_RCC_OscConfig+0xe02>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800237c:	4ba0      	ldr	r3, [pc, #640]	; (8002600 <HAL_RCC_OscConfig+0x650>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002384:	1d3b      	adds	r3, r7, #4
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	695b      	ldr	r3, [r3, #20]
 800238a:	21f8      	movs	r1, #248	; 0xf8
 800238c:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002390:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8002394:	fa91 f1a1 	rbit	r1, r1
 8002398:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 800239c:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 80023a0:	fab1 f181 	clz	r1, r1
 80023a4:	b2c9      	uxtb	r1, r1
 80023a6:	408b      	lsls	r3, r1
 80023a8:	4995      	ldr	r1, [pc, #596]	; (8002600 <HAL_RCC_OscConfig+0x650>)
 80023aa:	4313      	orrs	r3, r2
 80023ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023ae:	e0f5      	b.n	800259c <HAL_RCC_OscConfig+0x5ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80023b0:	1d3b      	adds	r3, r7, #4
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 8085 	beq.w	80024c6 <HAL_RCC_OscConfig+0x516>
 80023bc:	2301      	movs	r3, #1
 80023be:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80023c6:	fa93 f3a3 	rbit	r3, r3
 80023ca:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 80023ce:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023d2:	fab3 f383 	clz	r3, r3
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80023dc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	461a      	mov	r2, r3
 80023e4:	2301      	movs	r3, #1
 80023e6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023e8:	f7fe fd2e 	bl	8000e48 <HAL_GetTick>
 80023ec:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023f0:	e00a      	b.n	8002408 <HAL_RCC_OscConfig+0x458>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023f2:	f7fe fd29 	bl	8000e48 <HAL_GetTick>
 80023f6:	4602      	mov	r2, r0
 80023f8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d902      	bls.n	8002408 <HAL_RCC_OscConfig+0x458>
          {
            return HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	f000 bcd5 	b.w	8002db2 <HAL_RCC_OscConfig+0xe02>
 8002408:	2302      	movs	r3, #2
 800240a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8002412:	fa93 f3a3 	rbit	r3, r3
 8002416:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 800241a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800241e:	fab3 f383 	clz	r3, r3
 8002422:	b2db      	uxtb	r3, r3
 8002424:	095b      	lsrs	r3, r3, #5
 8002426:	b2db      	uxtb	r3, r3
 8002428:	f043 0301 	orr.w	r3, r3, #1
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b01      	cmp	r3, #1
 8002430:	d102      	bne.n	8002438 <HAL_RCC_OscConfig+0x488>
 8002432:	4b73      	ldr	r3, [pc, #460]	; (8002600 <HAL_RCC_OscConfig+0x650>)
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	e013      	b.n	8002460 <HAL_RCC_OscConfig+0x4b0>
 8002438:	2302      	movs	r3, #2
 800243a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8002442:	fa93 f3a3 	rbit	r3, r3
 8002446:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800244a:	2302      	movs	r3, #2
 800244c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002450:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8002454:	fa93 f3a3 	rbit	r3, r3
 8002458:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 800245c:	4b68      	ldr	r3, [pc, #416]	; (8002600 <HAL_RCC_OscConfig+0x650>)
 800245e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002460:	2202      	movs	r2, #2
 8002462:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8002466:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800246a:	fa92 f2a2 	rbit	r2, r2
 800246e:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8002472:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8002476:	fab2 f282 	clz	r2, r2
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	f042 0220 	orr.w	r2, r2, #32
 8002480:	b2d2      	uxtb	r2, r2
 8002482:	f002 021f 	and.w	r2, r2, #31
 8002486:	2101      	movs	r1, #1
 8002488:	fa01 f202 	lsl.w	r2, r1, r2
 800248c:	4013      	ands	r3, r2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d0af      	beq.n	80023f2 <HAL_RCC_OscConfig+0x442>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002492:	4b5b      	ldr	r3, [pc, #364]	; (8002600 <HAL_RCC_OscConfig+0x650>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800249a:	1d3b      	adds	r3, r7, #4
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	21f8      	movs	r1, #248	; 0xf8
 80024a2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80024aa:	fa91 f1a1 	rbit	r1, r1
 80024ae:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 80024b2:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 80024b6:	fab1 f181 	clz	r1, r1
 80024ba:	b2c9      	uxtb	r1, r1
 80024bc:	408b      	lsls	r3, r1
 80024be:	4950      	ldr	r1, [pc, #320]	; (8002600 <HAL_RCC_OscConfig+0x650>)
 80024c0:	4313      	orrs	r3, r2
 80024c2:	600b      	str	r3, [r1, #0]
 80024c4:	e06a      	b.n	800259c <HAL_RCC_OscConfig+0x5ec>
 80024c6:	2301      	movs	r3, #1
 80024c8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80024d0:	fa93 f3a3 	rbit	r3, r3
 80024d4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 80024d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024dc:	fab3 f383 	clz	r3, r3
 80024e0:	b2db      	uxtb	r3, r3
 80024e2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80024e6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	461a      	mov	r2, r3
 80024ee:	2300      	movs	r3, #0
 80024f0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024f2:	f7fe fca9 	bl	8000e48 <HAL_GetTick>
 80024f6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024fa:	e00a      	b.n	8002512 <HAL_RCC_OscConfig+0x562>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024fc:	f7fe fca4 	bl	8000e48 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002506:	1ad3      	subs	r3, r2, r3
 8002508:	2b02      	cmp	r3, #2
 800250a:	d902      	bls.n	8002512 <HAL_RCC_OscConfig+0x562>
          {
            return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	f000 bc50 	b.w	8002db2 <HAL_RCC_OscConfig+0xe02>
 8002512:	2302      	movs	r3, #2
 8002514:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002518:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800251c:	fa93 f3a3 	rbit	r3, r3
 8002520:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 8002524:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002528:	fab3 f383 	clz	r3, r3
 800252c:	b2db      	uxtb	r3, r3
 800252e:	095b      	lsrs	r3, r3, #5
 8002530:	b2db      	uxtb	r3, r3
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	b2db      	uxtb	r3, r3
 8002538:	2b01      	cmp	r3, #1
 800253a:	d102      	bne.n	8002542 <HAL_RCC_OscConfig+0x592>
 800253c:	4b30      	ldr	r3, [pc, #192]	; (8002600 <HAL_RCC_OscConfig+0x650>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	e013      	b.n	800256a <HAL_RCC_OscConfig+0x5ba>
 8002542:	2302      	movs	r3, #2
 8002544:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002548:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800254c:	fa93 f3a3 	rbit	r3, r3
 8002550:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002554:	2302      	movs	r3, #2
 8002556:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800255a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800255e:	fa93 f3a3 	rbit	r3, r3
 8002562:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002566:	4b26      	ldr	r3, [pc, #152]	; (8002600 <HAL_RCC_OscConfig+0x650>)
 8002568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256a:	2202      	movs	r2, #2
 800256c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 8002570:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002574:	fa92 f2a2 	rbit	r2, r2
 8002578:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 800257c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8002580:	fab2 f282 	clz	r2, r2
 8002584:	b2d2      	uxtb	r2, r2
 8002586:	f042 0220 	orr.w	r2, r2, #32
 800258a:	b2d2      	uxtb	r2, r2
 800258c:	f002 021f 	and.w	r2, r2, #31
 8002590:	2101      	movs	r1, #1
 8002592:	fa01 f202 	lsl.w	r2, r1, r2
 8002596:	4013      	ands	r3, r2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d1af      	bne.n	80024fc <HAL_RCC_OscConfig+0x54c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800259c:	1d3b      	adds	r3, r7, #4
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0308 	and.w	r3, r3, #8
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 80da 	beq.w	8002760 <HAL_RCC_OscConfig+0x7b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80025ac:	1d3b      	adds	r3, r7, #4
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	699b      	ldr	r3, [r3, #24]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d069      	beq.n	800268a <HAL_RCC_OscConfig+0x6da>
 80025b6:	2301      	movs	r3, #1
 80025b8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80025c0:	fa93 f3a3 	rbit	r3, r3
 80025c4:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 80025c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025cc:	fab3 f383 	clz	r3, r3
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	461a      	mov	r2, r3
 80025d4:	4b0b      	ldr	r3, [pc, #44]	; (8002604 <HAL_RCC_OscConfig+0x654>)
 80025d6:	4413      	add	r3, r2
 80025d8:	009b      	lsls	r3, r3, #2
 80025da:	461a      	mov	r2, r3
 80025dc:	2301      	movs	r3, #1
 80025de:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025e0:	f7fe fc32 	bl	8000e48 <HAL_GetTick>
 80025e4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025e8:	e00e      	b.n	8002608 <HAL_RCC_OscConfig+0x658>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025ea:	f7fe fc2d 	bl	8000e48 <HAL_GetTick>
 80025ee:	4602      	mov	r2, r0
 80025f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	2b02      	cmp	r3, #2
 80025f8:	d906      	bls.n	8002608 <HAL_RCC_OscConfig+0x658>
        {
          return HAL_TIMEOUT;
 80025fa:	2303      	movs	r3, #3
 80025fc:	e3d9      	b.n	8002db2 <HAL_RCC_OscConfig+0xe02>
 80025fe:	bf00      	nop
 8002600:	40021000 	.word	0x40021000
 8002604:	10908120 	.word	0x10908120
 8002608:	2302      	movs	r3, #2
 800260a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800260e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002612:	fa93 f3a3 	rbit	r3, r3
 8002616:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800261a:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800261e:	2202      	movs	r2, #2
 8002620:	601a      	str	r2, [r3, #0]
 8002622:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	fa93 f2a3 	rbit	r2, r3
 800262c:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002630:	601a      	str	r2, [r3, #0]
 8002632:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002636:	2202      	movs	r2, #2
 8002638:	601a      	str	r2, [r3, #0]
 800263a:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	fa93 f2a3 	rbit	r2, r3
 8002644:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002648:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800264a:	4ba5      	ldr	r3, [pc, #660]	; (80028e0 <HAL_RCC_OscConfig+0x930>)
 800264c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800264e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002652:	2102      	movs	r1, #2
 8002654:	6019      	str	r1, [r3, #0]
 8002656:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	fa93 f1a3 	rbit	r1, r3
 8002660:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002664:	6019      	str	r1, [r3, #0]
  return result;
 8002666:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	fab3 f383 	clz	r3, r3
 8002670:	b2db      	uxtb	r3, r3
 8002672:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002676:	b2db      	uxtb	r3, r3
 8002678:	f003 031f 	and.w	r3, r3, #31
 800267c:	2101      	movs	r1, #1
 800267e:	fa01 f303 	lsl.w	r3, r1, r3
 8002682:	4013      	ands	r3, r2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d0b0      	beq.n	80025ea <HAL_RCC_OscConfig+0x63a>
 8002688:	e06a      	b.n	8002760 <HAL_RCC_OscConfig+0x7b0>
 800268a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800268e:	2201      	movs	r2, #1
 8002690:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002692:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	fa93 f2a3 	rbit	r2, r3
 800269c:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80026a0:	601a      	str	r2, [r3, #0]
  return result;
 80026a2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80026a6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80026a8:	fab3 f383 	clz	r3, r3
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	461a      	mov	r2, r3
 80026b0:	4b8c      	ldr	r3, [pc, #560]	; (80028e4 <HAL_RCC_OscConfig+0x934>)
 80026b2:	4413      	add	r3, r2
 80026b4:	009b      	lsls	r3, r3, #2
 80026b6:	461a      	mov	r2, r3
 80026b8:	2300      	movs	r3, #0
 80026ba:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026bc:	f7fe fbc4 	bl	8000e48 <HAL_GetTick>
 80026c0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026c4:	e009      	b.n	80026da <HAL_RCC_OscConfig+0x72a>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80026c6:	f7fe fbbf 	bl	8000e48 <HAL_GetTick>
 80026ca:	4602      	mov	r2, r0
 80026cc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026d0:	1ad3      	subs	r3, r2, r3
 80026d2:	2b02      	cmp	r3, #2
 80026d4:	d901      	bls.n	80026da <HAL_RCC_OscConfig+0x72a>
        {
          return HAL_TIMEOUT;
 80026d6:	2303      	movs	r3, #3
 80026d8:	e36b      	b.n	8002db2 <HAL_RCC_OscConfig+0xe02>
 80026da:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80026de:	2202      	movs	r2, #2
 80026e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e2:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	fa93 f2a3 	rbit	r2, r3
 80026ec:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80026f0:	601a      	str	r2, [r3, #0]
 80026f2:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80026f6:	2202      	movs	r2, #2
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	fa93 f2a3 	rbit	r2, r3
 8002704:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002708:	601a      	str	r2, [r3, #0]
 800270a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800270e:	2202      	movs	r2, #2
 8002710:	601a      	str	r2, [r3, #0]
 8002712:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	fa93 f2a3 	rbit	r2, r3
 800271c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002720:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002722:	4b6f      	ldr	r3, [pc, #444]	; (80028e0 <HAL_RCC_OscConfig+0x930>)
 8002724:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002726:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800272a:	2102      	movs	r1, #2
 800272c:	6019      	str	r1, [r3, #0]
 800272e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	fa93 f1a3 	rbit	r1, r3
 8002738:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800273c:	6019      	str	r1, [r3, #0]
  return result;
 800273e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	fab3 f383 	clz	r3, r3
 8002748:	b2db      	uxtb	r3, r3
 800274a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800274e:	b2db      	uxtb	r3, r3
 8002750:	f003 031f 	and.w	r3, r3, #31
 8002754:	2101      	movs	r1, #1
 8002756:	fa01 f303 	lsl.w	r3, r1, r3
 800275a:	4013      	ands	r3, r2
 800275c:	2b00      	cmp	r3, #0
 800275e:	d1b2      	bne.n	80026c6 <HAL_RCC_OscConfig+0x716>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002760:	1d3b      	adds	r3, r7, #4
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	2b00      	cmp	r3, #0
 800276c:	f000 8158 	beq.w	8002a20 <HAL_RCC_OscConfig+0xa70>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002770:	2300      	movs	r3, #0
 8002772:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002776:	4b5a      	ldr	r3, [pc, #360]	; (80028e0 <HAL_RCC_OscConfig+0x930>)
 8002778:	69db      	ldr	r3, [r3, #28]
 800277a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d112      	bne.n	80027a8 <HAL_RCC_OscConfig+0x7f8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002782:	4b57      	ldr	r3, [pc, #348]	; (80028e0 <HAL_RCC_OscConfig+0x930>)
 8002784:	69db      	ldr	r3, [r3, #28]
 8002786:	4a56      	ldr	r2, [pc, #344]	; (80028e0 <HAL_RCC_OscConfig+0x930>)
 8002788:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800278c:	61d3      	str	r3, [r2, #28]
 800278e:	4b54      	ldr	r3, [pc, #336]	; (80028e0 <HAL_RCC_OscConfig+0x930>)
 8002790:	69db      	ldr	r3, [r3, #28]
 8002792:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002796:	f107 0308 	add.w	r3, r7, #8
 800279a:	601a      	str	r2, [r3, #0]
 800279c:	f107 0308 	add.w	r3, r7, #8
 80027a0:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80027a2:	2301      	movs	r3, #1
 80027a4:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027a8:	4b4f      	ldr	r3, [pc, #316]	; (80028e8 <HAL_RCC_OscConfig+0x938>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d11a      	bne.n	80027ea <HAL_RCC_OscConfig+0x83a>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027b4:	4b4c      	ldr	r3, [pc, #304]	; (80028e8 <HAL_RCC_OscConfig+0x938>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a4b      	ldr	r2, [pc, #300]	; (80028e8 <HAL_RCC_OscConfig+0x938>)
 80027ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027be:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027c0:	f7fe fb42 	bl	8000e48 <HAL_GetTick>
 80027c4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c8:	e009      	b.n	80027de <HAL_RCC_OscConfig+0x82e>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ca:	f7fe fb3d 	bl	8000e48 <HAL_GetTick>
 80027ce:	4602      	mov	r2, r0
 80027d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	2b64      	cmp	r3, #100	; 0x64
 80027d8:	d901      	bls.n	80027de <HAL_RCC_OscConfig+0x82e>
        {
          return HAL_TIMEOUT;
 80027da:	2303      	movs	r3, #3
 80027dc:	e2e9      	b.n	8002db2 <HAL_RCC_OscConfig+0xe02>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027de:	4b42      	ldr	r3, [pc, #264]	; (80028e8 <HAL_RCC_OscConfig+0x938>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d0ef      	beq.n	80027ca <HAL_RCC_OscConfig+0x81a>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80027ea:	1d3b      	adds	r3, r7, #4
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68db      	ldr	r3, [r3, #12]
 80027f0:	2b01      	cmp	r3, #1
 80027f2:	d106      	bne.n	8002802 <HAL_RCC_OscConfig+0x852>
 80027f4:	4b3a      	ldr	r3, [pc, #232]	; (80028e0 <HAL_RCC_OscConfig+0x930>)
 80027f6:	6a1b      	ldr	r3, [r3, #32]
 80027f8:	4a39      	ldr	r2, [pc, #228]	; (80028e0 <HAL_RCC_OscConfig+0x930>)
 80027fa:	f043 0301 	orr.w	r3, r3, #1
 80027fe:	6213      	str	r3, [r2, #32]
 8002800:	e02f      	b.n	8002862 <HAL_RCC_OscConfig+0x8b2>
 8002802:	1d3b      	adds	r3, r7, #4
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	68db      	ldr	r3, [r3, #12]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10c      	bne.n	8002826 <HAL_RCC_OscConfig+0x876>
 800280c:	4b34      	ldr	r3, [pc, #208]	; (80028e0 <HAL_RCC_OscConfig+0x930>)
 800280e:	6a1b      	ldr	r3, [r3, #32]
 8002810:	4a33      	ldr	r2, [pc, #204]	; (80028e0 <HAL_RCC_OscConfig+0x930>)
 8002812:	f023 0301 	bic.w	r3, r3, #1
 8002816:	6213      	str	r3, [r2, #32]
 8002818:	4b31      	ldr	r3, [pc, #196]	; (80028e0 <HAL_RCC_OscConfig+0x930>)
 800281a:	6a1b      	ldr	r3, [r3, #32]
 800281c:	4a30      	ldr	r2, [pc, #192]	; (80028e0 <HAL_RCC_OscConfig+0x930>)
 800281e:	f023 0304 	bic.w	r3, r3, #4
 8002822:	6213      	str	r3, [r2, #32]
 8002824:	e01d      	b.n	8002862 <HAL_RCC_OscConfig+0x8b2>
 8002826:	1d3b      	adds	r3, r7, #4
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	2b05      	cmp	r3, #5
 800282e:	d10c      	bne.n	800284a <HAL_RCC_OscConfig+0x89a>
 8002830:	4b2b      	ldr	r3, [pc, #172]	; (80028e0 <HAL_RCC_OscConfig+0x930>)
 8002832:	6a1b      	ldr	r3, [r3, #32]
 8002834:	4a2a      	ldr	r2, [pc, #168]	; (80028e0 <HAL_RCC_OscConfig+0x930>)
 8002836:	f043 0304 	orr.w	r3, r3, #4
 800283a:	6213      	str	r3, [r2, #32]
 800283c:	4b28      	ldr	r3, [pc, #160]	; (80028e0 <HAL_RCC_OscConfig+0x930>)
 800283e:	6a1b      	ldr	r3, [r3, #32]
 8002840:	4a27      	ldr	r2, [pc, #156]	; (80028e0 <HAL_RCC_OscConfig+0x930>)
 8002842:	f043 0301 	orr.w	r3, r3, #1
 8002846:	6213      	str	r3, [r2, #32]
 8002848:	e00b      	b.n	8002862 <HAL_RCC_OscConfig+0x8b2>
 800284a:	4b25      	ldr	r3, [pc, #148]	; (80028e0 <HAL_RCC_OscConfig+0x930>)
 800284c:	6a1b      	ldr	r3, [r3, #32]
 800284e:	4a24      	ldr	r2, [pc, #144]	; (80028e0 <HAL_RCC_OscConfig+0x930>)
 8002850:	f023 0301 	bic.w	r3, r3, #1
 8002854:	6213      	str	r3, [r2, #32]
 8002856:	4b22      	ldr	r3, [pc, #136]	; (80028e0 <HAL_RCC_OscConfig+0x930>)
 8002858:	6a1b      	ldr	r3, [r3, #32]
 800285a:	4a21      	ldr	r2, [pc, #132]	; (80028e0 <HAL_RCC_OscConfig+0x930>)
 800285c:	f023 0304 	bic.w	r3, r3, #4
 8002860:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002862:	1d3b      	adds	r3, r7, #4
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d06b      	beq.n	8002944 <HAL_RCC_OscConfig+0x994>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800286c:	f7fe faec 	bl	8000e48 <HAL_GetTick>
 8002870:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002874:	e00b      	b.n	800288e <HAL_RCC_OscConfig+0x8de>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002876:	f7fe fae7 	bl	8000e48 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002880:	1ad3      	subs	r3, r2, r3
 8002882:	f241 3288 	movw	r2, #5000	; 0x1388
 8002886:	4293      	cmp	r3, r2
 8002888:	d901      	bls.n	800288e <HAL_RCC_OscConfig+0x8de>
        {
          return HAL_TIMEOUT;
 800288a:	2303      	movs	r3, #3
 800288c:	e291      	b.n	8002db2 <HAL_RCC_OscConfig+0xe02>
 800288e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002892:	2202      	movs	r2, #2
 8002894:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002896:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	fa93 f2a3 	rbit	r2, r3
 80028a0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80028a4:	601a      	str	r2, [r3, #0]
 80028a6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80028aa:	2202      	movs	r2, #2
 80028ac:	601a      	str	r2, [r3, #0]
 80028ae:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	fa93 f2a3 	rbit	r2, r3
 80028b8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80028bc:	601a      	str	r2, [r3, #0]
  return result;
 80028be:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80028c2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028c4:	fab3 f383 	clz	r3, r3
 80028c8:	b2db      	uxtb	r3, r3
 80028ca:	095b      	lsrs	r3, r3, #5
 80028cc:	b2db      	uxtb	r3, r3
 80028ce:	f043 0302 	orr.w	r3, r3, #2
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	2b02      	cmp	r3, #2
 80028d6:	d109      	bne.n	80028ec <HAL_RCC_OscConfig+0x93c>
 80028d8:	4b01      	ldr	r3, [pc, #4]	; (80028e0 <HAL_RCC_OscConfig+0x930>)
 80028da:	6a1b      	ldr	r3, [r3, #32]
 80028dc:	e014      	b.n	8002908 <HAL_RCC_OscConfig+0x958>
 80028de:	bf00      	nop
 80028e0:	40021000 	.word	0x40021000
 80028e4:	10908120 	.word	0x10908120
 80028e8:	40007000 	.word	0x40007000
 80028ec:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80028f0:	2202      	movs	r2, #2
 80028f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f4:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	fa93 f2a3 	rbit	r2, r3
 80028fe:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8002902:	601a      	str	r2, [r3, #0]
 8002904:	4bbb      	ldr	r3, [pc, #748]	; (8002bf4 <HAL_RCC_OscConfig+0xc44>)
 8002906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002908:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800290c:	2102      	movs	r1, #2
 800290e:	6011      	str	r1, [r2, #0]
 8002910:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002914:	6812      	ldr	r2, [r2, #0]
 8002916:	fa92 f1a2 	rbit	r1, r2
 800291a:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 800291e:	6011      	str	r1, [r2, #0]
  return result;
 8002920:	f107 02a4 	add.w	r2, r7, #164	; 0xa4
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	fab2 f282 	clz	r2, r2
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	f002 021f 	and.w	r2, r2, #31
 8002936:	2101      	movs	r1, #1
 8002938:	fa01 f202 	lsl.w	r2, r1, r2
 800293c:	4013      	ands	r3, r2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d099      	beq.n	8002876 <HAL_RCC_OscConfig+0x8c6>
 8002942:	e063      	b.n	8002a0c <HAL_RCC_OscConfig+0xa5c>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002944:	f7fe fa80 	bl	8000e48 <HAL_GetTick>
 8002948:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800294c:	e00b      	b.n	8002966 <HAL_RCC_OscConfig+0x9b6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800294e:	f7fe fa7b 	bl	8000e48 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	; 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x9b6>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e225      	b.n	8002db2 <HAL_RCC_OscConfig+0xe02>
 8002966:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800296a:	2202      	movs	r2, #2
 800296c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800296e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	fa93 f2a3 	rbit	r2, r3
 8002978:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800297c:	601a      	str	r2, [r3, #0]
 800297e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002982:	2202      	movs	r2, #2
 8002984:	601a      	str	r2, [r3, #0]
 8002986:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	fa93 f2a3 	rbit	r2, r3
 8002990:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002994:	601a      	str	r2, [r3, #0]
  return result;
 8002996:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800299a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800299c:	fab3 f383 	clz	r3, r3
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	b2db      	uxtb	r3, r3
 80029a6:	f043 0302 	orr.w	r3, r3, #2
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b02      	cmp	r3, #2
 80029ae:	d102      	bne.n	80029b6 <HAL_RCC_OscConfig+0xa06>
 80029b0:	4b90      	ldr	r3, [pc, #576]	; (8002bf4 <HAL_RCC_OscConfig+0xc44>)
 80029b2:	6a1b      	ldr	r3, [r3, #32]
 80029b4:	e00d      	b.n	80029d2 <HAL_RCC_OscConfig+0xa22>
 80029b6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80029ba:	2202      	movs	r2, #2
 80029bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029be:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	fa93 f2a3 	rbit	r2, r3
 80029c8:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80029cc:	601a      	str	r2, [r3, #0]
 80029ce:	4b89      	ldr	r3, [pc, #548]	; (8002bf4 <HAL_RCC_OscConfig+0xc44>)
 80029d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029d2:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80029d6:	2102      	movs	r1, #2
 80029d8:	6011      	str	r1, [r2, #0]
 80029da:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80029de:	6812      	ldr	r2, [r2, #0]
 80029e0:	fa92 f1a2 	rbit	r1, r2
 80029e4:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80029e8:	6011      	str	r1, [r2, #0]
  return result;
 80029ea:	f107 0284 	add.w	r2, r7, #132	; 0x84
 80029ee:	6812      	ldr	r2, [r2, #0]
 80029f0:	fab2 f282 	clz	r2, r2
 80029f4:	b2d2      	uxtb	r2, r2
 80029f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80029fa:	b2d2      	uxtb	r2, r2
 80029fc:	f002 021f 	and.w	r2, r2, #31
 8002a00:	2101      	movs	r1, #1
 8002a02:	fa01 f202 	lsl.w	r2, r1, r2
 8002a06:	4013      	ands	r3, r2
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d1a0      	bne.n	800294e <HAL_RCC_OscConfig+0x99e>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002a0c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002a10:	2b01      	cmp	r3, #1
 8002a12:	d105      	bne.n	8002a20 <HAL_RCC_OscConfig+0xa70>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a14:	4b77      	ldr	r3, [pc, #476]	; (8002bf4 <HAL_RCC_OscConfig+0xc44>)
 8002a16:	69db      	ldr	r3, [r3, #28]
 8002a18:	4a76      	ldr	r2, [pc, #472]	; (8002bf4 <HAL_RCC_OscConfig+0xc44>)
 8002a1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a1e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002a20:	1d3b      	adds	r3, r7, #4
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	f000 81c2 	beq.w	8002db0 <HAL_RCC_OscConfig+0xe00>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a2c:	4b71      	ldr	r3, [pc, #452]	; (8002bf4 <HAL_RCC_OscConfig+0xc44>)
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 030c 	and.w	r3, r3, #12
 8002a34:	2b08      	cmp	r3, #8
 8002a36:	f000 819c 	beq.w	8002d72 <HAL_RCC_OscConfig+0xdc2>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a3a:	1d3b      	adds	r3, r7, #4
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	69db      	ldr	r3, [r3, #28]
 8002a40:	2b02      	cmp	r3, #2
 8002a42:	f040 8114 	bne.w	8002c6e <HAL_RCC_OscConfig+0xcbe>
 8002a46:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002a4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a4e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a50:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	fa93 f2a3 	rbit	r2, r3
 8002a5a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002a5e:	601a      	str	r2, [r3, #0]
  return result;
 8002a60:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002a64:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a66:	fab3 f383 	clz	r3, r3
 8002a6a:	b2db      	uxtb	r3, r3
 8002a6c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a70:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a74:	009b      	lsls	r3, r3, #2
 8002a76:	461a      	mov	r2, r3
 8002a78:	2300      	movs	r3, #0
 8002a7a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a7c:	f7fe f9e4 	bl	8000e48 <HAL_GetTick>
 8002a80:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a84:	e009      	b.n	8002a9a <HAL_RCC_OscConfig+0xaea>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a86:	f7fe f9df 	bl	8000e48 <HAL_GetTick>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0xaea>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e18b      	b.n	8002db2 <HAL_RCC_OscConfig+0xe02>
 8002a9a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002a9e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aa2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	fa93 f2a3 	rbit	r2, r3
 8002aae:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002ab2:	601a      	str	r2, [r3, #0]
  return result;
 8002ab4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002ab8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002aba:	fab3 f383 	clz	r3, r3
 8002abe:	b2db      	uxtb	r3, r3
 8002ac0:	095b      	lsrs	r3, r3, #5
 8002ac2:	b2db      	uxtb	r3, r3
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d102      	bne.n	8002ad4 <HAL_RCC_OscConfig+0xb24>
 8002ace:	4b49      	ldr	r3, [pc, #292]	; (8002bf4 <HAL_RCC_OscConfig+0xc44>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	e01b      	b.n	8002b0c <HAL_RCC_OscConfig+0xb5c>
 8002ad4:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002ad8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002adc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ade:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	fa93 f2a3 	rbit	r2, r3
 8002ae8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002aec:	601a      	str	r2, [r3, #0]
 8002aee:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002af2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002af6:	601a      	str	r2, [r3, #0]
 8002af8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	fa93 f2a3 	rbit	r2, r3
 8002b02:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8002b06:	601a      	str	r2, [r3, #0]
 8002b08:	4b3a      	ldr	r3, [pc, #232]	; (8002bf4 <HAL_RCC_OscConfig+0xc44>)
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002b10:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002b14:	6011      	str	r1, [r2, #0]
 8002b16:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002b1a:	6812      	ldr	r2, [r2, #0]
 8002b1c:	fa92 f1a2 	rbit	r1, r2
 8002b20:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002b24:	6011      	str	r1, [r2, #0]
  return result;
 8002b26:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8002b2a:	6812      	ldr	r2, [r2, #0]
 8002b2c:	fab2 f282 	clz	r2, r2
 8002b30:	b2d2      	uxtb	r2, r2
 8002b32:	f042 0220 	orr.w	r2, r2, #32
 8002b36:	b2d2      	uxtb	r2, r2
 8002b38:	f002 021f 	and.w	r2, r2, #31
 8002b3c:	2101      	movs	r1, #1
 8002b3e:	fa01 f202 	lsl.w	r2, r1, r2
 8002b42:	4013      	ands	r3, r2
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d19e      	bne.n	8002a86 <HAL_RCC_OscConfig+0xad6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b48:	4b2a      	ldr	r3, [pc, #168]	; (8002bf4 <HAL_RCC_OscConfig+0xc44>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b50:	1d3b      	adds	r3, r7, #4
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002b56:	1d3b      	adds	r3, r7, #4
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	6a1b      	ldr	r3, [r3, #32]
 8002b5c:	430b      	orrs	r3, r1
 8002b5e:	4925      	ldr	r1, [pc, #148]	; (8002bf4 <HAL_RCC_OscConfig+0xc44>)
 8002b60:	4313      	orrs	r3, r2
 8002b62:	604b      	str	r3, [r1, #4]
 8002b64:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002b6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b6e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	fa93 f2a3 	rbit	r2, r3
 8002b78:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b7c:	601a      	str	r2, [r3, #0]
  return result;
 8002b7e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002b82:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b84:	fab3 f383 	clz	r3, r3
 8002b88:	b2db      	uxtb	r3, r3
 8002b8a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002b8e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002b92:	009b      	lsls	r3, r3, #2
 8002b94:	461a      	mov	r2, r3
 8002b96:	2301      	movs	r3, #1
 8002b98:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b9a:	f7fe f955 	bl	8000e48 <HAL_GetTick>
 8002b9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ba2:	e009      	b.n	8002bb8 <HAL_RCC_OscConfig+0xc08>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba4:	f7fe f950 	bl	8000e48 <HAL_GetTick>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bae:	1ad3      	subs	r3, r2, r3
 8002bb0:	2b02      	cmp	r3, #2
 8002bb2:	d901      	bls.n	8002bb8 <HAL_RCC_OscConfig+0xc08>
          {
            return HAL_TIMEOUT;
 8002bb4:	2303      	movs	r3, #3
 8002bb6:	e0fc      	b.n	8002db2 <HAL_RCC_OscConfig+0xe02>
 8002bb8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002bbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	fa93 f2a3 	rbit	r2, r3
 8002bcc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002bd0:	601a      	str	r2, [r3, #0]
  return result;
 8002bd2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002bd6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bd8:	fab3 f383 	clz	r3, r3
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	f043 0301 	orr.w	r3, r3, #1
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d105      	bne.n	8002bf8 <HAL_RCC_OscConfig+0xc48>
 8002bec:	4b01      	ldr	r3, [pc, #4]	; (8002bf4 <HAL_RCC_OscConfig+0xc44>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	e01e      	b.n	8002c30 <HAL_RCC_OscConfig+0xc80>
 8002bf2:	bf00      	nop
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002bfc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c02:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	fa93 f2a3 	rbit	r2, r3
 8002c0c:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002c10:	601a      	str	r2, [r3, #0]
 8002c12:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c16:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	fa93 f2a3 	rbit	r2, r3
 8002c26:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002c2a:	601a      	str	r2, [r3, #0]
 8002c2c:	4b63      	ldr	r3, [pc, #396]	; (8002dbc <HAL_RCC_OscConfig+0xe0c>)
 8002c2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c30:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002c34:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002c38:	6011      	str	r1, [r2, #0]
 8002c3a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002c3e:	6812      	ldr	r2, [r2, #0]
 8002c40:	fa92 f1a2 	rbit	r1, r2
 8002c44:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002c48:	6011      	str	r1, [r2, #0]
  return result;
 8002c4a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8002c4e:	6812      	ldr	r2, [r2, #0]
 8002c50:	fab2 f282 	clz	r2, r2
 8002c54:	b2d2      	uxtb	r2, r2
 8002c56:	f042 0220 	orr.w	r2, r2, #32
 8002c5a:	b2d2      	uxtb	r2, r2
 8002c5c:	f002 021f 	and.w	r2, r2, #31
 8002c60:	2101      	movs	r1, #1
 8002c62:	fa01 f202 	lsl.w	r2, r1, r2
 8002c66:	4013      	ands	r3, r2
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d09b      	beq.n	8002ba4 <HAL_RCC_OscConfig+0xbf4>
 8002c6c:	e0a0      	b.n	8002db0 <HAL_RCC_OscConfig+0xe00>
 8002c6e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c72:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c76:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c78:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	fa93 f2a3 	rbit	r2, r3
 8002c82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c86:	601a      	str	r2, [r3, #0]
  return result;
 8002c88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002c8c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c8e:	fab3 f383 	clz	r3, r3
 8002c92:	b2db      	uxtb	r3, r3
 8002c94:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002c98:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	461a      	mov	r2, r3
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca4:	f7fe f8d0 	bl	8000e48 <HAL_GetTick>
 8002ca8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cac:	e009      	b.n	8002cc2 <HAL_RCC_OscConfig+0xd12>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cae:	f7fe f8cb 	bl	8000e48 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0xd12>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e077      	b.n	8002db2 <HAL_RCC_OscConfig+0xe02>
 8002cc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cc6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002cca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ccc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	fa93 f2a3 	rbit	r2, r3
 8002cd6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002cda:	601a      	str	r2, [r3, #0]
  return result;
 8002cdc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ce0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce2:	fab3 f383 	clz	r3, r3
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	095b      	lsrs	r3, r3, #5
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	f043 0301 	orr.w	r3, r3, #1
 8002cf0:	b2db      	uxtb	r3, r3
 8002cf2:	2b01      	cmp	r3, #1
 8002cf4:	d102      	bne.n	8002cfc <HAL_RCC_OscConfig+0xd4c>
 8002cf6:	4b31      	ldr	r3, [pc, #196]	; (8002dbc <HAL_RCC_OscConfig+0xe0c>)
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	e01b      	b.n	8002d34 <HAL_RCC_OscConfig+0xd84>
 8002cfc:	f107 0320 	add.w	r3, r7, #32
 8002d00:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d06:	f107 0320 	add.w	r3, r7, #32
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	fa93 f2a3 	rbit	r2, r3
 8002d10:	f107 031c 	add.w	r3, r7, #28
 8002d14:	601a      	str	r2, [r3, #0]
 8002d16:	f107 0318 	add.w	r3, r7, #24
 8002d1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002d1e:	601a      	str	r2, [r3, #0]
 8002d20:	f107 0318 	add.w	r3, r7, #24
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	fa93 f2a3 	rbit	r2, r3
 8002d2a:	f107 0314 	add.w	r3, r7, #20
 8002d2e:	601a      	str	r2, [r3, #0]
 8002d30:	4b22      	ldr	r3, [pc, #136]	; (8002dbc <HAL_RCC_OscConfig+0xe0c>)
 8002d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d34:	f107 0210 	add.w	r2, r7, #16
 8002d38:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002d3c:	6011      	str	r1, [r2, #0]
 8002d3e:	f107 0210 	add.w	r2, r7, #16
 8002d42:	6812      	ldr	r2, [r2, #0]
 8002d44:	fa92 f1a2 	rbit	r1, r2
 8002d48:	f107 020c 	add.w	r2, r7, #12
 8002d4c:	6011      	str	r1, [r2, #0]
  return result;
 8002d4e:	f107 020c 	add.w	r2, r7, #12
 8002d52:	6812      	ldr	r2, [r2, #0]
 8002d54:	fab2 f282 	clz	r2, r2
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	f042 0220 	orr.w	r2, r2, #32
 8002d5e:	b2d2      	uxtb	r2, r2
 8002d60:	f002 021f 	and.w	r2, r2, #31
 8002d64:	2101      	movs	r1, #1
 8002d66:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6a:	4013      	ands	r3, r2
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d19e      	bne.n	8002cae <HAL_RCC_OscConfig+0xcfe>
 8002d70:	e01e      	b.n	8002db0 <HAL_RCC_OscConfig+0xe00>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d72:	1d3b      	adds	r3, r7, #4
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	69db      	ldr	r3, [r3, #28]
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d101      	bne.n	8002d80 <HAL_RCC_OscConfig+0xdd0>
      {
        return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e018      	b.n	8002db2 <HAL_RCC_OscConfig+0xe02>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002d80:	4b0e      	ldr	r3, [pc, #56]	; (8002dbc <HAL_RCC_OscConfig+0xe0c>)
 8002d82:	685b      	ldr	r3, [r3, #4]
 8002d84:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002d88:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d8c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002d90:	1d3b      	adds	r3, r7, #4
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d108      	bne.n	8002dac <HAL_RCC_OscConfig+0xdfc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002d9a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002d9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002da2:	1d3b      	adds	r3, r7, #4
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d001      	beq.n	8002db0 <HAL_RCC_OscConfig+0xe00>
#endif
        {
          return HAL_ERROR;
 8002dac:	2301      	movs	r3, #1
 8002dae:	e000      	b.n	8002db2 <HAL_RCC_OscConfig+0xe02>
        }
      }
    }
  }

  return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40021000 	.word	0x40021000

08002dc0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b09e      	sub	sp, #120	; 0x78
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d101      	bne.n	8002dd8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e162      	b.n	800309e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002dd8:	4b90      	ldr	r3, [pc, #576]	; (800301c <HAL_RCC_ClockConfig+0x25c>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0307 	and.w	r3, r3, #7
 8002de0:	683a      	ldr	r2, [r7, #0]
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d910      	bls.n	8002e08 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002de6:	4b8d      	ldr	r3, [pc, #564]	; (800301c <HAL_RCC_ClockConfig+0x25c>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	f023 0207 	bic.w	r2, r3, #7
 8002dee:	498b      	ldr	r1, [pc, #556]	; (800301c <HAL_RCC_ClockConfig+0x25c>)
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002df6:	4b89      	ldr	r3, [pc, #548]	; (800301c <HAL_RCC_ClockConfig+0x25c>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	683a      	ldr	r2, [r7, #0]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d001      	beq.n	8002e08 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e04:	2301      	movs	r3, #1
 8002e06:	e14a      	b.n	800309e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f003 0302 	and.w	r3, r3, #2
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d008      	beq.n	8002e26 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e14:	4b82      	ldr	r3, [pc, #520]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	497f      	ldr	r1, [pc, #508]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002e22:	4313      	orrs	r3, r2
 8002e24:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f003 0301 	and.w	r3, r3, #1
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f000 80dc 	beq.w	8002fec <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d13c      	bne.n	8002eb6 <HAL_RCC_ClockConfig+0xf6>
 8002e3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e40:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002e44:	fa93 f3a3 	rbit	r3, r3
 8002e48:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002e4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e4c:	fab3 f383 	clz	r3, r3
 8002e50:	b2db      	uxtb	r3, r3
 8002e52:	095b      	lsrs	r3, r3, #5
 8002e54:	b2db      	uxtb	r3, r3
 8002e56:	f043 0301 	orr.w	r3, r3, #1
 8002e5a:	b2db      	uxtb	r3, r3
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d102      	bne.n	8002e66 <HAL_RCC_ClockConfig+0xa6>
 8002e60:	4b6f      	ldr	r3, [pc, #444]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	e00f      	b.n	8002e86 <HAL_RCC_ClockConfig+0xc6>
 8002e66:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e6a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002e6e:	fa93 f3a3 	rbit	r3, r3
 8002e72:	667b      	str	r3, [r7, #100]	; 0x64
 8002e74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002e78:	663b      	str	r3, [r7, #96]	; 0x60
 8002e7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002e7c:	fa93 f3a3 	rbit	r3, r3
 8002e80:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e82:	4b67      	ldr	r3, [pc, #412]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002e8a:	65ba      	str	r2, [r7, #88]	; 0x58
 8002e8c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002e8e:	fa92 f2a2 	rbit	r2, r2
 8002e92:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002e94:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002e96:	fab2 f282 	clz	r2, r2
 8002e9a:	b2d2      	uxtb	r2, r2
 8002e9c:	f042 0220 	orr.w	r2, r2, #32
 8002ea0:	b2d2      	uxtb	r2, r2
 8002ea2:	f002 021f 	and.w	r2, r2, #31
 8002ea6:	2101      	movs	r1, #1
 8002ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8002eac:	4013      	ands	r3, r2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d17b      	bne.n	8002faa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e0f3      	b.n	800309e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d13c      	bne.n	8002f38 <HAL_RCC_ClockConfig+0x178>
 8002ebe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002ec2:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ec4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec6:	fa93 f3a3 	rbit	r3, r3
 8002eca:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002ecc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ece:	fab3 f383 	clz	r3, r3
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	095b      	lsrs	r3, r3, #5
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	f043 0301 	orr.w	r3, r3, #1
 8002edc:	b2db      	uxtb	r3, r3
 8002ede:	2b01      	cmp	r3, #1
 8002ee0:	d102      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0x128>
 8002ee2:	4b4f      	ldr	r3, [pc, #316]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	e00f      	b.n	8002f08 <HAL_RCC_ClockConfig+0x148>
 8002ee8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002eec:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002ef0:	fa93 f3a3 	rbit	r3, r3
 8002ef4:	647b      	str	r3, [r7, #68]	; 0x44
 8002ef6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002efa:	643b      	str	r3, [r7, #64]	; 0x40
 8002efc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002efe:	fa93 f3a3 	rbit	r3, r3
 8002f02:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002f04:	4b46      	ldr	r3, [pc, #280]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f0c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002f0e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002f10:	fa92 f2a2 	rbit	r2, r2
 8002f14:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002f16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f18:	fab2 f282 	clz	r2, r2
 8002f1c:	b2d2      	uxtb	r2, r2
 8002f1e:	f042 0220 	orr.w	r2, r2, #32
 8002f22:	b2d2      	uxtb	r2, r2
 8002f24:	f002 021f 	and.w	r2, r2, #31
 8002f28:	2101      	movs	r1, #1
 8002f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8002f2e:	4013      	ands	r3, r2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d13a      	bne.n	8002faa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f34:	2301      	movs	r3, #1
 8002f36:	e0b2      	b.n	800309e <HAL_RCC_ClockConfig+0x2de>
 8002f38:	2302      	movs	r3, #2
 8002f3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f3e:	fa93 f3a3 	rbit	r3, r3
 8002f42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f46:	fab3 f383 	clz	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	095b      	lsrs	r3, r3, #5
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d102      	bne.n	8002f60 <HAL_RCC_ClockConfig+0x1a0>
 8002f5a:	4b31      	ldr	r3, [pc, #196]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	e00d      	b.n	8002f7c <HAL_RCC_ClockConfig+0x1bc>
 8002f60:	2302      	movs	r3, #2
 8002f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f66:	fa93 f3a3 	rbit	r3, r3
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	623b      	str	r3, [r7, #32]
 8002f70:	6a3b      	ldr	r3, [r7, #32]
 8002f72:	fa93 f3a3 	rbit	r3, r3
 8002f76:	61fb      	str	r3, [r7, #28]
 8002f78:	4b29      	ldr	r3, [pc, #164]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f7c:	2202      	movs	r2, #2
 8002f7e:	61ba      	str	r2, [r7, #24]
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	fa92 f2a2 	rbit	r2, r2
 8002f86:	617a      	str	r2, [r7, #20]
  return result;
 8002f88:	697a      	ldr	r2, [r7, #20]
 8002f8a:	fab2 f282 	clz	r2, r2
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	f042 0220 	orr.w	r2, r2, #32
 8002f94:	b2d2      	uxtb	r2, r2
 8002f96:	f002 021f 	and.w	r2, r2, #31
 8002f9a:	2101      	movs	r1, #1
 8002f9c:	fa01 f202 	lsl.w	r2, r1, r2
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d101      	bne.n	8002faa <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e079      	b.n	800309e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002faa:	4b1d      	ldr	r3, [pc, #116]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002fac:	685b      	ldr	r3, [r3, #4]
 8002fae:	f023 0203 	bic.w	r2, r3, #3
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	491a      	ldr	r1, [pc, #104]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002fbc:	f7fd ff44 	bl	8000e48 <HAL_GetTick>
 8002fc0:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fc2:	e00a      	b.n	8002fda <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fc4:	f7fd ff40 	bl	8000e48 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d901      	bls.n	8002fda <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002fd6:	2303      	movs	r3, #3
 8002fd8:	e061      	b.n	800309e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fda:	4b11      	ldr	r3, [pc, #68]	; (8003020 <HAL_RCC_ClockConfig+0x260>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f003 020c 	and.w	r2, r3, #12
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d1eb      	bne.n	8002fc4 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002fec:	4b0b      	ldr	r3, [pc, #44]	; (800301c <HAL_RCC_ClockConfig+0x25c>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d214      	bcs.n	8003024 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffa:	4b08      	ldr	r3, [pc, #32]	; (800301c <HAL_RCC_ClockConfig+0x25c>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f023 0207 	bic.w	r2, r3, #7
 8003002:	4906      	ldr	r1, [pc, #24]	; (800301c <HAL_RCC_ClockConfig+0x25c>)
 8003004:	683b      	ldr	r3, [r7, #0]
 8003006:	4313      	orrs	r3, r2
 8003008:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800300a:	4b04      	ldr	r3, [pc, #16]	; (800301c <HAL_RCC_ClockConfig+0x25c>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f003 0307 	and.w	r3, r3, #7
 8003012:	683a      	ldr	r2, [r7, #0]
 8003014:	429a      	cmp	r2, r3
 8003016:	d005      	beq.n	8003024 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8003018:	2301      	movs	r3, #1
 800301a:	e040      	b.n	800309e <HAL_RCC_ClockConfig+0x2de>
 800301c:	40022000 	.word	0x40022000
 8003020:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b00      	cmp	r3, #0
 800302e:	d008      	beq.n	8003042 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003030:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <HAL_RCC_ClockConfig+0x2e8>)
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	491a      	ldr	r1, [pc, #104]	; (80030a8 <HAL_RCC_ClockConfig+0x2e8>)
 800303e:	4313      	orrs	r3, r2
 8003040:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f003 0308 	and.w	r3, r3, #8
 800304a:	2b00      	cmp	r3, #0
 800304c:	d009      	beq.n	8003062 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800304e:	4b16      	ldr	r3, [pc, #88]	; (80030a8 <HAL_RCC_ClockConfig+0x2e8>)
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	691b      	ldr	r3, [r3, #16]
 800305a:	00db      	lsls	r3, r3, #3
 800305c:	4912      	ldr	r1, [pc, #72]	; (80030a8 <HAL_RCC_ClockConfig+0x2e8>)
 800305e:	4313      	orrs	r3, r2
 8003060:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003062:	f000 f829 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 8003066:	4601      	mov	r1, r0
 8003068:	4b0f      	ldr	r3, [pc, #60]	; (80030a8 <HAL_RCC_ClockConfig+0x2e8>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003070:	22f0      	movs	r2, #240	; 0xf0
 8003072:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003074:	693a      	ldr	r2, [r7, #16]
 8003076:	fa92 f2a2 	rbit	r2, r2
 800307a:	60fa      	str	r2, [r7, #12]
  return result;
 800307c:	68fa      	ldr	r2, [r7, #12]
 800307e:	fab2 f282 	clz	r2, r2
 8003082:	b2d2      	uxtb	r2, r2
 8003084:	40d3      	lsrs	r3, r2
 8003086:	4a09      	ldr	r2, [pc, #36]	; (80030ac <HAL_RCC_ClockConfig+0x2ec>)
 8003088:	5cd3      	ldrb	r3, [r2, r3]
 800308a:	fa21 f303 	lsr.w	r3, r1, r3
 800308e:	4a08      	ldr	r2, [pc, #32]	; (80030b0 <HAL_RCC_ClockConfig+0x2f0>)
 8003090:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003092:	4b08      	ldr	r3, [pc, #32]	; (80030b4 <HAL_RCC_ClockConfig+0x2f4>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f7fd fe92 	bl	8000dc0 <HAL_InitTick>
  
  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3778      	adds	r7, #120	; 0x78
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	40021000 	.word	0x40021000
 80030ac:	08004bcc 	.word	0x08004bcc
 80030b0:	20000010 	.word	0x20000010
 80030b4:	20000014 	.word	0x20000014

080030b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b08b      	sub	sp, #44	; 0x2c
 80030bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80030be:	2300      	movs	r3, #0
 80030c0:	61fb      	str	r3, [r7, #28]
 80030c2:	2300      	movs	r3, #0
 80030c4:	61bb      	str	r3, [r7, #24]
 80030c6:	2300      	movs	r3, #0
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
 80030ca:	2300      	movs	r3, #0
 80030cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80030ce:	2300      	movs	r3, #0
 80030d0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80030d2:	4b29      	ldr	r3, [pc, #164]	; (8003178 <HAL_RCC_GetSysClockFreq+0xc0>)
 80030d4:	685b      	ldr	r3, [r3, #4]
 80030d6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f003 030c 	and.w	r3, r3, #12
 80030de:	2b04      	cmp	r3, #4
 80030e0:	d002      	beq.n	80030e8 <HAL_RCC_GetSysClockFreq+0x30>
 80030e2:	2b08      	cmp	r3, #8
 80030e4:	d003      	beq.n	80030ee <HAL_RCC_GetSysClockFreq+0x36>
 80030e6:	e03c      	b.n	8003162 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80030e8:	4b24      	ldr	r3, [pc, #144]	; (800317c <HAL_RCC_GetSysClockFreq+0xc4>)
 80030ea:	623b      	str	r3, [r7, #32]
      break;
 80030ec:	e03c      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80030f4:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80030f8:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030fa:	68ba      	ldr	r2, [r7, #8]
 80030fc:	fa92 f2a2 	rbit	r2, r2
 8003100:	607a      	str	r2, [r7, #4]
  return result;
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	fab2 f282 	clz	r2, r2
 8003108:	b2d2      	uxtb	r2, r2
 800310a:	40d3      	lsrs	r3, r2
 800310c:	4a1c      	ldr	r2, [pc, #112]	; (8003180 <HAL_RCC_GetSysClockFreq+0xc8>)
 800310e:	5cd3      	ldrb	r3, [r2, r3]
 8003110:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003112:	4b19      	ldr	r3, [pc, #100]	; (8003178 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003116:	f003 030f 	and.w	r3, r3, #15
 800311a:	220f      	movs	r2, #15
 800311c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	fa92 f2a2 	rbit	r2, r2
 8003124:	60fa      	str	r2, [r7, #12]
  return result;
 8003126:	68fa      	ldr	r2, [r7, #12]
 8003128:	fab2 f282 	clz	r2, r2
 800312c:	b2d2      	uxtb	r2, r2
 800312e:	40d3      	lsrs	r3, r2
 8003130:	4a14      	ldr	r2, [pc, #80]	; (8003184 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003132:	5cd3      	ldrb	r3, [r2, r3]
 8003134:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800313c:	2b00      	cmp	r3, #0
 800313e:	d008      	beq.n	8003152 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003140:	4a0e      	ldr	r2, [pc, #56]	; (800317c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003142:	69bb      	ldr	r3, [r7, #24]
 8003144:	fbb2 f2f3 	udiv	r2, r2, r3
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	fb02 f303 	mul.w	r3, r2, r3
 800314e:	627b      	str	r3, [r7, #36]	; 0x24
 8003150:	e004      	b.n	800315c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	4a0c      	ldr	r2, [pc, #48]	; (8003188 <HAL_RCC_GetSysClockFreq+0xd0>)
 8003156:	fb02 f303 	mul.w	r3, r2, r3
 800315a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800315c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315e:	623b      	str	r3, [r7, #32]
      break;
 8003160:	e002      	b.n	8003168 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003162:	4b06      	ldr	r3, [pc, #24]	; (800317c <HAL_RCC_GetSysClockFreq+0xc4>)
 8003164:	623b      	str	r3, [r7, #32]
      break;
 8003166:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003168:	6a3b      	ldr	r3, [r7, #32]
}
 800316a:	4618      	mov	r0, r3
 800316c:	372c      	adds	r7, #44	; 0x2c
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr
 8003176:	bf00      	nop
 8003178:	40021000 	.word	0x40021000
 800317c:	007a1200 	.word	0x007a1200
 8003180:	08004be4 	.word	0x08004be4
 8003184:	08004bf4 	.word	0x08004bf4
 8003188:	003d0900 	.word	0x003d0900

0800318c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003190:	4b03      	ldr	r3, [pc, #12]	; (80031a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8003192:	681b      	ldr	r3, [r3, #0]
}
 8003194:	4618      	mov	r0, r3
 8003196:	46bd      	mov	sp, r7
 8003198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319c:	4770      	bx	lr
 800319e:	bf00      	nop
 80031a0:	20000010 	.word	0x20000010

080031a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80031aa:	f7ff ffef 	bl	800318c <HAL_RCC_GetHCLKFreq>
 80031ae:	4601      	mov	r1, r0
 80031b0:	4b0b      	ldr	r3, [pc, #44]	; (80031e0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80031b8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80031bc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031be:	687a      	ldr	r2, [r7, #4]
 80031c0:	fa92 f2a2 	rbit	r2, r2
 80031c4:	603a      	str	r2, [r7, #0]
  return result;
 80031c6:	683a      	ldr	r2, [r7, #0]
 80031c8:	fab2 f282 	clz	r2, r2
 80031cc:	b2d2      	uxtb	r2, r2
 80031ce:	40d3      	lsrs	r3, r2
 80031d0:	4a04      	ldr	r2, [pc, #16]	; (80031e4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80031d2:	5cd3      	ldrb	r3, [r2, r3]
 80031d4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80031d8:	4618      	mov	r0, r3
 80031da:	3708      	adds	r7, #8
 80031dc:	46bd      	mov	sp, r7
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	40021000 	.word	0x40021000
 80031e4:	08004bdc 	.word	0x08004bdc

080031e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80031ee:	f7ff ffcd 	bl	800318c <HAL_RCC_GetHCLKFreq>
 80031f2:	4601      	mov	r1, r0
 80031f4:	4b0b      	ldr	r3, [pc, #44]	; (8003224 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80031fc:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8003200:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	fa92 f2a2 	rbit	r2, r2
 8003208:	603a      	str	r2, [r7, #0]
  return result;
 800320a:	683a      	ldr	r2, [r7, #0]
 800320c:	fab2 f282 	clz	r2, r2
 8003210:	b2d2      	uxtb	r2, r2
 8003212:	40d3      	lsrs	r3, r2
 8003214:	4a04      	ldr	r2, [pc, #16]	; (8003228 <HAL_RCC_GetPCLK2Freq+0x40>)
 8003216:	5cd3      	ldrb	r3, [r2, r3]
 8003218:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800321c:	4618      	mov	r0, r3
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bd80      	pop	{r7, pc}
 8003224:	40021000 	.word	0x40021000
 8003228:	08004bdc 	.word	0x08004bdc

0800322c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b092      	sub	sp, #72	; 0x48
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003234:	2300      	movs	r3, #0
 8003236:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8003238:	2300      	movs	r3, #0
 800323a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800323c:	2300      	movs	r3, #0
 800323e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800324a:	2b00      	cmp	r3, #0
 800324c:	f000 80cd 	beq.w	80033ea <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003250:	4b8e      	ldr	r3, [pc, #568]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003252:	69db      	ldr	r3, [r3, #28]
 8003254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d10e      	bne.n	800327a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800325c:	4b8b      	ldr	r3, [pc, #556]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800325e:	69db      	ldr	r3, [r3, #28]
 8003260:	4a8a      	ldr	r2, [pc, #552]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003262:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003266:	61d3      	str	r3, [r2, #28]
 8003268:	4b88      	ldr	r3, [pc, #544]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800326a:	69db      	ldr	r3, [r3, #28]
 800326c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003270:	60bb      	str	r3, [r7, #8]
 8003272:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003274:	2301      	movs	r3, #1
 8003276:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800327a:	4b85      	ldr	r3, [pc, #532]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003282:	2b00      	cmp	r3, #0
 8003284:	d118      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003286:	4b82      	ldr	r3, [pc, #520]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a81      	ldr	r2, [pc, #516]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800328c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003290:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003292:	f7fd fdd9 	bl	8000e48 <HAL_GetTick>
 8003296:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003298:	e008      	b.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800329a:	f7fd fdd5 	bl	8000e48 <HAL_GetTick>
 800329e:	4602      	mov	r2, r0
 80032a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032a2:	1ad3      	subs	r3, r2, r3
 80032a4:	2b64      	cmp	r3, #100	; 0x64
 80032a6:	d901      	bls.n	80032ac <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80032a8:	2303      	movs	r3, #3
 80032aa:	e0ea      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x256>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032ac:	4b78      	ldr	r3, [pc, #480]	; (8003490 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d0f0      	beq.n	800329a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032b8:	4b74      	ldr	r3, [pc, #464]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032ba:	6a1b      	ldr	r3, [r3, #32]
 80032bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d07d      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d076      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032d6:	4b6d      	ldr	r3, [pc, #436]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80032e0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80032e4:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80032e8:	fa93 f3a3 	rbit	r3, r3
 80032ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80032ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032f0:	fab3 f383 	clz	r3, r3
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	461a      	mov	r2, r3
 80032f8:	4b66      	ldr	r3, [pc, #408]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80032fa:	4413      	add	r3, r2
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	461a      	mov	r2, r3
 8003300:	2301      	movs	r3, #1
 8003302:	6013      	str	r3, [r2, #0]
 8003304:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003308:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800330c:	fa93 f3a3 	rbit	r3, r3
 8003310:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003312:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003314:	fab3 f383 	clz	r3, r3
 8003318:	b2db      	uxtb	r3, r3
 800331a:	461a      	mov	r2, r3
 800331c:	4b5d      	ldr	r3, [pc, #372]	; (8003494 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800331e:	4413      	add	r3, r2
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	461a      	mov	r2, r3
 8003324:	2300      	movs	r3, #0
 8003326:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003328:	4a58      	ldr	r2, [pc, #352]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800332a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800332c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800332e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003330:	f003 0301 	and.w	r3, r3, #1
 8003334:	2b00      	cmp	r3, #0
 8003336:	d045      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7fd fd86 	bl	8000e48 <HAL_GetTick>
 800333c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800333e:	e00a      	b.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003340:	f7fd fd82 	bl	8000e48 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	f241 3288 	movw	r2, #5000	; 0x1388
 800334e:	4293      	cmp	r3, r2
 8003350:	d901      	bls.n	8003356 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e095      	b.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x256>
 8003356:	2302      	movs	r3, #2
 8003358:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800335a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800335c:	fa93 f3a3 	rbit	r3, r3
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
 8003362:	2302      	movs	r3, #2
 8003364:	623b      	str	r3, [r7, #32]
 8003366:	6a3b      	ldr	r3, [r7, #32]
 8003368:	fa93 f3a3 	rbit	r3, r3
 800336c:	61fb      	str	r3, [r7, #28]
  return result;
 800336e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003370:	fab3 f383 	clz	r3, r3
 8003374:	b2db      	uxtb	r3, r3
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	b2db      	uxtb	r3, r3
 800337a:	f043 0302 	orr.w	r3, r3, #2
 800337e:	b2db      	uxtb	r3, r3
 8003380:	2b02      	cmp	r3, #2
 8003382:	d102      	bne.n	800338a <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8003384:	4b41      	ldr	r3, [pc, #260]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003386:	6a1b      	ldr	r3, [r3, #32]
 8003388:	e007      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x16e>
 800338a:	2302      	movs	r3, #2
 800338c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	fa93 f3a3 	rbit	r3, r3
 8003394:	617b      	str	r3, [r7, #20]
 8003396:	4b3d      	ldr	r3, [pc, #244]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800339a:	2202      	movs	r2, #2
 800339c:	613a      	str	r2, [r7, #16]
 800339e:	693a      	ldr	r2, [r7, #16]
 80033a0:	fa92 f2a2 	rbit	r2, r2
 80033a4:	60fa      	str	r2, [r7, #12]
  return result;
 80033a6:	68fa      	ldr	r2, [r7, #12]
 80033a8:	fab2 f282 	clz	r2, r2
 80033ac:	b2d2      	uxtb	r2, r2
 80033ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	f002 021f 	and.w	r2, r2, #31
 80033b8:	2101      	movs	r1, #1
 80033ba:	fa01 f202 	lsl.w	r2, r1, r2
 80033be:	4013      	ands	r3, r2
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d0bd      	beq.n	8003340 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80033c4:	4b31      	ldr	r3, [pc, #196]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033c6:	6a1b      	ldr	r3, [r3, #32]
 80033c8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	492e      	ldr	r1, [pc, #184]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033d2:	4313      	orrs	r3, r2
 80033d4:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80033d6:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d105      	bne.n	80033ea <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033de:	4b2b      	ldr	r3, [pc, #172]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	4a2a      	ldr	r2, [pc, #168]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033e8:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f003 0301 	and.w	r3, r3, #1
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d008      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80033f6:	4b25      	ldr	r3, [pc, #148]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	f023 0203 	bic.w	r2, r3, #3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	4922      	ldr	r1, [pc, #136]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003404:	4313      	orrs	r3, r2
 8003406:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0320 	and.w	r3, r3, #32
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003414:	4b1d      	ldr	r3, [pc, #116]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003416:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003418:	f023 0210 	bic.w	r2, r3, #16
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	491a      	ldr	r1, [pc, #104]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003422:	4313      	orrs	r3, r2
 8003424:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800342e:	2b00      	cmp	r3, #0
 8003430:	d008      	beq.n	8003444 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003432:	4b16      	ldr	r3, [pc, #88]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003436:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	4913      	ldr	r1, [pc, #76]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003440:	4313      	orrs	r3, r2
 8003442:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d008      	beq.n	8003462 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003450:	4b0e      	ldr	r3, [pc, #56]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003454:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	695b      	ldr	r3, [r3, #20]
 800345c:	490b      	ldr	r1, [pc, #44]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800345e:	4313      	orrs	r3, r2
 8003460:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F301x8 || STM32F302x8 || STM32F318xx */

#if defined(STM32F334x8)

  /*------------------------------ HRTIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d008      	beq.n	8003480 <HAL_RCCEx_PeriphCLKConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));
    
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800346e:	4b07      	ldr	r3, [pc, #28]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003472:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	4904      	ldr	r1, [pc, #16]	; (800348c <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800347c:	4313      	orrs	r3, r2
 800347e:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3748      	adds	r7, #72	; 0x48
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	40021000 	.word	0x40021000
 8003490:	40007000 	.word	0x40007000
 8003494:	10908100 	.word	0x10908100

08003498 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b082      	sub	sp, #8
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d101      	bne.n	80034aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034a6:	2301      	movs	r3, #1
 80034a8:	e049      	b.n	800353e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d106      	bne.n	80034c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f7fd fb6c 	bl	8000b9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2202      	movs	r2, #2
 80034c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681a      	ldr	r2, [r3, #0]
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	3304      	adds	r3, #4
 80034d4:	4619      	mov	r1, r3
 80034d6:	4610      	mov	r0, r2
 80034d8:	f000 fb58 	bl	8003b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2201      	movs	r2, #1
 80034e0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2201      	movs	r2, #1
 80034e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2201      	movs	r2, #1
 80034f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2201      	movs	r2, #1
 80034f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2201      	movs	r2, #1
 8003500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2201      	movs	r2, #1
 8003520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2201      	movs	r2, #1
 8003538:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3708      	adds	r7, #8
 8003542:	46bd      	mov	sp, r7
 8003544:	bd80      	pop	{r7, pc}

08003546 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	b082      	sub	sp, #8
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d101      	bne.n	8003558 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e049      	b.n	80035ec <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	d106      	bne.n	8003572 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	f000 f841 	bl	80035f4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2202      	movs	r2, #2
 8003576:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	3304      	adds	r3, #4
 8003582:	4619      	mov	r1, r3
 8003584:	4610      	mov	r0, r2
 8003586:	f000 fb01 	bl	8003b8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2201      	movs	r2, #1
 800358e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2201      	movs	r2, #1
 800359e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2201      	movs	r2, #1
 80035a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2201      	movs	r2, #1
 80035b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2201      	movs	r2, #1
 80035be:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2201      	movs	r2, #1
 80035c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2201      	movs	r2, #1
 80035ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3708      	adds	r7, #8
 80035f0:	46bd      	mov	sp, r7
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80035fc:	bf00      	nop
 80035fe:	370c      	adds	r7, #12
 8003600:	46bd      	mov	sp, r7
 8003602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003606:	4770      	bx	lr

08003608 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
 8003610:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d109      	bne.n	800362c <HAL_TIM_PWM_Start+0x24>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b01      	cmp	r3, #1
 8003622:	bf14      	ite	ne
 8003624:	2301      	movne	r3, #1
 8003626:	2300      	moveq	r3, #0
 8003628:	b2db      	uxtb	r3, r3
 800362a:	e03c      	b.n	80036a6 <HAL_TIM_PWM_Start+0x9e>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2b04      	cmp	r3, #4
 8003630:	d109      	bne.n	8003646 <HAL_TIM_PWM_Start+0x3e>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003638:	b2db      	uxtb	r3, r3
 800363a:	2b01      	cmp	r3, #1
 800363c:	bf14      	ite	ne
 800363e:	2301      	movne	r3, #1
 8003640:	2300      	moveq	r3, #0
 8003642:	b2db      	uxtb	r3, r3
 8003644:	e02f      	b.n	80036a6 <HAL_TIM_PWM_Start+0x9e>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	2b08      	cmp	r3, #8
 800364a:	d109      	bne.n	8003660 <HAL_TIM_PWM_Start+0x58>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003652:	b2db      	uxtb	r3, r3
 8003654:	2b01      	cmp	r3, #1
 8003656:	bf14      	ite	ne
 8003658:	2301      	movne	r3, #1
 800365a:	2300      	moveq	r3, #0
 800365c:	b2db      	uxtb	r3, r3
 800365e:	e022      	b.n	80036a6 <HAL_TIM_PWM_Start+0x9e>
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	2b0c      	cmp	r3, #12
 8003664:	d109      	bne.n	800367a <HAL_TIM_PWM_Start+0x72>
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800366c:	b2db      	uxtb	r3, r3
 800366e:	2b01      	cmp	r3, #1
 8003670:	bf14      	ite	ne
 8003672:	2301      	movne	r3, #1
 8003674:	2300      	moveq	r3, #0
 8003676:	b2db      	uxtb	r3, r3
 8003678:	e015      	b.n	80036a6 <HAL_TIM_PWM_Start+0x9e>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b10      	cmp	r3, #16
 800367e:	d109      	bne.n	8003694 <HAL_TIM_PWM_Start+0x8c>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003686:	b2db      	uxtb	r3, r3
 8003688:	2b01      	cmp	r3, #1
 800368a:	bf14      	ite	ne
 800368c:	2301      	movne	r3, #1
 800368e:	2300      	moveq	r3, #0
 8003690:	b2db      	uxtb	r3, r3
 8003692:	e008      	b.n	80036a6 <HAL_TIM_PWM_Start+0x9e>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800369a:	b2db      	uxtb	r3, r3
 800369c:	2b01      	cmp	r3, #1
 800369e:	bf14      	ite	ne
 80036a0:	2301      	movne	r3, #1
 80036a2:	2300      	moveq	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d001      	beq.n	80036ae <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e088      	b.n	80037c0 <HAL_TIM_PWM_Start+0x1b8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d104      	bne.n	80036be <HAL_TIM_PWM_Start+0xb6>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2202      	movs	r2, #2
 80036b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80036bc:	e023      	b.n	8003706 <HAL_TIM_PWM_Start+0xfe>
 80036be:	683b      	ldr	r3, [r7, #0]
 80036c0:	2b04      	cmp	r3, #4
 80036c2:	d104      	bne.n	80036ce <HAL_TIM_PWM_Start+0xc6>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2202      	movs	r2, #2
 80036c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80036cc:	e01b      	b.n	8003706 <HAL_TIM_PWM_Start+0xfe>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	2b08      	cmp	r3, #8
 80036d2:	d104      	bne.n	80036de <HAL_TIM_PWM_Start+0xd6>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2202      	movs	r2, #2
 80036d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036dc:	e013      	b.n	8003706 <HAL_TIM_PWM_Start+0xfe>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	2b0c      	cmp	r3, #12
 80036e2:	d104      	bne.n	80036ee <HAL_TIM_PWM_Start+0xe6>
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2202      	movs	r2, #2
 80036e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80036ec:	e00b      	b.n	8003706 <HAL_TIM_PWM_Start+0xfe>
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	2b10      	cmp	r3, #16
 80036f2:	d104      	bne.n	80036fe <HAL_TIM_PWM_Start+0xf6>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036fc:	e003      	b.n	8003706 <HAL_TIM_PWM_Start+0xfe>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2202      	movs	r2, #2
 8003702:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2201      	movs	r2, #1
 800370c:	6839      	ldr	r1, [r7, #0]
 800370e:	4618      	mov	r0, r3
 8003710:	f000 fdf4 	bl	80042fc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4a2b      	ldr	r2, [pc, #172]	; (80037c8 <HAL_TIM_PWM_Start+0x1c0>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d00e      	beq.n	800373c <HAL_TIM_PWM_Start+0x134>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	4a2a      	ldr	r2, [pc, #168]	; (80037cc <HAL_TIM_PWM_Start+0x1c4>)
 8003724:	4293      	cmp	r3, r2
 8003726:	d009      	beq.n	800373c <HAL_TIM_PWM_Start+0x134>
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	4a28      	ldr	r2, [pc, #160]	; (80037d0 <HAL_TIM_PWM_Start+0x1c8>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d004      	beq.n	800373c <HAL_TIM_PWM_Start+0x134>
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4a27      	ldr	r2, [pc, #156]	; (80037d4 <HAL_TIM_PWM_Start+0x1cc>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d101      	bne.n	8003740 <HAL_TIM_PWM_Start+0x138>
 800373c:	2301      	movs	r3, #1
 800373e:	e000      	b.n	8003742 <HAL_TIM_PWM_Start+0x13a>
 8003740:	2300      	movs	r3, #0
 8003742:	2b00      	cmp	r3, #0
 8003744:	d007      	beq.n	8003756 <HAL_TIM_PWM_Start+0x14e>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003754:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a1b      	ldr	r2, [pc, #108]	; (80037c8 <HAL_TIM_PWM_Start+0x1c0>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d00e      	beq.n	800377e <HAL_TIM_PWM_Start+0x176>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003768:	d009      	beq.n	800377e <HAL_TIM_PWM_Start+0x176>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	4a1a      	ldr	r2, [pc, #104]	; (80037d8 <HAL_TIM_PWM_Start+0x1d0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d004      	beq.n	800377e <HAL_TIM_PWM_Start+0x176>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a14      	ldr	r2, [pc, #80]	; (80037cc <HAL_TIM_PWM_Start+0x1c4>)
 800377a:	4293      	cmp	r3, r2
 800377c:	d115      	bne.n	80037aa <HAL_TIM_PWM_Start+0x1a2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689a      	ldr	r2, [r3, #8]
 8003784:	4b15      	ldr	r3, [pc, #84]	; (80037dc <HAL_TIM_PWM_Start+0x1d4>)
 8003786:	4013      	ands	r3, r2
 8003788:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2b06      	cmp	r3, #6
 800378e:	d015      	beq.n	80037bc <HAL_TIM_PWM_Start+0x1b4>
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003796:	d011      	beq.n	80037bc <HAL_TIM_PWM_Start+0x1b4>
    {
      __HAL_TIM_ENABLE(htim);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f042 0201 	orr.w	r2, r2, #1
 80037a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037a8:	e008      	b.n	80037bc <HAL_TIM_PWM_Start+0x1b4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f042 0201 	orr.w	r2, r2, #1
 80037b8:	601a      	str	r2, [r3, #0]
 80037ba:	e000      	b.n	80037be <HAL_TIM_PWM_Start+0x1b6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80037bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80037be:	2300      	movs	r3, #0
}
 80037c0:	4618      	mov	r0, r3
 80037c2:	3710      	adds	r7, #16
 80037c4:	46bd      	mov	sp, r7
 80037c6:	bd80      	pop	{r7, pc}
 80037c8:	40012c00 	.word	0x40012c00
 80037cc:	40014000 	.word	0x40014000
 80037d0:	40014400 	.word	0x40014400
 80037d4:	40014800 	.word	0x40014800
 80037d8:	40000400 	.word	0x40000400
 80037dc:	00010007 	.word	0x00010007

080037e0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	60f8      	str	r0, [r7, #12]
 80037e8:	60b9      	str	r1, [r7, #8]
 80037ea:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d101      	bne.n	80037fa <HAL_TIM_PWM_ConfigChannel+0x1a>
 80037f6:	2302      	movs	r3, #2
 80037f8:	e0fd      	b.n	80039f6 <HAL_TIM_PWM_ConfigChannel+0x216>
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2201      	movs	r2, #1
 80037fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2b14      	cmp	r3, #20
 8003806:	f200 80f0 	bhi.w	80039ea <HAL_TIM_PWM_ConfigChannel+0x20a>
 800380a:	a201      	add	r2, pc, #4	; (adr r2, 8003810 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800380c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003810:	08003865 	.word	0x08003865
 8003814:	080039eb 	.word	0x080039eb
 8003818:	080039eb 	.word	0x080039eb
 800381c:	080039eb 	.word	0x080039eb
 8003820:	080038a5 	.word	0x080038a5
 8003824:	080039eb 	.word	0x080039eb
 8003828:	080039eb 	.word	0x080039eb
 800382c:	080039eb 	.word	0x080039eb
 8003830:	080038e7 	.word	0x080038e7
 8003834:	080039eb 	.word	0x080039eb
 8003838:	080039eb 	.word	0x080039eb
 800383c:	080039eb 	.word	0x080039eb
 8003840:	08003927 	.word	0x08003927
 8003844:	080039eb 	.word	0x080039eb
 8003848:	080039eb 	.word	0x080039eb
 800384c:	080039eb 	.word	0x080039eb
 8003850:	08003969 	.word	0x08003969
 8003854:	080039eb 	.word	0x080039eb
 8003858:	080039eb 	.word	0x080039eb
 800385c:	080039eb 	.word	0x080039eb
 8003860:	080039a9 	.word	0x080039a9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68b9      	ldr	r1, [r7, #8]
 800386a:	4618      	mov	r0, r3
 800386c:	f000 fa06 	bl	8003c7c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	699a      	ldr	r2, [r3, #24]
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f042 0208 	orr.w	r2, r2, #8
 800387e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f022 0204 	bic.w	r2, r2, #4
 800388e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6999      	ldr	r1, [r3, #24]
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	691a      	ldr	r2, [r3, #16]
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	430a      	orrs	r2, r1
 80038a0:	619a      	str	r2, [r3, #24]
      break;
 80038a2:	e0a3      	b.n	80039ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68b9      	ldr	r1, [r7, #8]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fa6c 	bl	8003d88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699a      	ldr	r2, [r3, #24]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699a      	ldr	r2, [r3, #24]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80038ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6999      	ldr	r1, [r3, #24]
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	021a      	lsls	r2, r3, #8
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	430a      	orrs	r2, r1
 80038e2:	619a      	str	r2, [r3, #24]
      break;
 80038e4:	e082      	b.n	80039ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	68b9      	ldr	r1, [r7, #8]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f000 facb 	bl	8003e88 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	69da      	ldr	r2, [r3, #28]
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f042 0208 	orr.w	r2, r2, #8
 8003900:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	69da      	ldr	r2, [r3, #28]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0204 	bic.w	r2, r2, #4
 8003910:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	69d9      	ldr	r1, [r3, #28]
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	691a      	ldr	r2, [r3, #16]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	61da      	str	r2, [r3, #28]
      break;
 8003924:	e062      	b.n	80039ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68b9      	ldr	r1, [r7, #8]
 800392c:	4618      	mov	r0, r3
 800392e:	f000 fb29 	bl	8003f84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69da      	ldr	r2, [r3, #28]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	69da      	ldr	r2, [r3, #28]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	69d9      	ldr	r1, [r3, #28]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	691b      	ldr	r3, [r3, #16]
 800395c:	021a      	lsls	r2, r3, #8
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	430a      	orrs	r2, r1
 8003964:	61da      	str	r2, [r3, #28]
      break;
 8003966:	e041      	b.n	80039ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	68b9      	ldr	r1, [r7, #8]
 800396e:	4618      	mov	r0, r3
 8003970:	f000 fb6c 	bl	800404c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f042 0208 	orr.w	r2, r2, #8
 8003982:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f022 0204 	bic.w	r2, r2, #4
 8003992:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	691a      	ldr	r2, [r3, #16]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80039a6:	e021      	b.n	80039ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68b9      	ldr	r1, [r7, #8]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fbaa 	bl	8004108 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80039c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80039d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	691b      	ldr	r3, [r3, #16]
 80039de:	021a      	lsls	r2, r3, #8
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	430a      	orrs	r2, r1
 80039e6:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80039e8:	e000      	b.n	80039ec <HAL_TIM_PWM_ConfigChannel+0x20c>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 80039ea:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	2200      	movs	r2, #0
 80039f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80039f4:	2300      	movs	r3, #0
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3710      	adds	r7, #16
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop

08003a00 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b084      	sub	sp, #16
 8003a04:	af00      	add	r7, sp, #0
 8003a06:	6078      	str	r0, [r7, #4]
 8003a08:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d101      	bne.n	8003a18 <HAL_TIM_ConfigClockSource+0x18>
 8003a14:	2302      	movs	r3, #2
 8003a16:	e0b5      	b.n	8003b84 <HAL_TIM_ConfigClockSource+0x184>
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a36:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003a3a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a42:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	68fa      	ldr	r2, [r7, #12]
 8003a4a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a54:	d03e      	beq.n	8003ad4 <HAL_TIM_ConfigClockSource+0xd4>
 8003a56:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a5a:	f200 8087 	bhi.w	8003b6c <HAL_TIM_ConfigClockSource+0x16c>
 8003a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a62:	f000 8085 	beq.w	8003b70 <HAL_TIM_ConfigClockSource+0x170>
 8003a66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a6a:	d87f      	bhi.n	8003b6c <HAL_TIM_ConfigClockSource+0x16c>
 8003a6c:	2b70      	cmp	r3, #112	; 0x70
 8003a6e:	d01a      	beq.n	8003aa6 <HAL_TIM_ConfigClockSource+0xa6>
 8003a70:	2b70      	cmp	r3, #112	; 0x70
 8003a72:	d87b      	bhi.n	8003b6c <HAL_TIM_ConfigClockSource+0x16c>
 8003a74:	2b60      	cmp	r3, #96	; 0x60
 8003a76:	d050      	beq.n	8003b1a <HAL_TIM_ConfigClockSource+0x11a>
 8003a78:	2b60      	cmp	r3, #96	; 0x60
 8003a7a:	d877      	bhi.n	8003b6c <HAL_TIM_ConfigClockSource+0x16c>
 8003a7c:	2b50      	cmp	r3, #80	; 0x50
 8003a7e:	d03c      	beq.n	8003afa <HAL_TIM_ConfigClockSource+0xfa>
 8003a80:	2b50      	cmp	r3, #80	; 0x50
 8003a82:	d873      	bhi.n	8003b6c <HAL_TIM_ConfigClockSource+0x16c>
 8003a84:	2b40      	cmp	r3, #64	; 0x40
 8003a86:	d058      	beq.n	8003b3a <HAL_TIM_ConfigClockSource+0x13a>
 8003a88:	2b40      	cmp	r3, #64	; 0x40
 8003a8a:	d86f      	bhi.n	8003b6c <HAL_TIM_ConfigClockSource+0x16c>
 8003a8c:	2b30      	cmp	r3, #48	; 0x30
 8003a8e:	d064      	beq.n	8003b5a <HAL_TIM_ConfigClockSource+0x15a>
 8003a90:	2b30      	cmp	r3, #48	; 0x30
 8003a92:	d86b      	bhi.n	8003b6c <HAL_TIM_ConfigClockSource+0x16c>
 8003a94:	2b20      	cmp	r3, #32
 8003a96:	d060      	beq.n	8003b5a <HAL_TIM_ConfigClockSource+0x15a>
 8003a98:	2b20      	cmp	r3, #32
 8003a9a:	d867      	bhi.n	8003b6c <HAL_TIM_ConfigClockSource+0x16c>
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d05c      	beq.n	8003b5a <HAL_TIM_ConfigClockSource+0x15a>
 8003aa0:	2b10      	cmp	r3, #16
 8003aa2:	d05a      	beq.n	8003b5a <HAL_TIM_ConfigClockSource+0x15a>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003aa4:	e062      	b.n	8003b6c <HAL_TIM_ConfigClockSource+0x16c>
      TIM_ETR_SetConfig(htim->Instance,
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	6818      	ldr	r0, [r3, #0]
 8003aaa:	683b      	ldr	r3, [r7, #0]
 8003aac:	6899      	ldr	r1, [r3, #8]
 8003aae:	683b      	ldr	r3, [r7, #0]
 8003ab0:	685a      	ldr	r2, [r3, #4]
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	68db      	ldr	r3, [r3, #12]
 8003ab6:	f000 fc01 	bl	80042bc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ac8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68fa      	ldr	r2, [r7, #12]
 8003ad0:	609a      	str	r2, [r3, #8]
      break;
 8003ad2:	e04e      	b.n	8003b72 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ETR_SetConfig(htim->Instance,
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	6818      	ldr	r0, [r3, #0]
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	6899      	ldr	r1, [r3, #8]
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	685a      	ldr	r2, [r3, #4]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	f000 fbea 	bl	80042bc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	689a      	ldr	r2, [r3, #8]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003af6:	609a      	str	r2, [r3, #8]
      break;
 8003af8:	e03b      	b.n	8003b72 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	6818      	ldr	r0, [r3, #0]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	6859      	ldr	r1, [r3, #4]
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	68db      	ldr	r3, [r3, #12]
 8003b06:	461a      	mov	r2, r3
 8003b08:	f000 fb5e 	bl	80041c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	2150      	movs	r1, #80	; 0x50
 8003b12:	4618      	mov	r0, r3
 8003b14:	f000 fbb7 	bl	8004286 <TIM_ITRx_SetConfig>
      break;
 8003b18:	e02b      	b.n	8003b72 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6818      	ldr	r0, [r3, #0]
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	6859      	ldr	r1, [r3, #4]
 8003b22:	683b      	ldr	r3, [r7, #0]
 8003b24:	68db      	ldr	r3, [r3, #12]
 8003b26:	461a      	mov	r2, r3
 8003b28:	f000 fb7d 	bl	8004226 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	2160      	movs	r1, #96	; 0x60
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 fba7 	bl	8004286 <TIM_ITRx_SetConfig>
      break;
 8003b38:	e01b      	b.n	8003b72 <HAL_TIM_ConfigClockSource+0x172>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6818      	ldr	r0, [r3, #0]
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	6859      	ldr	r1, [r3, #4]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	68db      	ldr	r3, [r3, #12]
 8003b46:	461a      	mov	r2, r3
 8003b48:	f000 fb3e 	bl	80041c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	2140      	movs	r1, #64	; 0x40
 8003b52:	4618      	mov	r0, r3
 8003b54:	f000 fb97 	bl	8004286 <TIM_ITRx_SetConfig>
      break;
 8003b58:	e00b      	b.n	8003b72 <HAL_TIM_ConfigClockSource+0x172>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681a      	ldr	r2, [r3, #0]
 8003b5e:	683b      	ldr	r3, [r7, #0]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4619      	mov	r1, r3
 8003b64:	4610      	mov	r0, r2
 8003b66:	f000 fb8e 	bl	8004286 <TIM_ITRx_SetConfig>
        break;
 8003b6a:	e002      	b.n	8003b72 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003b6c:	bf00      	nop
 8003b6e:	e000      	b.n	8003b72 <HAL_TIM_ConfigClockSource+0x172>
      break;
 8003b70:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2201      	movs	r2, #1
 8003b76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	2200      	movs	r2, #0
 8003b7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b82:	2300      	movs	r3, #0
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b085      	sub	sp, #20
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	4a32      	ldr	r2, [pc, #200]	; (8003c68 <TIM_Base_SetConfig+0xdc>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d007      	beq.n	8003bb4 <TIM_Base_SetConfig+0x28>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003baa:	d003      	beq.n	8003bb4 <TIM_Base_SetConfig+0x28>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a2f      	ldr	r2, [pc, #188]	; (8003c6c <TIM_Base_SetConfig+0xe0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d108      	bne.n	8003bc6 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	68fa      	ldr	r2, [r7, #12]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	4a27      	ldr	r2, [pc, #156]	; (8003c68 <TIM_Base_SetConfig+0xdc>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d013      	beq.n	8003bf6 <TIM_Base_SetConfig+0x6a>
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bd4:	d00f      	beq.n	8003bf6 <TIM_Base_SetConfig+0x6a>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	4a24      	ldr	r2, [pc, #144]	; (8003c6c <TIM_Base_SetConfig+0xe0>)
 8003bda:	4293      	cmp	r3, r2
 8003bdc:	d00b      	beq.n	8003bf6 <TIM_Base_SetConfig+0x6a>
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	4a23      	ldr	r2, [pc, #140]	; (8003c70 <TIM_Base_SetConfig+0xe4>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d007      	beq.n	8003bf6 <TIM_Base_SetConfig+0x6a>
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	4a22      	ldr	r2, [pc, #136]	; (8003c74 <TIM_Base_SetConfig+0xe8>)
 8003bea:	4293      	cmp	r3, r2
 8003bec:	d003      	beq.n	8003bf6 <TIM_Base_SetConfig+0x6a>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a21      	ldr	r2, [pc, #132]	; (8003c78 <TIM_Base_SetConfig+0xec>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d108      	bne.n	8003c08 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	68fa      	ldr	r2, [r7, #12]
 8003c1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	689a      	ldr	r2, [r3, #8]
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681a      	ldr	r2, [r3, #0]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a0e      	ldr	r2, [pc, #56]	; (8003c68 <TIM_Base_SetConfig+0xdc>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d00b      	beq.n	8003c4c <TIM_Base_SetConfig+0xc0>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	4a0e      	ldr	r2, [pc, #56]	; (8003c70 <TIM_Base_SetConfig+0xe4>)
 8003c38:	4293      	cmp	r3, r2
 8003c3a:	d007      	beq.n	8003c4c <TIM_Base_SetConfig+0xc0>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	4a0d      	ldr	r2, [pc, #52]	; (8003c74 <TIM_Base_SetConfig+0xe8>)
 8003c40:	4293      	cmp	r3, r2
 8003c42:	d003      	beq.n	8003c4c <TIM_Base_SetConfig+0xc0>
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	4a0c      	ldr	r2, [pc, #48]	; (8003c78 <TIM_Base_SetConfig+0xec>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d103      	bne.n	8003c54 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003c4c:	683b      	ldr	r3, [r7, #0]
 8003c4e:	691a      	ldr	r2, [r3, #16]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	615a      	str	r2, [r3, #20]
}
 8003c5a:	bf00      	nop
 8003c5c:	3714      	adds	r7, #20
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	40012c00 	.word	0x40012c00
 8003c6c:	40000400 	.word	0x40000400
 8003c70:	40014000 	.word	0x40014000
 8003c74:	40014400 	.word	0x40014400
 8003c78:	40014800 	.word	0x40014800

08003c7c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b087      	sub	sp, #28
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
 8003c84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6a1b      	ldr	r3, [r3, #32]
 8003c8a:	f023 0201 	bic.w	r2, r3, #1
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	699b      	ldr	r3, [r3, #24]
 8003ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003caa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003cae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	f023 0303 	bic.w	r3, r3, #3
 8003cb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	68fa      	ldr	r2, [r7, #12]
 8003cbe:	4313      	orrs	r3, r2
 8003cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	f023 0302 	bic.w	r3, r3, #2
 8003cc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	4a28      	ldr	r2, [pc, #160]	; (8003d78 <TIM_OC1_SetConfig+0xfc>)
 8003cd8:	4293      	cmp	r3, r2
 8003cda:	d00b      	beq.n	8003cf4 <TIM_OC1_SetConfig+0x78>
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	4a27      	ldr	r2, [pc, #156]	; (8003d7c <TIM_OC1_SetConfig+0x100>)
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d007      	beq.n	8003cf4 <TIM_OC1_SetConfig+0x78>
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	4a26      	ldr	r2, [pc, #152]	; (8003d80 <TIM_OC1_SetConfig+0x104>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d003      	beq.n	8003cf4 <TIM_OC1_SetConfig+0x78>
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	4a25      	ldr	r2, [pc, #148]	; (8003d84 <TIM_OC1_SetConfig+0x108>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d10c      	bne.n	8003d0e <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	f023 0308 	bic.w	r3, r3, #8
 8003cfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	697a      	ldr	r2, [r7, #20]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	f023 0304 	bic.w	r3, r3, #4
 8003d0c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	4a19      	ldr	r2, [pc, #100]	; (8003d78 <TIM_OC1_SetConfig+0xfc>)
 8003d12:	4293      	cmp	r3, r2
 8003d14:	d00b      	beq.n	8003d2e <TIM_OC1_SetConfig+0xb2>
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a18      	ldr	r2, [pc, #96]	; (8003d7c <TIM_OC1_SetConfig+0x100>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d007      	beq.n	8003d2e <TIM_OC1_SetConfig+0xb2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a17      	ldr	r2, [pc, #92]	; (8003d80 <TIM_OC1_SetConfig+0x104>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d003      	beq.n	8003d2e <TIM_OC1_SetConfig+0xb2>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a16      	ldr	r2, [pc, #88]	; (8003d84 <TIM_OC1_SetConfig+0x108>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d111      	bne.n	8003d52 <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003d34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003d3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	695b      	ldr	r3, [r3, #20]
 8003d42:	693a      	ldr	r2, [r7, #16]
 8003d44:	4313      	orrs	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003d48:	683b      	ldr	r3, [r7, #0]
 8003d4a:	699b      	ldr	r3, [r3, #24]
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	693a      	ldr	r2, [r7, #16]
 8003d56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	68fa      	ldr	r2, [r7, #12]
 8003d5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003d5e:	683b      	ldr	r3, [r7, #0]
 8003d60:	685a      	ldr	r2, [r3, #4]
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	697a      	ldr	r2, [r7, #20]
 8003d6a:	621a      	str	r2, [r3, #32]
}
 8003d6c:	bf00      	nop
 8003d6e:	371c      	adds	r7, #28
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	40012c00 	.word	0x40012c00
 8003d7c:	40014000 	.word	0x40014000
 8003d80:	40014400 	.word	0x40014400
 8003d84:	40014800 	.word	0x40014800

08003d88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003d88:	b480      	push	{r7}
 8003d8a:	b087      	sub	sp, #28
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	f023 0210 	bic.w	r2, r3, #16
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6a1b      	ldr	r3, [r3, #32]
 8003da2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	699b      	ldr	r3, [r3, #24]
 8003dae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003db6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003dba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003dc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	021b      	lsls	r3, r3, #8
 8003dca:	68fa      	ldr	r2, [r7, #12]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f023 0320 	bic.w	r3, r3, #32
 8003dd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	689b      	ldr	r3, [r3, #8]
 8003ddc:	011b      	lsls	r3, r3, #4
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	4a24      	ldr	r2, [pc, #144]	; (8003e78 <TIM_OC2_SetConfig+0xf0>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d10d      	bne.n	8003e08 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003dec:	697b      	ldr	r3, [r7, #20]
 8003dee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003df2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	011b      	lsls	r3, r3, #4
 8003dfa:	697a      	ldr	r2, [r7, #20]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e06:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	4a1b      	ldr	r2, [pc, #108]	; (8003e78 <TIM_OC2_SetConfig+0xf0>)
 8003e0c:	4293      	cmp	r3, r2
 8003e0e:	d00b      	beq.n	8003e28 <TIM_OC2_SetConfig+0xa0>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a1a      	ldr	r2, [pc, #104]	; (8003e7c <TIM_OC2_SetConfig+0xf4>)
 8003e14:	4293      	cmp	r3, r2
 8003e16:	d007      	beq.n	8003e28 <TIM_OC2_SetConfig+0xa0>
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	4a19      	ldr	r2, [pc, #100]	; (8003e80 <TIM_OC2_SetConfig+0xf8>)
 8003e1c:	4293      	cmp	r3, r2
 8003e1e:	d003      	beq.n	8003e28 <TIM_OC2_SetConfig+0xa0>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	4a18      	ldr	r2, [pc, #96]	; (8003e84 <TIM_OC2_SetConfig+0xfc>)
 8003e24:	4293      	cmp	r3, r2
 8003e26:	d113      	bne.n	8003e50 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e2e:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e36:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	695b      	ldr	r3, [r3, #20]
 8003e3c:	009b      	lsls	r3, r3, #2
 8003e3e:	693a      	ldr	r2, [r7, #16]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	693a      	ldr	r2, [r7, #16]
 8003e4c:	4313      	orrs	r3, r2
 8003e4e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	693a      	ldr	r2, [r7, #16]
 8003e54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	68fa      	ldr	r2, [r7, #12]
 8003e5a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	697a      	ldr	r2, [r7, #20]
 8003e68:	621a      	str	r2, [r3, #32]
}
 8003e6a:	bf00      	nop
 8003e6c:	371c      	adds	r7, #28
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e74:	4770      	bx	lr
 8003e76:	bf00      	nop
 8003e78:	40012c00 	.word	0x40012c00
 8003e7c:	40014000 	.word	0x40014000
 8003e80:	40014400 	.word	0x40014400
 8003e84:	40014800 	.word	0x40014800

08003e88 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b087      	sub	sp, #28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	6078      	str	r0, [r7, #4]
 8003e90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	685b      	ldr	r3, [r3, #4]
 8003ea8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003eb6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f023 0303 	bic.w	r3, r3, #3
 8003ec2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	68fa      	ldr	r2, [r7, #12]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003ed4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	021b      	lsls	r3, r3, #8
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a23      	ldr	r2, [pc, #140]	; (8003f74 <TIM_OC3_SetConfig+0xec>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d10d      	bne.n	8003f06 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ef0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	68db      	ldr	r3, [r3, #12]
 8003ef6:	021b      	lsls	r3, r3, #8
 8003ef8:	697a      	ldr	r2, [r7, #20]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f04:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a1a      	ldr	r2, [pc, #104]	; (8003f74 <TIM_OC3_SetConfig+0xec>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00b      	beq.n	8003f26 <TIM_OC3_SetConfig+0x9e>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a19      	ldr	r2, [pc, #100]	; (8003f78 <TIM_OC3_SetConfig+0xf0>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d007      	beq.n	8003f26 <TIM_OC3_SetConfig+0x9e>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a18      	ldr	r2, [pc, #96]	; (8003f7c <TIM_OC3_SetConfig+0xf4>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d003      	beq.n	8003f26 <TIM_OC3_SetConfig+0x9e>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a17      	ldr	r2, [pc, #92]	; (8003f80 <TIM_OC3_SetConfig+0xf8>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d113      	bne.n	8003f4e <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f26:	693b      	ldr	r3, [r7, #16]
 8003f28:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	695b      	ldr	r3, [r3, #20]
 8003f3a:	011b      	lsls	r3, r3, #4
 8003f3c:	693a      	ldr	r2, [r7, #16]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	011b      	lsls	r3, r3, #4
 8003f48:	693a      	ldr	r2, [r7, #16]
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	68fa      	ldr	r2, [r7, #12]
 8003f58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	621a      	str	r2, [r3, #32]
}
 8003f68:	bf00      	nop
 8003f6a:	371c      	adds	r7, #28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr
 8003f74:	40012c00 	.word	0x40012c00
 8003f78:	40014000 	.word	0x40014000
 8003f7c:	40014400 	.word	0x40014400
 8003f80:	40014800 	.word	0x40014800

08003f84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b087      	sub	sp, #28
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	69db      	ldr	r3, [r3, #28]
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003fb6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fbe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	021b      	lsls	r3, r3, #8
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	4313      	orrs	r3, r2
 8003fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003fcc:	693b      	ldr	r3, [r7, #16]
 8003fce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003fd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003fd4:	683b      	ldr	r3, [r7, #0]
 8003fd6:	689b      	ldr	r3, [r3, #8]
 8003fd8:	031b      	lsls	r3, r3, #12
 8003fda:	693a      	ldr	r2, [r7, #16]
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a16      	ldr	r2, [pc, #88]	; (800403c <TIM_OC4_SetConfig+0xb8>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00b      	beq.n	8004000 <TIM_OC4_SetConfig+0x7c>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a15      	ldr	r2, [pc, #84]	; (8004040 <TIM_OC4_SetConfig+0xbc>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d007      	beq.n	8004000 <TIM_OC4_SetConfig+0x7c>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a14      	ldr	r2, [pc, #80]	; (8004044 <TIM_OC4_SetConfig+0xc0>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d003      	beq.n	8004000 <TIM_OC4_SetConfig+0x7c>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a13      	ldr	r2, [pc, #76]	; (8004048 <TIM_OC4_SetConfig+0xc4>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d109      	bne.n	8004014 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004006:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	019b      	lsls	r3, r3, #6
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	4313      	orrs	r3, r2
 8004012:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	697a      	ldr	r2, [r7, #20]
 8004018:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68fa      	ldr	r2, [r7, #12]
 800401e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	685a      	ldr	r2, [r3, #4]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	621a      	str	r2, [r3, #32]
}
 800402e:	bf00      	nop
 8004030:	371c      	adds	r7, #28
 8004032:	46bd      	mov	sp, r7
 8004034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004038:	4770      	bx	lr
 800403a:	bf00      	nop
 800403c:	40012c00 	.word	0x40012c00
 8004040:	40014000 	.word	0x40014000
 8004044:	40014400 	.word	0x40014400
 8004048:	40014800 	.word	0x40014800

0800404c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6a1b      	ldr	r3, [r3, #32]
 800405a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800407a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800407e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68fa      	ldr	r2, [r7, #12]
 8004086:	4313      	orrs	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8004090:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	041b      	lsls	r3, r3, #16
 8004098:	693a      	ldr	r2, [r7, #16]
 800409a:	4313      	orrs	r3, r2
 800409c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a15      	ldr	r2, [pc, #84]	; (80040f8 <TIM_OC5_SetConfig+0xac>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d00b      	beq.n	80040be <TIM_OC5_SetConfig+0x72>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a14      	ldr	r2, [pc, #80]	; (80040fc <TIM_OC5_SetConfig+0xb0>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d007      	beq.n	80040be <TIM_OC5_SetConfig+0x72>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a13      	ldr	r2, [pc, #76]	; (8004100 <TIM_OC5_SetConfig+0xb4>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d003      	beq.n	80040be <TIM_OC5_SetConfig+0x72>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a12      	ldr	r2, [pc, #72]	; (8004104 <TIM_OC5_SetConfig+0xb8>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d109      	bne.n	80040d2 <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80040be:	697b      	ldr	r3, [r7, #20]
 80040c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	021b      	lsls	r3, r3, #8
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	697a      	ldr	r2, [r7, #20]
 80040d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	68fa      	ldr	r2, [r7, #12]
 80040dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	693a      	ldr	r2, [r7, #16]
 80040ea:	621a      	str	r2, [r3, #32]
}
 80040ec:	bf00      	nop
 80040ee:	371c      	adds	r7, #28
 80040f0:	46bd      	mov	sp, r7
 80040f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f6:	4770      	bx	lr
 80040f8:	40012c00 	.word	0x40012c00
 80040fc:	40014000 	.word	0x40014000
 8004100:	40014400 	.word	0x40014400
 8004104:	40014800 	.word	0x40014800

08004108 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8004108:	b480      	push	{r7}
 800410a:	b087      	sub	sp, #28
 800410c:	af00      	add	r7, sp, #0
 800410e:	6078      	str	r0, [r7, #4]
 8004110:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	685b      	ldr	r3, [r3, #4]
 8004128:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004136:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800413a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800413c:	683b      	ldr	r3, [r7, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	021b      	lsls	r3, r3, #8
 8004142:	68fa      	ldr	r2, [r7, #12]
 8004144:	4313      	orrs	r3, r2
 8004146:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004148:	693b      	ldr	r3, [r7, #16]
 800414a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800414e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	689b      	ldr	r3, [r3, #8]
 8004154:	051b      	lsls	r3, r3, #20
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	4313      	orrs	r3, r2
 800415a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a16      	ldr	r2, [pc, #88]	; (80041b8 <TIM_OC6_SetConfig+0xb0>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d00b      	beq.n	800417c <TIM_OC6_SetConfig+0x74>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	4a15      	ldr	r2, [pc, #84]	; (80041bc <TIM_OC6_SetConfig+0xb4>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d007      	beq.n	800417c <TIM_OC6_SetConfig+0x74>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	4a14      	ldr	r2, [pc, #80]	; (80041c0 <TIM_OC6_SetConfig+0xb8>)
 8004170:	4293      	cmp	r3, r2
 8004172:	d003      	beq.n	800417c <TIM_OC6_SetConfig+0x74>
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	4a13      	ldr	r2, [pc, #76]	; (80041c4 <TIM_OC6_SetConfig+0xbc>)
 8004178:	4293      	cmp	r3, r2
 800417a:	d109      	bne.n	8004190 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800417c:	697b      	ldr	r3, [r7, #20]
 800417e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004182:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	029b      	lsls	r3, r3, #10
 800418a:	697a      	ldr	r2, [r7, #20]
 800418c:	4313      	orrs	r3, r2
 800418e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	697a      	ldr	r2, [r7, #20]
 8004194:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685a      	ldr	r2, [r3, #4]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	693a      	ldr	r2, [r7, #16]
 80041a8:	621a      	str	r2, [r3, #32]
}
 80041aa:	bf00      	nop
 80041ac:	371c      	adds	r7, #28
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	40012c00 	.word	0x40012c00
 80041bc:	40014000 	.word	0x40014000
 80041c0:	40014400 	.word	0x40014400
 80041c4:	40014800 	.word	0x40014800

080041c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b087      	sub	sp, #28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	60f8      	str	r0, [r7, #12]
 80041d0:	60b9      	str	r1, [r7, #8]
 80041d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	6a1b      	ldr	r3, [r3, #32]
 80041de:	f023 0201 	bic.w	r2, r3, #1
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	699b      	ldr	r3, [r3, #24]
 80041ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	011b      	lsls	r3, r3, #4
 80041f8:	693a      	ldr	r2, [r7, #16]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80041fe:	697b      	ldr	r3, [r7, #20]
 8004200:	f023 030a 	bic.w	r3, r3, #10
 8004204:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004206:	697a      	ldr	r2, [r7, #20]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	4313      	orrs	r3, r2
 800420c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	693a      	ldr	r2, [r7, #16]
 8004212:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	697a      	ldr	r2, [r7, #20]
 8004218:	621a      	str	r2, [r3, #32]
}
 800421a:	bf00      	nop
 800421c:	371c      	adds	r7, #28
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004226:	b480      	push	{r7}
 8004228:	b087      	sub	sp, #28
 800422a:	af00      	add	r7, sp, #0
 800422c:	60f8      	str	r0, [r7, #12]
 800422e:	60b9      	str	r1, [r7, #8]
 8004230:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	f023 0210 	bic.w	r2, r3, #16
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800424a:	697b      	ldr	r3, [r7, #20]
 800424c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004250:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	031b      	lsls	r3, r3, #12
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	4313      	orrs	r3, r2
 800425a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800425c:	693b      	ldr	r3, [r7, #16]
 800425e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004262:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	011b      	lsls	r3, r3, #4
 8004268:	693a      	ldr	r2, [r7, #16]
 800426a:	4313      	orrs	r3, r2
 800426c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	693a      	ldr	r2, [r7, #16]
 8004278:	621a      	str	r2, [r3, #32]
}
 800427a:	bf00      	nop
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004284:	4770      	bx	lr

08004286 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004286:	b480      	push	{r7}
 8004288:	b085      	sub	sp, #20
 800428a:	af00      	add	r7, sp, #0
 800428c:	6078      	str	r0, [r7, #4]
 800428e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800429c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800429e:	683a      	ldr	r2, [r7, #0]
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	4313      	orrs	r3, r2
 80042a4:	f043 0307 	orr.w	r3, r3, #7
 80042a8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	68fa      	ldr	r2, [r7, #12]
 80042ae:	609a      	str	r2, [r3, #8]
}
 80042b0:	bf00      	nop
 80042b2:	3714      	adds	r7, #20
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr

080042bc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	60f8      	str	r0, [r7, #12]
 80042c4:	60b9      	str	r1, [r7, #8]
 80042c6:	607a      	str	r2, [r7, #4]
 80042c8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042d0:	697b      	ldr	r3, [r7, #20]
 80042d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042d6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	021a      	lsls	r2, r3, #8
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	431a      	orrs	r2, r3
 80042e0:	68bb      	ldr	r3, [r7, #8]
 80042e2:	4313      	orrs	r3, r2
 80042e4:	697a      	ldr	r2, [r7, #20]
 80042e6:	4313      	orrs	r3, r2
 80042e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	609a      	str	r2, [r3, #8]
}
 80042f0:	bf00      	nop
 80042f2:	371c      	adds	r7, #28
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr

080042fc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b087      	sub	sp, #28
 8004300:	af00      	add	r7, sp, #0
 8004302:	60f8      	str	r0, [r7, #12]
 8004304:	60b9      	str	r1, [r7, #8]
 8004306:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	f003 031f 	and.w	r3, r3, #31
 800430e:	2201      	movs	r2, #1
 8004310:	fa02 f303 	lsl.w	r3, r2, r3
 8004314:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	6a1a      	ldr	r2, [r3, #32]
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	43db      	mvns	r3, r3
 800431e:	401a      	ands	r2, r3
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	6a1a      	ldr	r2, [r3, #32]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	f003 031f 	and.w	r3, r3, #31
 800432e:	6879      	ldr	r1, [r7, #4]
 8004330:	fa01 f303 	lsl.w	r3, r1, r3
 8004334:	431a      	orrs	r2, r3
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	621a      	str	r2, [r3, #32]
}
 800433a:	bf00      	nop
 800433c:	371c      	adds	r7, #28
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr
	...

08004348 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004348:	b480      	push	{r7}
 800434a:	b085      	sub	sp, #20
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004358:	2b01      	cmp	r3, #1
 800435a:	d101      	bne.n	8004360 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800435c:	2302      	movs	r3, #2
 800435e:	e054      	b.n	800440a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2201      	movs	r2, #1
 8004364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2202      	movs	r2, #2
 800436c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a24      	ldr	r2, [pc, #144]	; (8004418 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d108      	bne.n	800439c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8004390:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	685b      	ldr	r3, [r3, #4]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	4313      	orrs	r3, r2
 800439a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	68fa      	ldr	r2, [r7, #12]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	68fa      	ldr	r2, [r7, #12]
 80043b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	4a17      	ldr	r2, [pc, #92]	; (8004418 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80043bc:	4293      	cmp	r3, r2
 80043be:	d00e      	beq.n	80043de <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c8:	d009      	beq.n	80043de <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a13      	ldr	r2, [pc, #76]	; (800441c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d004      	beq.n	80043de <HAL_TIMEx_MasterConfigSynchronization+0x96>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	4a11      	ldr	r2, [pc, #68]	; (8004420 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d10c      	bne.n	80043f8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80043de:	68bb      	ldr	r3, [r7, #8]
 80043e0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80043e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	689b      	ldr	r3, [r3, #8]
 80043ea:	68ba      	ldr	r2, [r7, #8]
 80043ec:	4313      	orrs	r3, r2
 80043ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	68ba      	ldr	r2, [r7, #8]
 80043f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2201      	movs	r2, #1
 80043fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004408:	2300      	movs	r3, #0
}
 800440a:	4618      	mov	r0, r3
 800440c:	3714      	adds	r7, #20
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr
 8004416:	bf00      	nop
 8004418:	40012c00 	.word	0x40012c00
 800441c:	40000400 	.word	0x40000400
 8004420:	40014000 	.word	0x40014000

08004424 <HAL_MultiProcessor_Init>:
  *        HAL_MultiProcessorEx_AddressLength_Set() must be called after
  *        HAL_MultiProcessor_Init().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	460b      	mov	r3, r1
 800442e:	607a      	str	r2, [r7, #4]
 8004430:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d101      	bne.n	800443c <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8004438:	2301      	movs	r3, #1
 800443a:	e059      	b.n	80044f0 <HAL_MultiProcessor_Init+0xcc>
  }

  /* Check the wake up method parameter */
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));

  if (huart->gState == HAL_UART_STATE_RESET)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004440:	2b00      	cmp	r3, #0
 8004442:	d106      	bne.n	8004452 <HAL_MultiProcessor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800444c:	68f8      	ldr	r0, [r7, #12]
 800444e:	f7fc fbf7 	bl	8000c40 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2224      	movs	r2, #36	; 0x24
 8004456:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f022 0201 	bic.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004468:	68f8      	ldr	r0, [r7, #12]
 800446a:	f000 f8d9 	bl	8004620 <UART_SetConfig>
 800446e:	4603      	mov	r3, r0
 8004470:	2b01      	cmp	r3, #1
 8004472:	d101      	bne.n	8004478 <HAL_MultiProcessor_Init+0x54>
  {
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e03b      	b.n	80044f0 <HAL_MultiProcessor_Init+0xcc>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800447c:	2b00      	cmp	r3, #0
 800447e:	d002      	beq.n	8004486 <HAL_MultiProcessor_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004480:	68f8      	ldr	r0, [r7, #12]
 8004482:	f000 fa03 	bl	800488c <UART_AdvFeatureConfig>
  }

  /* In multiprocessor mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register. */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685a      	ldr	r2, [r3, #4]
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004494:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	689a      	ldr	r2, [r3, #8]
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044a4:	609a      	str	r2, [r3, #8]

  if (WakeUpMethod == UART_WAKEUPMETHOD_ADDRESSMARK)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044ac:	d10a      	bne.n	80044c4 <HAL_MultiProcessor_Init+0xa0>
  {
    /* If address mark wake up method is chosen, set the USART address node */
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ADD, ((uint32_t)Address << UART_CR2_ADDRESS_LSB_POS));
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	685b      	ldr	r3, [r3, #4]
 80044b4:	f023 417f 	bic.w	r1, r3, #4278190080	; 0xff000000
 80044b8:	7afb      	ldrb	r3, [r7, #11]
 80044ba:	061a      	lsls	r2, r3, #24
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	430a      	orrs	r2, r1
 80044c2:	605a      	str	r2, [r3, #4]
  }

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_WAKE, WakeUpMethod);
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f423 6100 	bic.w	r1, r3, #2048	; 0x800
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	687a      	ldr	r2, [r7, #4]
 80044d4:	430a      	orrs	r2, r1
 80044d6:	601a      	str	r2, [r3, #0]

  __HAL_UART_ENABLE(huart);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f042 0201 	orr.w	r2, r2, #1
 80044e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 fa71 	bl	80049d0 <UART_CheckIdleState>
 80044ee:	4603      	mov	r3, r0
}
 80044f0:	4618      	mov	r0, r3
 80044f2:	3710      	adds	r7, #16
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}

080044f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b08a      	sub	sp, #40	; 0x28
 80044fc:	af02      	add	r7, sp, #8
 80044fe:	60f8      	str	r0, [r7, #12]
 8004500:	60b9      	str	r1, [r7, #8]
 8004502:	603b      	str	r3, [r7, #0]
 8004504:	4613      	mov	r3, r2
 8004506:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800450c:	2b20      	cmp	r3, #32
 800450e:	f040 8082 	bne.w	8004616 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d002      	beq.n	800451e <HAL_UART_Transmit+0x26>
 8004518:	88fb      	ldrh	r3, [r7, #6]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	e07a      	b.n	8004618 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8004528:	2b01      	cmp	r3, #1
 800452a:	d101      	bne.n	8004530 <HAL_UART_Transmit+0x38>
 800452c:	2302      	movs	r3, #2
 800452e:	e073      	b.n	8004618 <HAL_UART_Transmit+0x120>
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	2200      	movs	r2, #0
 800453c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	2221      	movs	r2, #33	; 0x21
 8004544:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004546:	f7fc fc7f 	bl	8000e48 <HAL_GetTick>
 800454a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	88fa      	ldrh	r2, [r7, #6]
 8004550:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	88fa      	ldrh	r2, [r7, #6]
 8004558:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	689b      	ldr	r3, [r3, #8]
 8004560:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004564:	d108      	bne.n	8004578 <HAL_UART_Transmit+0x80>
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d104      	bne.n	8004578 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800456e:	2300      	movs	r3, #0
 8004570:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	61bb      	str	r3, [r7, #24]
 8004576:	e003      	b.n	8004580 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800457c:	2300      	movs	r3, #0
 800457e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8004588:	e02d      	b.n	80045e6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	9300      	str	r3, [sp, #0]
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	2200      	movs	r2, #0
 8004592:	2180      	movs	r1, #128	; 0x80
 8004594:	68f8      	ldr	r0, [r7, #12]
 8004596:	f000 fa64 	bl	8004a62 <UART_WaitOnFlagUntilTimeout>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80045a0:	2303      	movs	r3, #3
 80045a2:	e039      	b.n	8004618 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d10b      	bne.n	80045c2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80045aa:	69bb      	ldr	r3, [r7, #24]
 80045ac:	881a      	ldrh	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045b6:	b292      	uxth	r2, r2
 80045b8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045ba:	69bb      	ldr	r3, [r7, #24]
 80045bc:	3302      	adds	r3, #2
 80045be:	61bb      	str	r3, [r7, #24]
 80045c0:	e008      	b.n	80045d4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	781a      	ldrb	r2, [r3, #0]
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	b292      	uxth	r2, r2
 80045cc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	3301      	adds	r3, #1
 80045d2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045da:	b29b      	uxth	r3, r3
 80045dc:	3b01      	subs	r3, #1
 80045de:	b29a      	uxth	r2, r3
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045ec:	b29b      	uxth	r3, r3
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d1cb      	bne.n	800458a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	9300      	str	r3, [sp, #0]
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	2200      	movs	r2, #0
 80045fa:	2140      	movs	r1, #64	; 0x40
 80045fc:	68f8      	ldr	r0, [r7, #12]
 80045fe:	f000 fa30 	bl	8004a62 <UART_WaitOnFlagUntilTimeout>
 8004602:	4603      	mov	r3, r0
 8004604:	2b00      	cmp	r3, #0
 8004606:	d001      	beq.n	800460c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8004608:	2303      	movs	r3, #3
 800460a:	e005      	b.n	8004618 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	2220      	movs	r2, #32
 8004610:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8004612:	2300      	movs	r3, #0
 8004614:	e000      	b.n	8004618 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8004616:	2302      	movs	r3, #2
  }
}
 8004618:	4618      	mov	r0, r3
 800461a:	3720      	adds	r7, #32
 800461c:	46bd      	mov	sp, r7
 800461e:	bd80      	pop	{r7, pc}

08004620 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b088      	sub	sp, #32
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004628:	2300      	movs	r3, #0
 800462a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	689a      	ldr	r2, [r3, #8]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	691b      	ldr	r3, [r3, #16]
 8004634:	431a      	orrs	r2, r3
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	695b      	ldr	r3, [r3, #20]
 800463a:	431a      	orrs	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	69db      	ldr	r3, [r3, #28]
 8004640:	4313      	orrs	r3, r2
 8004642:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	4b8a      	ldr	r3, [pc, #552]	; (8004874 <UART_SetConfig+0x254>)
 800464c:	4013      	ands	r3, r2
 800464e:	687a      	ldr	r2, [r7, #4]
 8004650:	6812      	ldr	r2, [r2, #0]
 8004652:	6979      	ldr	r1, [r7, #20]
 8004654:	430b      	orrs	r3, r1
 8004656:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	68da      	ldr	r2, [r3, #12]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	430a      	orrs	r2, r1
 800466c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6a1b      	ldr	r3, [r3, #32]
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	4313      	orrs	r3, r2
 800467c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	430a      	orrs	r2, r1
 8004690:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a78      	ldr	r2, [pc, #480]	; (8004878 <UART_SetConfig+0x258>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d120      	bne.n	80046de <UART_SetConfig+0xbe>
 800469c:	4b77      	ldr	r3, [pc, #476]	; (800487c <UART_SetConfig+0x25c>)
 800469e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a0:	f003 0303 	and.w	r3, r3, #3
 80046a4:	2b03      	cmp	r3, #3
 80046a6:	d817      	bhi.n	80046d8 <UART_SetConfig+0xb8>
 80046a8:	a201      	add	r2, pc, #4	; (adr r2, 80046b0 <UART_SetConfig+0x90>)
 80046aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046ae:	bf00      	nop
 80046b0:	080046c1 	.word	0x080046c1
 80046b4:	080046cd 	.word	0x080046cd
 80046b8:	080046d3 	.word	0x080046d3
 80046bc:	080046c7 	.word	0x080046c7
 80046c0:	2300      	movs	r3, #0
 80046c2:	77fb      	strb	r3, [r7, #31]
 80046c4:	e01d      	b.n	8004702 <UART_SetConfig+0xe2>
 80046c6:	2302      	movs	r3, #2
 80046c8:	77fb      	strb	r3, [r7, #31]
 80046ca:	e01a      	b.n	8004702 <UART_SetConfig+0xe2>
 80046cc:	2304      	movs	r3, #4
 80046ce:	77fb      	strb	r3, [r7, #31]
 80046d0:	e017      	b.n	8004702 <UART_SetConfig+0xe2>
 80046d2:	2308      	movs	r3, #8
 80046d4:	77fb      	strb	r3, [r7, #31]
 80046d6:	e014      	b.n	8004702 <UART_SetConfig+0xe2>
 80046d8:	2310      	movs	r3, #16
 80046da:	77fb      	strb	r3, [r7, #31]
 80046dc:	e011      	b.n	8004702 <UART_SetConfig+0xe2>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a67      	ldr	r2, [pc, #412]	; (8004880 <UART_SetConfig+0x260>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d102      	bne.n	80046ee <UART_SetConfig+0xce>
 80046e8:	2300      	movs	r3, #0
 80046ea:	77fb      	strb	r3, [r7, #31]
 80046ec:	e009      	b.n	8004702 <UART_SetConfig+0xe2>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	4a64      	ldr	r2, [pc, #400]	; (8004884 <UART_SetConfig+0x264>)
 80046f4:	4293      	cmp	r3, r2
 80046f6:	d102      	bne.n	80046fe <UART_SetConfig+0xde>
 80046f8:	2300      	movs	r3, #0
 80046fa:	77fb      	strb	r3, [r7, #31]
 80046fc:	e001      	b.n	8004702 <UART_SetConfig+0xe2>
 80046fe:	2310      	movs	r3, #16
 8004700:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69db      	ldr	r3, [r3, #28]
 8004706:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800470a:	d15b      	bne.n	80047c4 <UART_SetConfig+0x1a4>
  {
    switch (clocksource)
 800470c:	7ffb      	ldrb	r3, [r7, #31]
 800470e:	2b08      	cmp	r3, #8
 8004710:	d827      	bhi.n	8004762 <UART_SetConfig+0x142>
 8004712:	a201      	add	r2, pc, #4	; (adr r2, 8004718 <UART_SetConfig+0xf8>)
 8004714:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004718:	0800473d 	.word	0x0800473d
 800471c:	08004745 	.word	0x08004745
 8004720:	0800474d 	.word	0x0800474d
 8004724:	08004763 	.word	0x08004763
 8004728:	08004753 	.word	0x08004753
 800472c:	08004763 	.word	0x08004763
 8004730:	08004763 	.word	0x08004763
 8004734:	08004763 	.word	0x08004763
 8004738:	0800475b 	.word	0x0800475b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800473c:	f7fe fd32 	bl	80031a4 <HAL_RCC_GetPCLK1Freq>
 8004740:	61b8      	str	r0, [r7, #24]
        break;
 8004742:	e013      	b.n	800476c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004744:	f7fe fd50 	bl	80031e8 <HAL_RCC_GetPCLK2Freq>
 8004748:	61b8      	str	r0, [r7, #24]
        break;
 800474a:	e00f      	b.n	800476c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800474c:	4b4e      	ldr	r3, [pc, #312]	; (8004888 <UART_SetConfig+0x268>)
 800474e:	61bb      	str	r3, [r7, #24]
        break;
 8004750:	e00c      	b.n	800476c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004752:	f7fe fcb1 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 8004756:	61b8      	str	r0, [r7, #24]
        break;
 8004758:	e008      	b.n	800476c <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800475a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800475e:	61bb      	str	r3, [r7, #24]
        break;
 8004760:	e004      	b.n	800476c <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8004762:	2300      	movs	r3, #0
 8004764:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	77bb      	strb	r3, [r7, #30]
        break;
 800476a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d074      	beq.n	800485c <UART_SetConfig+0x23c>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	005a      	lsls	r2, r3, #1
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	685b      	ldr	r3, [r3, #4]
 800477a:	085b      	lsrs	r3, r3, #1
 800477c:	441a      	add	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	fbb2 f3f3 	udiv	r3, r2, r3
 8004786:	b29b      	uxth	r3, r3
 8004788:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	2b0f      	cmp	r3, #15
 800478e:	d916      	bls.n	80047be <UART_SetConfig+0x19e>
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004796:	d212      	bcs.n	80047be <UART_SetConfig+0x19e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	b29b      	uxth	r3, r3
 800479c:	f023 030f 	bic.w	r3, r3, #15
 80047a0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047a2:	693b      	ldr	r3, [r7, #16]
 80047a4:	085b      	lsrs	r3, r3, #1
 80047a6:	b29b      	uxth	r3, r3
 80047a8:	f003 0307 	and.w	r3, r3, #7
 80047ac:	b29a      	uxth	r2, r3
 80047ae:	89fb      	ldrh	r3, [r7, #14]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	89fa      	ldrh	r2, [r7, #14]
 80047ba:	60da      	str	r2, [r3, #12]
 80047bc:	e04e      	b.n	800485c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	77bb      	strb	r3, [r7, #30]
 80047c2:	e04b      	b.n	800485c <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047c4:	7ffb      	ldrb	r3, [r7, #31]
 80047c6:	2b08      	cmp	r3, #8
 80047c8:	d827      	bhi.n	800481a <UART_SetConfig+0x1fa>
 80047ca:	a201      	add	r2, pc, #4	; (adr r2, 80047d0 <UART_SetConfig+0x1b0>)
 80047cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d0:	080047f5 	.word	0x080047f5
 80047d4:	080047fd 	.word	0x080047fd
 80047d8:	08004805 	.word	0x08004805
 80047dc:	0800481b 	.word	0x0800481b
 80047e0:	0800480b 	.word	0x0800480b
 80047e4:	0800481b 	.word	0x0800481b
 80047e8:	0800481b 	.word	0x0800481b
 80047ec:	0800481b 	.word	0x0800481b
 80047f0:	08004813 	.word	0x08004813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80047f4:	f7fe fcd6 	bl	80031a4 <HAL_RCC_GetPCLK1Freq>
 80047f8:	61b8      	str	r0, [r7, #24]
        break;
 80047fa:	e013      	b.n	8004824 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80047fc:	f7fe fcf4 	bl	80031e8 <HAL_RCC_GetPCLK2Freq>
 8004800:	61b8      	str	r0, [r7, #24]
        break;
 8004802:	e00f      	b.n	8004824 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004804:	4b20      	ldr	r3, [pc, #128]	; (8004888 <UART_SetConfig+0x268>)
 8004806:	61bb      	str	r3, [r7, #24]
        break;
 8004808:	e00c      	b.n	8004824 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800480a:	f7fe fc55 	bl	80030b8 <HAL_RCC_GetSysClockFreq>
 800480e:	61b8      	str	r0, [r7, #24]
        break;
 8004810:	e008      	b.n	8004824 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004816:	61bb      	str	r3, [r7, #24]
        break;
 8004818:	e004      	b.n	8004824 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 800481a:	2300      	movs	r3, #0
 800481c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	77bb      	strb	r3, [r7, #30]
        break;
 8004822:	bf00      	nop
    }

    if (pclk != 0U)
 8004824:	69bb      	ldr	r3, [r7, #24]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d018      	beq.n	800485c <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	085a      	lsrs	r2, r3, #1
 8004830:	69bb      	ldr	r3, [r7, #24]
 8004832:	441a      	add	r2, r3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	fbb2 f3f3 	udiv	r3, r2, r3
 800483c:	b29b      	uxth	r3, r3
 800483e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	2b0f      	cmp	r3, #15
 8004844:	d908      	bls.n	8004858 <UART_SetConfig+0x238>
 8004846:	693b      	ldr	r3, [r7, #16]
 8004848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800484c:	d204      	bcs.n	8004858 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = usartdiv;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	60da      	str	r2, [r3, #12]
 8004856:	e001      	b.n	800485c <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8004858:	2301      	movs	r3, #1
 800485a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2200      	movs	r2, #0
 8004860:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	2200      	movs	r2, #0
 8004866:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8004868:	7fbb      	ldrb	r3, [r7, #30]
}
 800486a:	4618      	mov	r0, r3
 800486c:	3720      	adds	r7, #32
 800486e:	46bd      	mov	sp, r7
 8004870:	bd80      	pop	{r7, pc}
 8004872:	bf00      	nop
 8004874:	efff69f3 	.word	0xefff69f3
 8004878:	40013800 	.word	0x40013800
 800487c:	40021000 	.word	0x40021000
 8004880:	40004400 	.word	0x40004400
 8004884:	40004800 	.word	0x40004800
 8004888:	007a1200 	.word	0x007a1200

0800488c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	f003 0301 	and.w	r3, r3, #1
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00a      	beq.n	80048b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	430a      	orrs	r2, r1
 80048b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d00a      	beq.n	80048d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	430a      	orrs	r2, r1
 80048d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048dc:	f003 0304 	and.w	r3, r3, #4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00a      	beq.n	80048fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	430a      	orrs	r2, r1
 80048f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d00a      	beq.n	800491c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	685b      	ldr	r3, [r3, #4]
 800490c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	430a      	orrs	r2, r1
 800491a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004920:	f003 0310 	and.w	r3, r3, #16
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00a      	beq.n	800493e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	689b      	ldr	r3, [r3, #8]
 800492e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	430a      	orrs	r2, r1
 800493c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004942:	f003 0320 	and.w	r3, r3, #32
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00a      	beq.n	8004960 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	430a      	orrs	r2, r1
 800495e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004964:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004968:	2b00      	cmp	r3, #0
 800496a:	d01a      	beq.n	80049a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	685b      	ldr	r3, [r3, #4]
 8004972:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	430a      	orrs	r2, r1
 8004980:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800498a:	d10a      	bne.n	80049a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	430a      	orrs	r2, r1
 80049a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d00a      	beq.n	80049c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	685b      	ldr	r3, [r3, #4]
 80049b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	430a      	orrs	r2, r1
 80049c2:	605a      	str	r2, [r3, #4]
  }
}
 80049c4:	bf00      	nop
 80049c6:	370c      	adds	r7, #12
 80049c8:	46bd      	mov	sp, r7
 80049ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ce:	4770      	bx	lr

080049d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b086      	sub	sp, #24
 80049d4:	af02      	add	r7, sp, #8
 80049d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2200      	movs	r2, #0
 80049dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80049e0:	f7fc fa32 	bl	8000e48 <HAL_GetTick>
 80049e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f003 0308 	and.w	r3, r3, #8
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d10e      	bne.n	8004a12 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80049f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80049f8:	9300      	str	r3, [sp, #0]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 f82d 	bl	8004a62 <UART_WaitOnFlagUntilTimeout>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a0e:	2303      	movs	r3, #3
 8004a10:	e023      	b.n	8004a5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0304 	and.w	r3, r3, #4
 8004a1c:	2b04      	cmp	r3, #4
 8004a1e:	d10e      	bne.n	8004a3e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a20:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004a24:	9300      	str	r3, [sp, #0]
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004a2e:	6878      	ldr	r0, [r7, #4]
 8004a30:	f000 f817 	bl	8004a62 <UART_WaitOnFlagUntilTimeout>
 8004a34:	4603      	mov	r3, r0
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d001      	beq.n	8004a3e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a3a:	2303      	movs	r3, #3
 8004a3c:	e00d      	b.n	8004a5a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2220      	movs	r2, #32
 8004a42:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2220      	movs	r2, #32
 8004a48:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	2200      	movs	r2, #0
 8004a4e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b084      	sub	sp, #16
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	603b      	str	r3, [r7, #0]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a72:	e05e      	b.n	8004b32 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a7a:	d05a      	beq.n	8004b32 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a7c:	f7fc f9e4 	bl	8000e48 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	429a      	cmp	r2, r3
 8004a8a:	d302      	bcc.n	8004a92 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a8c:	69bb      	ldr	r3, [r7, #24]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d11b      	bne.n	8004aca <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004aa0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	689a      	ldr	r2, [r3, #8]
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	f022 0201 	bic.w	r2, r2, #1
 8004ab0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2220      	movs	r2, #32
 8004abc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004ac6:	2303      	movs	r3, #3
 8004ac8:	e043      	b.n	8004b52 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f003 0304 	and.w	r3, r3, #4
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d02c      	beq.n	8004b32 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	69db      	ldr	r3, [r3, #28]
 8004ade:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ae2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ae6:	d124      	bne.n	8004b32 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004af0:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	681a      	ldr	r2, [r3, #0]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b00:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	689a      	ldr	r2, [r3, #8]
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f022 0201 	bic.w	r2, r2, #1
 8004b10:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	2220      	movs	r2, #32
 8004b16:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	2220      	movs	r2, #32
 8004b22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e00f      	b.n	8004b52 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	69da      	ldr	r2, [r3, #28]
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	429a      	cmp	r2, r3
 8004b40:	bf0c      	ite	eq
 8004b42:	2301      	moveq	r3, #1
 8004b44:	2300      	movne	r3, #0
 8004b46:	b2db      	uxtb	r3, r3
 8004b48:	461a      	mov	r2, r3
 8004b4a:	79fb      	ldrb	r3, [r7, #7]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d091      	beq.n	8004a74 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
	...

08004b5c <__libc_init_array>:
 8004b5c:	b570      	push	{r4, r5, r6, lr}
 8004b5e:	4d0d      	ldr	r5, [pc, #52]	; (8004b94 <__libc_init_array+0x38>)
 8004b60:	4c0d      	ldr	r4, [pc, #52]	; (8004b98 <__libc_init_array+0x3c>)
 8004b62:	1b64      	subs	r4, r4, r5
 8004b64:	10a4      	asrs	r4, r4, #2
 8004b66:	2600      	movs	r6, #0
 8004b68:	42a6      	cmp	r6, r4
 8004b6a:	d109      	bne.n	8004b80 <__libc_init_array+0x24>
 8004b6c:	4d0b      	ldr	r5, [pc, #44]	; (8004b9c <__libc_init_array+0x40>)
 8004b6e:	4c0c      	ldr	r4, [pc, #48]	; (8004ba0 <__libc_init_array+0x44>)
 8004b70:	f000 f820 	bl	8004bb4 <_init>
 8004b74:	1b64      	subs	r4, r4, r5
 8004b76:	10a4      	asrs	r4, r4, #2
 8004b78:	2600      	movs	r6, #0
 8004b7a:	42a6      	cmp	r6, r4
 8004b7c:	d105      	bne.n	8004b8a <__libc_init_array+0x2e>
 8004b7e:	bd70      	pop	{r4, r5, r6, pc}
 8004b80:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b84:	4798      	blx	r3
 8004b86:	3601      	adds	r6, #1
 8004b88:	e7ee      	b.n	8004b68 <__libc_init_array+0xc>
 8004b8a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b8e:	4798      	blx	r3
 8004b90:	3601      	adds	r6, #1
 8004b92:	e7f2      	b.n	8004b7a <__libc_init_array+0x1e>
 8004b94:	08004c04 	.word	0x08004c04
 8004b98:	08004c04 	.word	0x08004c04
 8004b9c:	08004c04 	.word	0x08004c04
 8004ba0:	08004c08 	.word	0x08004c08

08004ba4 <memset>:
 8004ba4:	4402      	add	r2, r0
 8004ba6:	4603      	mov	r3, r0
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d100      	bne.n	8004bae <memset+0xa>
 8004bac:	4770      	bx	lr
 8004bae:	f803 1b01 	strb.w	r1, [r3], #1
 8004bb2:	e7f9      	b.n	8004ba8 <memset+0x4>

08004bb4 <_init>:
 8004bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bb6:	bf00      	nop
 8004bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bba:	bc08      	pop	{r3}
 8004bbc:	469e      	mov	lr, r3
 8004bbe:	4770      	bx	lr

08004bc0 <_fini>:
 8004bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004bc2:	bf00      	nop
 8004bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004bc6:	bc08      	pop	{r3}
 8004bc8:	469e      	mov	lr, r3
 8004bca:	4770      	bx	lr
